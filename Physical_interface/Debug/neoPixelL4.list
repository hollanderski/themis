
neoPixelL4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033cc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a0  080035a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035a8  080035a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  080035bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080035bc  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfba  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b82  00000000  00000000  0002bff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b50  00000000  00000000  0002db78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002e6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f9e0  00000000  00000000  0002f120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000944f  00000000  00000000  0004eb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bdffc  00000000  00000000  00057f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00115f4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d80  00000000  00000000  00115fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003540 	.word	0x08003540

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003540 	.word	0x08003540

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 f93c 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f80d 	bl	80004fc <HAL_InitTick>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e001      	b.n	80004f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ee:	f002 fea7 	bl	8003240 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f2:	79fb      	ldrb	r3, [r7, #7]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_InitTick+0x68>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d022      	beq.n	8000556 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_InitTick+0x6c>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <HAL_InitTick+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000520:	fbb2 f3f3 	udiv	r3, r2, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f93c 	bl	80007a2 <HAL_SYSTICK_Config>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10f      	bne.n	8000550 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b0f      	cmp	r3, #15
 8000534:	d809      	bhi.n	800054a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000536:	2200      	movs	r2, #0
 8000538:	6879      	ldr	r1, [r7, #4]
 800053a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800053e:	f000 f914 	bl	800076a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <HAL_InitTick+0x70>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	e007      	b.n	800055a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e004      	b.n	800055a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e001      	b.n	800055a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000004 	.word	0x20000004
 8000568:	20000008 	.word	0x20000008
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_IncTick+0x1c>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_IncTick+0x20>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4413      	add	r3, r2
 800057e:	4a03      	ldr	r2, [pc, #12]	; (800058c <HAL_IncTick+0x1c>)
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20000028 	.word	0x20000028
 8000590:	20000004 	.word	0x20000004

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d004      	beq.n	80005d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	4413      	add	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d0:	bf00      	nop
 80005d2:	f7ff ffdf 	bl	8000594 <HAL_GetTick>
 80005d6:	4602      	mov	r2, r0
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d8f7      	bhi.n	80005d2 <HAL_Delay+0x26>
  {
  }
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000734:	f7ff ff8e 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff47 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff5c 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff8e 	bl	80006a8 <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff5d 	bl	8000654 <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffb0 	bl	8000710 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ca:	e148      	b.n	8000a5e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	2101      	movs	r1, #1
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	fa01 f303 	lsl.w	r3, r1, r3
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f000 813a 	beq.w	8000a58 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d003      	beq.n	80007f4 <HAL_GPIO_Init+0x38>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b12      	cmp	r3, #18
 80007f2:	d123      	bne.n	800083c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	08da      	lsrs	r2, r3, #3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3208      	adds	r2, #8
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	f003 0307 	and.w	r3, r3, #7
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	220f      	movs	r2, #15
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	691a      	ldr	r2, [r3, #16]
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	4313      	orrs	r3, r2
 800082c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	08da      	lsrs	r2, r3, #3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3208      	adds	r2, #8
 8000836:	6939      	ldr	r1, [r7, #16]
 8000838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	2203      	movs	r2, #3
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f003 0203 	and.w	r2, r3, #3
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4313      	orrs	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d00b      	beq.n	8000890 <HAL_GPIO_Init+0xd4>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d007      	beq.n	8000890 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000884:	2b11      	cmp	r3, #17
 8000886:	d003      	beq.n	8000890 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b12      	cmp	r3, #18
 800088e:	d130      	bne.n	80008f2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68da      	ldr	r2, [r3, #12]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008c6:	2201      	movs	r2, #1
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	091b      	lsrs	r3, r3, #4
 80008dc:	f003 0201 	and.w	r2, r3, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 8094 	beq.w	8000a58 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000930:	4b52      	ldr	r3, [pc, #328]	; (8000a7c <HAL_GPIO_Init+0x2c0>)
 8000932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <HAL_GPIO_Init+0x2c0>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6613      	str	r3, [r2, #96]	; 0x60
 800093c:	4b4f      	ldr	r3, [pc, #316]	; (8000a7c <HAL_GPIO_Init+0x2c0>)
 800093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000948:	4a4d      	ldr	r2, [pc, #308]	; (8000a80 <HAL_GPIO_Init+0x2c4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	3302      	adds	r3, #2
 8000950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	220f      	movs	r2, #15
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000972:	d00d      	beq.n	8000990 <HAL_GPIO_Init+0x1d4>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a43      	ldr	r2, [pc, #268]	; (8000a84 <HAL_GPIO_Init+0x2c8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d007      	beq.n	800098c <HAL_GPIO_Init+0x1d0>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a42      	ldr	r2, [pc, #264]	; (8000a88 <HAL_GPIO_Init+0x2cc>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d101      	bne.n	8000988 <HAL_GPIO_Init+0x1cc>
 8000984:	2302      	movs	r3, #2
 8000986:	e004      	b.n	8000992 <HAL_GPIO_Init+0x1d6>
 8000988:	2307      	movs	r3, #7
 800098a:	e002      	b.n	8000992 <HAL_GPIO_Init+0x1d6>
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <HAL_GPIO_Init+0x1d6>
 8000990:	2300      	movs	r3, #0
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	f002 0203 	and.w	r2, r2, #3
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	4093      	lsls	r3, r2
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009a2:	4937      	ldr	r1, [pc, #220]	; (8000a80 <HAL_GPIO_Init+0x2c4>)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80009d4:	4a2d      	ldr	r2, [pc, #180]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a28:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_GPIO_Init+0x2d0>)
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa22 f303 	lsr.w	r3, r2, r3
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f47f aeaf 	bne.w	80007cc <HAL_GPIO_Init+0x10>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	371c      	adds	r7, #28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010000 	.word	0x40010000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48000800 	.word	0x48000800
 8000a8c:	40010400 	.word	0x40010400

08000a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000aac:	e002      	b.n	8000ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000aae:	887a      	ldrh	r2, [r7, #2]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40007000 	.word	0x40007000

08000ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40007000 	.word	0x40007000

08000afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b0a:	d130      	bne.n	8000b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b18:	d038      	beq.n	8000b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2232      	movs	r2, #50	; 0x32
 8000b30:	fb02 f303 	mul.w	r3, r2, r3
 8000b34:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	0c9b      	lsrs	r3, r3, #18
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b40:	e002      	b.n	8000b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b54:	d102      	bne.n	8000b5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f2      	bne.n	8000b42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b68:	d110      	bne.n	8000b8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e00f      	b.n	8000b8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7a:	d007      	beq.n	8000b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40007000 	.word	0x40007000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	431bde83 	.word	0x431bde83

08000ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e3db      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bba:	4ba4      	ldr	r3, [pc, #656]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bc4:	4ba1      	ldr	r3, [pc, #644]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 80e1 	beq.w	8000d9e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d007      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x4a>
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	2b0c      	cmp	r3, #12
 8000be6:	f040 8088 	bne.w	8000cfa <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	f040 8084 	bne.w	8000cfa <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bf2:	4b96      	ldr	r3, [pc, #600]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d005      	beq.n	8000c0a <HAL_RCC_OscConfig+0x62>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e3b3      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a1a      	ldr	r2, [r3, #32]
 8000c0e:	4b8f      	ldr	r3, [pc, #572]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <HAL_RCC_OscConfig+0x7c>
 8000c1a:	4b8c      	ldr	r3, [pc, #560]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c22:	e005      	b.n	8000c30 <HAL_RCC_OscConfig+0x88>
 8000c24:	4b89      	ldr	r3, [pc, #548]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c2a:	091b      	lsrs	r3, r3, #4
 8000c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d223      	bcs.n	8000c7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fd47 	bl	80016cc <RCC_SetFlashLatencyFromMSIRange>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e394      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c48:	4b80      	ldr	r3, [pc, #512]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a7f      	ldr	r2, [pc, #508]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	4b7d      	ldr	r3, [pc, #500]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a1b      	ldr	r3, [r3, #32]
 8000c60:	497a      	ldr	r1, [pc, #488]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c62:	4313      	orrs	r3, r2
 8000c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c66:	4b79      	ldr	r3, [pc, #484]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	4975      	ldr	r1, [pc, #468]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	604b      	str	r3, [r1, #4]
 8000c7a:	e022      	b.n	8000cc2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c7c:	4b73      	ldr	r3, [pc, #460]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a72      	ldr	r2, [pc, #456]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b70      	ldr	r3, [pc, #448]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	496d      	ldr	r1, [pc, #436]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c96:	4313      	orrs	r3, r2
 8000c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c9a:	4b6c      	ldr	r3, [pc, #432]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	4968      	ldr	r1, [pc, #416]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fd0a 	bl	80016cc <RCC_SetFlashLatencyFromMSIRange>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e357      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000cc2:	f000 fc41 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	4b60      	ldr	r3, [pc, #384]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	091b      	lsrs	r3, r3, #4
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	4a5f      	ldr	r2, [pc, #380]	; (8000e50 <HAL_RCC_OscConfig+0x2a8>)
 8000cd4:	5cd3      	ldrb	r3, [r2, r3]
 8000cd6:	f003 031f 	and.w	r3, r3, #31
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	4a5d      	ldr	r2, [pc, #372]	; (8000e54 <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ce2:	4b5d      	ldr	r3, [pc, #372]	; (8000e58 <HAL_RCC_OscConfig+0x2b0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fc08 	bl	80004fc <HAL_InitTick>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d052      	beq.n	8000d9c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	e33b      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d032      	beq.n	8000d68 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d02:	4b52      	ldr	r3, [pc, #328]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a51      	ldr	r2, [pc, #324]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fc41 	bl	8000594 <HAL_GetTick>
 8000d12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d16:	f7ff fc3d 	bl	8000594 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e324      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d28:	4b48      	ldr	r3, [pc, #288]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f0      	beq.n	8000d16 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d34:	4b45      	ldr	r3, [pc, #276]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a44      	ldr	r2, [pc, #272]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	493f      	ldr	r1, [pc, #252]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d52:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	493a      	ldr	r1, [pc, #232]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	604b      	str	r3, [r1, #4]
 8000d66:	e01a      	b.n	8000d9e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d68:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a37      	ldr	r2, [pc, #220]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d6e:	f023 0301 	bic.w	r3, r3, #1
 8000d72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fc0e 	bl	8000594 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc0a 	bl	8000594 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e2f1      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0x1d4>
 8000d9a:	e000      	b.n	8000d9e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d074      	beq.n	8000e94 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d005      	beq.n	8000dbc <HAL_RCC_OscConfig+0x214>
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2b0c      	cmp	r3, #12
 8000db4:	d10e      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d10b      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d064      	beq.n	8000e92 <HAL_RCC_OscConfig+0x2ea>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d160      	bne.n	8000e92 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e2ce      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ddc:	d106      	bne.n	8000dec <HAL_RCC_OscConfig+0x244>
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e01d      	b.n	8000e28 <HAL_RCC_OscConfig+0x280>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df4:	d10c      	bne.n	8000e10 <HAL_RCC_OscConfig+0x268>
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e00b      	b.n	8000e28 <HAL_RCC_OscConfig+0x280>
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_RCC_OscConfig+0x2a4>)
 8000e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d01c      	beq.n	8000e6a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e30:	f7ff fbb0 	bl	8000594 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e36:	e011      	b.n	8000e5c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fbac 	bl	8000594 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d90a      	bls.n	8000e5c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e293      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	08003558 	.word	0x08003558
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e5c:	4bae      	ldr	r3, [pc, #696]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0e7      	beq.n	8000e38 <HAL_RCC_OscConfig+0x290>
 8000e68:	e014      	b.n	8000e94 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fb93 	bl	8000594 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e72:	f7ff fb8f 	bl	8000594 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b64      	cmp	r3, #100	; 0x64
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e276      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e84:	4ba4      	ldr	r3, [pc, #656]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f0      	bne.n	8000e72 <HAL_RCC_OscConfig+0x2ca>
 8000e90:	e000      	b.n	8000e94 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d060      	beq.n	8000f62 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d005      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x30a>
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	2b0c      	cmp	r3, #12
 8000eaa:	d119      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d116      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eb2:	4b99      	ldr	r3, [pc, #612]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <HAL_RCC_OscConfig+0x322>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e253      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	4b93      	ldr	r3, [pc, #588]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	061b      	lsls	r3, r3, #24
 8000ed8:	498f      	ldr	r1, [pc, #572]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ede:	e040      	b.n	8000f62 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d023      	beq.n	8000f30 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee8:	4b8b      	ldr	r3, [pc, #556]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a8a      	ldr	r2, [pc, #552]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fb4e 	bl	8000594 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efc:	f7ff fb4a 	bl	8000594 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e231      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f0e:	4b82      	ldr	r3, [pc, #520]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1a:	4b7f      	ldr	r3, [pc, #508]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	061b      	lsls	r3, r3, #24
 8000f28:	497b      	ldr	r1, [pc, #492]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
 8000f2e:	e018      	b.n	8000f62 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f30:	4b79      	ldr	r3, [pc, #484]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a78      	ldr	r2, [pc, #480]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb2a 	bl	8000594 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f44:	f7ff fb26 	bl	8000594 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e20d      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f56:	4b70      	ldr	r3, [pc, #448]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f0      	bne.n	8000f44 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d03c      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d01c      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f76:	4b68      	ldr	r3, [pc, #416]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f7c:	4a66      	ldr	r2, [pc, #408]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f86:	f7ff fb05 	bl	8000594 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fb01 	bl	8000594 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e1e8      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fa0:	4b5d      	ldr	r3, [pc, #372]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0ef      	beq.n	8000f8e <HAL_RCC_OscConfig+0x3e6>
 8000fae:	e01b      	b.n	8000fe8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb0:	4b59      	ldr	r3, [pc, #356]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb6:	4a58      	ldr	r2, [pc, #352]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000fb8:	f023 0301 	bic.w	r3, r3, #1
 8000fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fae8 	bl	8000594 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fae4 	bl	8000594 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e1cb      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fda:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1ef      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80a5 	beq.w	8001140 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ffa:	4b47      	ldr	r3, [pc, #284]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10d      	bne.n	8001022 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	4a43      	ldr	r2, [pc, #268]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	6593      	str	r3, [r2, #88]	; 0x58
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800101e:	2301      	movs	r3, #1
 8001020:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001022:	4b3e      	ldr	r3, [pc, #248]	; (800111c <HAL_RCC_OscConfig+0x574>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102a:	2b00      	cmp	r3, #0
 800102c:	d118      	bne.n	8001060 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800102e:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HAL_RCC_OscConfig+0x574>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a3a      	ldr	r2, [pc, #232]	; (800111c <HAL_RCC_OscConfig+0x574>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800103a:	f7ff faab 	bl	8000594 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001042:	f7ff faa7 	bl	8000594 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e18e      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_RCC_OscConfig+0x574>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_RCC_OscConfig+0x4d2>
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 800106a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800106e:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001078:	e024      	b.n	80010c4 <HAL_RCC_OscConfig+0x51c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b05      	cmp	r3, #5
 8001080:	d110      	bne.n	80010a4 <HAL_RCC_OscConfig+0x4fc>
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8001084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 8001094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010a2:	e00f      	b.n	80010c4 <HAL_RCC_OscConfig+0x51c>
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 80010a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010aa:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 80010b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d016      	beq.n	80010fa <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010cc:	f7ff fa62 	bl	8000594 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010d2:	e00a      	b.n	80010ea <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d4:	f7ff fa5e 	bl	8000594 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e143      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_RCC_OscConfig+0x570>)
 80010ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ed      	beq.n	80010d4 <HAL_RCC_OscConfig+0x52c>
 80010f8:	e019      	b.n	800112e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fa:	f7ff fa4b 	bl	8000594 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001100:	e00e      	b.n	8001120 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001102:	f7ff fa47 	bl	8000594 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001110:	4293      	cmp	r3, r2
 8001112:	d905      	bls.n	8001120 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e12c      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
 8001118:	40021000 	.word	0x40021000
 800111c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001120:	4b96      	ldr	r3, [pc, #600]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1e9      	bne.n	8001102 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800112e:	7ffb      	ldrb	r3, [r7, #31]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d105      	bne.n	8001140 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001134:	4b91      	ldr	r3, [pc, #580]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001138:	4a90      	ldr	r2, [pc, #576]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 800113a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800113e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	2b00      	cmp	r3, #0
 800114a:	d03c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01c      	beq.n	800118e <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001154:	4b89      	ldr	r3, [pc, #548]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800115a:	4a88      	ldr	r2, [pc, #544]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001164:	f7ff fa16 	bl	8000594 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800116c:	f7ff fa12 	bl	8000594 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e0f9      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800117e:	4b7f      	ldr	r3, [pc, #508]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0ef      	beq.n	800116c <HAL_RCC_OscConfig+0x5c4>
 800118c:	e01b      	b.n	80011c6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800118e:	4b7b      	ldr	r3, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001194:	4a79      	ldr	r2, [pc, #484]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001196:	f023 0301 	bic.w	r3, r3, #1
 800119a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119e:	f7ff f9f9 	bl	8000594 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011a6:	f7ff f9f5 	bl	8000594 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e0dc      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011b8:	4b70      	ldr	r3, [pc, #448]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 80011ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ef      	bne.n	80011a6 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80d0 	beq.w	8001370 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	f000 808d 	beq.w	80012f2 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d15a      	bne.n	8001296 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e0:	4b66      	ldr	r3, [pc, #408]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a65      	ldr	r2, [pc, #404]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 80011e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff f9d2 	bl	8000594 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f4:	f7ff f9ce 	bl	8000594 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e0b5      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001206:	4b5d      	ldr	r3, [pc, #372]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001212:	4b5a      	ldr	r3, [pc, #360]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	4b5a      	ldr	r3, [pc, #360]	; (8001380 <HAL_RCC_OscConfig+0x7d8>)
 8001218:	4013      	ands	r3, r2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001222:	3a01      	subs	r2, #1
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	4311      	orrs	r1, r2
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800122c:	0212      	lsls	r2, r2, #8
 800122e:	4311      	orrs	r1, r2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001234:	0852      	lsrs	r2, r2, #1
 8001236:	3a01      	subs	r2, #1
 8001238:	0552      	lsls	r2, r2, #21
 800123a:	4311      	orrs	r1, r2
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001240:	0852      	lsrs	r2, r2, #1
 8001242:	3a01      	subs	r2, #1
 8001244:	0652      	lsls	r2, r2, #25
 8001246:	4311      	orrs	r1, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800124c:	06d2      	lsls	r2, r2, #27
 800124e:	430a      	orrs	r2, r1
 8001250:	494a      	ldr	r1, [pc, #296]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001252:	4313      	orrs	r3, r2
 8001254:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a48      	ldr	r2, [pc, #288]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 800125c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001260:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001262:	4b46      	ldr	r3, [pc, #280]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	4a45      	ldr	r2, [pc, #276]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800126c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126e:	f7ff f991 	bl	8000594 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001276:	f7ff f98d 	bl	8000594 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e074      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001288:	4b3c      	ldr	r3, [pc, #240]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x6ce>
 8001294:	e06c      	b.n	8001370 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a38      	ldr	r2, [pc, #224]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 800129c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012a0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80012ae:	4b33      	ldr	r3, [pc, #204]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	4a32      	ldr	r2, [pc, #200]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 80012b4:	f023 0303 	bic.w	r3, r3, #3
 80012b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	4a2f      	ldr	r2, [pc, #188]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 80012c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff f963 	bl	8000594 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff f95f 	bl	8000594 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e046      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x72a>
 80012f0:	e03e      	b.n	8001370 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e039      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <HAL_RCC_OscConfig+0x7d4>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f003 0203 	and.w	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	429a      	cmp	r2, r3
 8001310:	d12c      	bne.n	800136c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	3b01      	subs	r3, #1
 800131e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001320:	429a      	cmp	r2, r3
 8001322:	d123      	bne.n	800136c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001330:	429a      	cmp	r2, r3
 8001332:	d11b      	bne.n	800136c <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001340:	429a      	cmp	r2, r3
 8001342:	d113      	bne.n	800136c <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134e:	085b      	lsrs	r3, r3, #1
 8001350:	3b01      	subs	r3, #1
 8001352:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001354:	429a      	cmp	r2, r3
 8001356:	d109      	bne.n	800136c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	3b01      	subs	r3, #1
 8001366:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3720      	adds	r7, #32
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	019d808c 	.word	0x019d808c

08001384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0c8      	b.n	800152a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001398:	4b66      	ldr	r3, [pc, #408]	; (8001534 <HAL_RCC_ClockConfig+0x1b0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d910      	bls.n	80013c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <HAL_RCC_ClockConfig+0x1b0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 0207 	bic.w	r2, r3, #7
 80013ae:	4961      	ldr	r1, [pc, #388]	; (8001534 <HAL_RCC_ClockConfig+0x1b0>)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <HAL_RCC_ClockConfig+0x1b0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d001      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0b0      	b.n	800152a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d04c      	beq.n	800146e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d107      	bne.n	80013ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013dc:	4b56      	ldr	r3, [pc, #344]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d121      	bne.n	800142c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e09e      	b.n	800152a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d107      	bne.n	8001404 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d115      	bne.n	800142c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e092      	b.n	800152a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800140c:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d109      	bne.n	800142c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e086      	b.n	800152a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141c:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e07e      	b.n	800152a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800142c:	4b42      	ldr	r3, [pc, #264]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 0203 	bic.w	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	493f      	ldr	r1, [pc, #252]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 800143a:	4313      	orrs	r3, r2
 800143c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800143e:	f7ff f8a9 	bl	8000594 <HAL_GetTick>
 8001442:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001444:	e00a      	b.n	800145c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001446:	f7ff f8a5 	bl	8000594 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e066      	b.n	800152a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 020c 	and.w	r2, r3, #12
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	429a      	cmp	r2, r3
 800146c:	d1eb      	bne.n	8001446 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147a:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	492c      	ldr	r1, [pc, #176]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 8001488:	4313      	orrs	r3, r2
 800148a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <HAL_RCC_ClockConfig+0x1b0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d210      	bcs.n	80014bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <HAL_RCC_ClockConfig+0x1b0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 0207 	bic.w	r2, r3, #7
 80014a2:	4924      	ldr	r1, [pc, #144]	; (8001534 <HAL_RCC_ClockConfig+0x1b0>)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_RCC_ClockConfig+0x1b0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e036      	b.n	800152a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4918      	ldr	r1, [pc, #96]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d009      	beq.n	80014fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4910      	ldr	r1, [pc, #64]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014fa:	f000 f825 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 80014fe:	4601      	mov	r1, r0
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_RCC_ClockConfig+0x1b4>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <HAL_RCC_ClockConfig+0x1b8>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	fa21 f303 	lsr.w	r3, r1, r3
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ffec 	bl	80004fc <HAL_InitTick>
 8001524:	4603      	mov	r3, r0
 8001526:	72fb      	strb	r3, [r7, #11]

  return status;
 8001528:	7afb      	ldrb	r3, [r7, #11]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000
 8001538:	40021000 	.word	0x40021000
 800153c:	08003558 	.word	0x08003558
 8001540:	20000008 	.word	0x20000008
 8001544:	20000000 	.word	0x20000000

08001548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_RCC_GetSysClockFreq+0x104>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001560:	4b3a      	ldr	r3, [pc, #232]	; (800164c <HAL_RCC_GetSysClockFreq+0x104>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_GetSysClockFreq+0x34>
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	2b0c      	cmp	r3, #12
 8001574:	d121      	bne.n	80015ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d11e      	bne.n	80015ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_RCC_GetSysClockFreq+0x104>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d107      	bne.n	8001598 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_RCC_GetSysClockFreq+0x104>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	e005      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <HAL_RCC_GetSysClockFreq+0x104>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015a4:	4a2a      	ldr	r2, [pc, #168]	; (8001650 <HAL_RCC_GetSysClockFreq+0x108>)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10d      	bne.n	80015d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d102      	bne.n	80015c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	e004      	b.n	80015d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_RCC_GetSysClockFreq+0x110>)
 80015ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d133      	bne.n	800163e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_RCC_GetSysClockFreq+0x104>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0xa4>
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d003      	beq.n	80015f2 <HAL_RCC_GetSysClockFreq+0xaa>
 80015ea:	e005      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015ee:	617b      	str	r3, [r7, #20]
      break;
 80015f0:	e005      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_RCC_GetSysClockFreq+0x110>)
 80015f4:	617b      	str	r3, [r7, #20]
      break;
 80015f6:	e002      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	617b      	str	r3, [r7, #20]
      break;
 80015fc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_RCC_GetSysClockFreq+0x104>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	3301      	adds	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_RCC_GetSysClockFreq+0x104>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	fb02 f203 	mul.w	r2, r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_GetSysClockFreq+0x104>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	0e5b      	lsrs	r3, r3, #25
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	3301      	adds	r3, #1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	fbb2 f3f3 	udiv	r3, r2, r3
 800163c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800163e:	69bb      	ldr	r3, [r7, #24]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3724      	adds	r7, #36	; 0x24
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	08003570 	.word	0x08003570
 8001654:	00f42400 	.word	0x00f42400
 8001658:	007a1200 	.word	0x007a1200

0800165c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_RCC_GetHCLKFreq+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008

08001674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001678:	f7ff fff0 	bl	800165c <HAL_RCC_GetHCLKFreq>
 800167c:	4601      	mov	r1, r0
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_RCC_GetPCLK1Freq+0x28>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	08003568 	.word	0x08003568

080016a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80016a4:	f7ff ffda 	bl	800165c <HAL_RCC_GetHCLKFreq>
 80016a8:	4601      	mov	r1, r0
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	0adb      	lsrs	r3, r3, #11
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40021000 	.word	0x40021000
 80016c8:	08003568 	.word	0x08003568

080016cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016e4:	f7ff f9fc 	bl	8000ae0 <HAL_PWREx_GetVoltageRange>
 80016e8:	6178      	str	r0, [r7, #20]
 80016ea:	e014      	b.n	8001716 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	4a24      	ldr	r2, [pc, #144]	; (8001784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6593      	str	r3, [r2, #88]	; 0x58
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001704:	f7ff f9ec 	bl	8000ae0 <HAL_PWREx_GetVoltageRange>
 8001708:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001714:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800171c:	d10b      	bne.n	8001736 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b80      	cmp	r3, #128	; 0x80
 8001722:	d919      	bls.n	8001758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2ba0      	cmp	r3, #160	; 0xa0
 8001728:	d902      	bls.n	8001730 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800172a:	2302      	movs	r3, #2
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	e013      	b.n	8001758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001730:	2301      	movs	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	e010      	b.n	8001758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b80      	cmp	r3, #128	; 0x80
 800173a:	d902      	bls.n	8001742 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800173c:	2303      	movs	r3, #3
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	e00a      	b.n	8001758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b80      	cmp	r3, #128	; 0x80
 8001746:	d102      	bne.n	800174e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	e004      	b.n	8001758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b70      	cmp	r3, #112	; 0x70
 8001752:	d101      	bne.n	8001758 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001754:	2301      	movs	r3, #1
 8001756:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 0207 	bic.w	r2, r3, #7
 8001760:	4909      	ldr	r1, [pc, #36]	; (8001788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	40022000 	.word	0x40022000

0800178c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001794:	2300      	movs	r3, #0
 8001796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001798:	2300      	movs	r3, #0
 800179a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d02f      	beq.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017b0:	d005      	beq.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x32>
 80017b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80017b6:	d015      	beq.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80017bc:	e00f      	b.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80017be:	4bac      	ldr	r3, [pc, #688]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	4aab      	ldr	r2, [pc, #684]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017ca:	e00c      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3304      	adds	r3, #4
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f9dc 	bl	8001b90 <RCCEx_PLLSAI1_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80017dc:	e003      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	74fb      	strb	r3, [r7, #19]
      break;
 80017e2:	e000      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80017e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80017e6:	7cfb      	ldrb	r3, [r7, #19]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80017ec:	4ba0      	ldr	r3, [pc, #640]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	499d      	ldr	r1, [pc, #628]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001802:	e001      	b.n	8001808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001804:	7cfb      	ldrb	r3, [r7, #19]
 8001806:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8099 	beq.w	8001948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800181a:	4b95      	ldr	r3, [pc, #596]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800182a:	2300      	movs	r3, #0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00d      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	4a8e      	ldr	r2, [pc, #568]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183a:	6593      	str	r3, [r2, #88]	; 0x58
 800183c:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001848:	2301      	movs	r3, #1
 800184a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800184c:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a88      	ldr	r2, [pc, #544]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001858:	f7fe fe9c 	bl	8000594 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800185e:	e009      	b.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001860:	f7fe fe98 	bl	8000594 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d902      	bls.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	74fb      	strb	r3, [r7, #19]
        break;
 8001872:	e005      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001874:	4b7f      	ldr	r3, [pc, #508]	; (8001a74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0ef      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8001880:	7cfb      	ldrb	r3, [r7, #19]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d155      	bne.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001886:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001890:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d01e      	beq.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d019      	beq.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018ae:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b4:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018be:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c4:	4a6a      	ldr	r2, [pc, #424]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80018ce:	4a68      	ldr	r2, [pc, #416]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d016      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7fe fe58 	bl	8000594 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e6:	e00b      	b.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e8:	f7fe fe54 	bl	8000594 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d902      	bls.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	74fb      	strb	r3, [r7, #19]
            break;
 80018fe:	e006      	b.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001900:	4b5b      	ldr	r3, [pc, #364]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ec      	beq.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800190e:	7cfb      	ldrb	r3, [r7, #19]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10b      	bne.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001914:	4b56      	ldr	r3, [pc, #344]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001922:	4953      	ldr	r1, [pc, #332]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001924:	4313      	orrs	r3, r2
 8001926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800192a:	e004      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800192c:	7cfb      	ldrb	r3, [r7, #19]
 800192e:	74bb      	strb	r3, [r7, #18]
 8001930:	e001      	b.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001932:	7cfb      	ldrb	r3, [r7, #19]
 8001934:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001936:	7c7b      	ldrb	r3, [r7, #17]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d105      	bne.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800193c:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	4a4b      	ldr	r2, [pc, #300]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001946:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001954:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4943      	ldr	r1, [pc, #268]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001976:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197c:	f023 020c 	bic.w	r2, r3, #12
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	493a      	ldr	r1, [pc, #232]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001986:	4313      	orrs	r3, r2
 8001988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0320 	and.w	r3, r3, #32
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	4932      	ldr	r1, [pc, #200]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c8:	4929      	ldr	r1, [pc, #164]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00a      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ea:	4921      	ldr	r1, [pc, #132]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00a      	beq.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4910      	ldr	r1, [pc, #64]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d02c      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a60:	d10a      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001a62:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	4a02      	ldr	r2, [pc, #8]	; (8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a6c:	60d3      	str	r3, [r2, #12]
 8001a6e:	e015      	b.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3304      	adds	r3, #4
 8001a86:	2101      	movs	r1, #1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f881 	bl	8001b90 <RCCEx_PLLSAI1_Config>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001a92:	7cfb      	ldrb	r3, [r7, #19]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8001a98:	7cfb      	ldrb	r3, [r7, #19]
 8001a9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d028      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001aa8:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	492d      	ldr	r1, [pc, #180]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ad2:	60d3      	str	r3, [r2, #12]
 8001ad4:	e011      	b.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ade:	d10c      	bne.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f852 	bl	8001b90 <RCCEx_PLLSAI1_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001af0:	7cfb      	ldrb	r3, [r7, #19]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8001af6:	7cfb      	ldrb	r3, [r7, #19]
 8001af8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01c      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b14:	4915      	ldr	r1, [pc, #84]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f82f 	bl	8001b90 <RCCEx_PLLSAI1_Config>
 8001b32:	4603      	mov	r3, r0
 8001b34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001b36:	7cfb      	ldrb	r3, [r7, #19]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8001b3c:	7cfb      	ldrb	r3, [r7, #19]
 8001b3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4904      	ldr	r1, [pc, #16]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001b62:	7cbb      	ldrb	r3, [r7, #18]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000

08001b90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b9e:	4b73      	ldr	r3, [pc, #460]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d018      	beq.n	8001bdc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001baa:	4b70      	ldr	r3, [pc, #448]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0203 	and.w	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d10d      	bne.n	8001bd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
       ||
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001bc2:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
       ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d044      	beq.n	8001c60 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
 8001bda:	e041      	b.n	8001c60 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d00c      	beq.n	8001bfe <RCCEx_PLLSAI1_Config+0x6e>
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d013      	beq.n	8001c10 <RCCEx_PLLSAI1_Config+0x80>
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d120      	bne.n	8001c2e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001bec:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11d      	bne.n	8001c34 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfc:	e01a      	b.n	8001c34 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d116      	bne.n	8001c38 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c0e:	e013      	b.n	8001c38 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001c10:	4b56      	ldr	r3, [pc, #344]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10f      	bne.n	8001c3c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001c2c:	e006      	b.n	8001c3c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
      break;
 8001c32:	e004      	b.n	8001c3e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001c34:	bf00      	nop
 8001c36:	e002      	b.n	8001c3e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001c38:	bf00      	nop
 8001c3a:	e000      	b.n	8001c3e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001c3c:	bf00      	nop
    }

    if(status == HAL_OK)
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10d      	bne.n	8001c60 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001c44:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6819      	ldr	r1, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	4944      	ldr	r1, [pc, #272]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d17c      	bne.n	8001d60 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a40      	ldr	r2, [pc, #256]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c72:	f7fe fc8f 	bl	8000594 <HAL_GetTick>
 8001c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001c78:	e009      	b.n	8001c8e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001c7a:	f7fe fc8b 	bl	8000594 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d902      	bls.n	8001c8e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	73fb      	strb	r3, [r7, #15]
        break;
 8001c8c:	e005      	b.n	8001c9a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1ef      	bne.n	8001c7a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d15f      	bne.n	8001d60 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d110      	bne.n	8001cc8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001cae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6892      	ldr	r2, [r2, #8]
 8001cb6:	0211      	lsls	r1, r2, #8
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68d2      	ldr	r2, [r2, #12]
 8001cbc:	06d2      	lsls	r2, r2, #27
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	492a      	ldr	r1, [pc, #168]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	610b      	str	r3, [r1, #16]
 8001cc6:	e027      	b.n	8001d18 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d112      	bne.n	8001cf4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001cd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6892      	ldr	r2, [r2, #8]
 8001cde:	0211      	lsls	r1, r2, #8
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6912      	ldr	r2, [r2, #16]
 8001ce4:	0852      	lsrs	r2, r2, #1
 8001ce6:	3a01      	subs	r2, #1
 8001ce8:	0552      	lsls	r2, r2, #21
 8001cea:	430a      	orrs	r2, r1
 8001cec:	491f      	ldr	r1, [pc, #124]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	610b      	str	r3, [r1, #16]
 8001cf2:	e011      	b.n	8001d18 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001cfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6892      	ldr	r2, [r2, #8]
 8001d04:	0211      	lsls	r1, r2, #8
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6952      	ldr	r2, [r2, #20]
 8001d0a:	0852      	lsrs	r2, r2, #1
 8001d0c:	3a01      	subs	r2, #1
 8001d0e:	0652      	lsls	r2, r2, #25
 8001d10:	430a      	orrs	r2, r1
 8001d12:	4916      	ldr	r1, [pc, #88]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7fe fc36 	bl	8000594 <HAL_GetTick>
 8001d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d2a:	e009      	b.n	8001d40 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d2c:	f7fe fc32 	bl	8000594 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d902      	bls.n	8001d40 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8001d3e:	e005      	b.n	8001d4c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ef      	beq.n	8001d2c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4904      	ldr	r1, [pc, #16]	; (8001d6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000

08001d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e07c      	b.n	8001e7c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f001 fa73 	bl	8003288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dc2:	d902      	bls.n	8001dca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e002      	b.n	8001dd0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001dd8:	d007      	beq.n	8001dea <HAL_SPI_Init+0x7a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001de2:	d002      	beq.n	8001dea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10b      	bne.n	8001e0a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dfa:	d903      	bls.n	8001e04 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
 8001e02:	e002      	b.n	8001e0a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	ea42 0103 	orr.w	r1, r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	0c1b      	lsrs	r3, r3, #16
 8001e4a:	f003 0204 	and.w	r2, r3, #4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	ea42 0103 	orr.w	r1, r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_SPI_Transmit+0x22>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e150      	b.n	8002148 <HAL_SPI_Transmit+0x2c4>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eae:	f7fe fb71 	bl	8000594 <HAL_GetTick>
 8001eb2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d002      	beq.n	8001eca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ec8:	e135      	b.n	8002136 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_SPI_Transmit+0x52>
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eda:	e12c      	b.n	8002136 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	88fa      	ldrh	r2, [r7, #6]
 8001ef4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	88fa      	ldrh	r2, [r7, #6]
 8001efa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f26:	d107      	bne.n	8001f38 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d007      	beq.n	8001f56 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f5e:	d94b      	bls.n	8001ff8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_SPI_Transmit+0xea>
 8001f68:	8afb      	ldrh	r3, [r7, #22]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d13e      	bne.n	8001fec <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	1c9a      	adds	r2, r3, #2
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f92:	e02b      	b.n	8001fec <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d112      	bne.n	8001fc8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	881a      	ldrh	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	1c9a      	adds	r2, r3, #2
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fc6:	e011      	b.n	8001fec <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fc8:	f7fe fae4 	bl	8000594 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d803      	bhi.n	8001fe0 <HAL_SPI_Transmit+0x15c>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fde:	d102      	bne.n	8001fe6 <HAL_SPI_Transmit+0x162>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fea:	e0a4      	b.n	8002136 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ce      	bne.n	8001f94 <HAL_SPI_Transmit+0x110>
 8001ff6:	e07c      	b.n	80020f2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <HAL_SPI_Transmit+0x182>
 8002000:	8afb      	ldrh	r3, [r7, #22]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d170      	bne.n	80020e8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d912      	bls.n	8002036 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	881a      	ldrh	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	1c9a      	adds	r2, r3, #2
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b02      	subs	r3, #2
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002034:	e058      	b.n	80020e8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	330c      	adds	r3, #12
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800205c:	e044      	b.n	80020e8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d12b      	bne.n	80020c4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d912      	bls.n	800209c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	1c9a      	adds	r2, r3, #2
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b02      	subs	r3, #2
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	87da      	strh	r2, [r3, #62]	; 0x3e
 800209a:	e025      	b.n	80020e8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	330c      	adds	r3, #12
 80020a6:	7812      	ldrb	r2, [r2, #0]
 80020a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020c2:	e011      	b.n	80020e8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020c4:	f7fe fa66 	bl	8000594 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d803      	bhi.n	80020dc <HAL_SPI_Transmit+0x258>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020da:	d102      	bne.n	80020e2 <HAL_SPI_Transmit+0x25e>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020e6:	e026      	b.n	8002136 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1b5      	bne.n	800205e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	6839      	ldr	r1, [r7, #0]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f901 	bl	80022fe <SPI_EndRxTxTransaction>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	77fb      	strb	r3, [r7, #31]
 8002132:	e000      	b.n	8002136 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002134:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002146:	7ffb      	ldrb	r3, [r7, #31]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002160:	e04c      	b.n	80021fc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002168:	d048      	beq.n	80021fc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800216a:	f7fe fa13 	bl	8000594 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d902      	bls.n	8002180 <SPI_WaitFlagStateUntilTimeout+0x30>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d13d      	bne.n	80021fc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800218e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002198:	d111      	bne.n	80021be <SPI_WaitFlagStateUntilTimeout+0x6e>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a2:	d004      	beq.n	80021ae <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ac:	d107      	bne.n	80021be <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c6:	d10f      	bne.n	80021e8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e00f      	b.n	800221c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4013      	ands	r3, r2
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	429a      	cmp	r2, r3
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	429a      	cmp	r2, r3
 8002218:	d1a3      	bne.n	8002162 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002232:	e057      	b.n	80022e4 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800223a:	d106      	bne.n	800224a <SPI_WaitFifoStateUntilTimeout+0x26>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d103      	bne.n	800224a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002250:	d048      	beq.n	80022e4 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002252:	f7fe f99f 	bl	8000594 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d902      	bls.n	8002268 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d13d      	bne.n	80022e4 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002276:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002280:	d111      	bne.n	80022a6 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228a:	d004      	beq.n	8002296 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002294:	d107      	bne.n	80022a6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ae:	d10f      	bne.n	80022d0 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e008      	b.n	80022f6 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d19f      	bne.n	8002234 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af02      	add	r7, sp, #8
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f7ff ff84 	bl	8002224 <SPI_WaitFifoStateUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e027      	b.n	8002382 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2200      	movs	r2, #0
 800233a:	2180      	movs	r1, #128	; 0x80
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f7ff ff07 	bl	8002150 <SPI_WaitFlagStateUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234c:	f043 0220 	orr.w	r2, r3, #32
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e014      	b.n	8002382 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7ff ff5d 	bl	8002224 <SPI_WaitFifoStateUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e000      	b.n	8002382 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e040      	b.n	800241e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 ffad 	bl	800330c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2224      	movs	r2, #36	; 0x24
 80023b6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f82d 	bl	8002428 <UART_SetConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e022      	b.n	800241e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 faeb 	bl	80029bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002404:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fb72 	bl	8002b00 <UART_CheckIdleState>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002428:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800242c:	b088      	sub	sp, #32
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4313      	orrs	r3, r2
 8002454:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4bbc      	ldr	r3, [pc, #752]	; (8002750 <UART_SetConfig+0x328>)
 800245e:	4013      	ands	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	69f9      	ldr	r1, [r7, #28]
 8002466:	430b      	orrs	r3, r1
 8002468:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4ab2      	ldr	r2, [pc, #712]	; (8002754 <UART_SetConfig+0x32c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	4313      	orrs	r3, r2
 8002498:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4aa9      	ldr	r2, [pc, #676]	; (8002758 <UART_SetConfig+0x330>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d121      	bne.n	80024fc <UART_SetConfig+0xd4>
 80024b8:	4ba8      	ldr	r3, [pc, #672]	; (800275c <UART_SetConfig+0x334>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d816      	bhi.n	80024f4 <UART_SetConfig+0xcc>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <UART_SetConfig+0xa4>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	080024e9 	.word	0x080024e9
 80024d4:	080024e3 	.word	0x080024e3
 80024d8:	080024ef 	.word	0x080024ef
 80024dc:	2301      	movs	r3, #1
 80024de:	76fb      	strb	r3, [r7, #27]
 80024e0:	e072      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80024e2:	2302      	movs	r3, #2
 80024e4:	76fb      	strb	r3, [r7, #27]
 80024e6:	e06f      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80024e8:	2304      	movs	r3, #4
 80024ea:	76fb      	strb	r3, [r7, #27]
 80024ec:	e06c      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80024ee:	2308      	movs	r3, #8
 80024f0:	76fb      	strb	r3, [r7, #27]
 80024f2:	e069      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80024f4:	2310      	movs	r3, #16
 80024f6:	76fb      	strb	r3, [r7, #27]
 80024f8:	bf00      	nop
 80024fa:	e065      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a97      	ldr	r2, [pc, #604]	; (8002760 <UART_SetConfig+0x338>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d134      	bne.n	8002570 <UART_SetConfig+0x148>
 8002506:	4b95      	ldr	r3, [pc, #596]	; (800275c <UART_SetConfig+0x334>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d829      	bhi.n	8002568 <UART_SetConfig+0x140>
 8002514:	a201      	add	r2, pc, #4	; (adr r2, 800251c <UART_SetConfig+0xf4>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	08002551 	.word	0x08002551
 8002520:	08002569 	.word	0x08002569
 8002524:	08002569 	.word	0x08002569
 8002528:	08002569 	.word	0x08002569
 800252c:	0800255d 	.word	0x0800255d
 8002530:	08002569 	.word	0x08002569
 8002534:	08002569 	.word	0x08002569
 8002538:	08002569 	.word	0x08002569
 800253c:	08002557 	.word	0x08002557
 8002540:	08002569 	.word	0x08002569
 8002544:	08002569 	.word	0x08002569
 8002548:	08002569 	.word	0x08002569
 800254c:	08002563 	.word	0x08002563
 8002550:	2300      	movs	r3, #0
 8002552:	76fb      	strb	r3, [r7, #27]
 8002554:	e038      	b.n	80025c8 <UART_SetConfig+0x1a0>
 8002556:	2302      	movs	r3, #2
 8002558:	76fb      	strb	r3, [r7, #27]
 800255a:	e035      	b.n	80025c8 <UART_SetConfig+0x1a0>
 800255c:	2304      	movs	r3, #4
 800255e:	76fb      	strb	r3, [r7, #27]
 8002560:	e032      	b.n	80025c8 <UART_SetConfig+0x1a0>
 8002562:	2308      	movs	r3, #8
 8002564:	76fb      	strb	r3, [r7, #27]
 8002566:	e02f      	b.n	80025c8 <UART_SetConfig+0x1a0>
 8002568:	2310      	movs	r3, #16
 800256a:	76fb      	strb	r3, [r7, #27]
 800256c:	bf00      	nop
 800256e:	e02b      	b.n	80025c8 <UART_SetConfig+0x1a0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a77      	ldr	r2, [pc, #476]	; (8002754 <UART_SetConfig+0x32c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d124      	bne.n	80025c4 <UART_SetConfig+0x19c>
 800257a:	4b78      	ldr	r3, [pc, #480]	; (800275c <UART_SetConfig+0x334>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002588:	d012      	beq.n	80025b0 <UART_SetConfig+0x188>
 800258a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258e:	d802      	bhi.n	8002596 <UART_SetConfig+0x16e>
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <UART_SetConfig+0x17c>
 8002594:	e012      	b.n	80025bc <UART_SetConfig+0x194>
 8002596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259a:	d006      	beq.n	80025aa <UART_SetConfig+0x182>
 800259c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025a0:	d009      	beq.n	80025b6 <UART_SetConfig+0x18e>
 80025a2:	e00b      	b.n	80025bc <UART_SetConfig+0x194>
 80025a4:	2300      	movs	r3, #0
 80025a6:	76fb      	strb	r3, [r7, #27]
 80025a8:	e00e      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80025aa:	2302      	movs	r3, #2
 80025ac:	76fb      	strb	r3, [r7, #27]
 80025ae:	e00b      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80025b0:	2304      	movs	r3, #4
 80025b2:	76fb      	strb	r3, [r7, #27]
 80025b4:	e008      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80025b6:	2308      	movs	r3, #8
 80025b8:	76fb      	strb	r3, [r7, #27]
 80025ba:	e005      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80025bc:	2310      	movs	r3, #16
 80025be:	76fb      	strb	r3, [r7, #27]
 80025c0:	bf00      	nop
 80025c2:	e001      	b.n	80025c8 <UART_SetConfig+0x1a0>
 80025c4:	2310      	movs	r3, #16
 80025c6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a61      	ldr	r2, [pc, #388]	; (8002754 <UART_SetConfig+0x32c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	f040 80f4 	bne.w	80027bc <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025d4:	7efb      	ldrb	r3, [r7, #27]
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d823      	bhi.n	8002622 <UART_SetConfig+0x1fa>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <UART_SetConfig+0x1b8>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	08002605 	.word	0x08002605
 80025e4:	08002623 	.word	0x08002623
 80025e8:	0800260d 	.word	0x0800260d
 80025ec:	08002623 	.word	0x08002623
 80025f0:	08002613 	.word	0x08002613
 80025f4:	08002623 	.word	0x08002623
 80025f8:	08002623 	.word	0x08002623
 80025fc:	08002623 	.word	0x08002623
 8002600:	0800261b 	.word	0x0800261b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002604:	f7ff f836 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8002608:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800260a:	e00d      	b.n	8002628 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <UART_SetConfig+0x33c>)
 800260e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002610:	e00a      	b.n	8002628 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002612:	f7fe ff99 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8002616:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002618:	e006      	b.n	8002628 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800261a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002620:	e002      	b.n	8002628 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	74fb      	strb	r3, [r7, #19]
        break;
 8002626:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 81b9 	beq.w	80029a2 <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d305      	bcc.n	800264c <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d902      	bls.n	8002652 <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	74fb      	strb	r3, [r7, #19]
 8002650:	e1a7      	b.n	80029a2 <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 8002652:	7efb      	ldrb	r3, [r7, #27]
 8002654:	2b08      	cmp	r3, #8
 8002656:	f200 809e 	bhi.w	8002796 <UART_SetConfig+0x36e>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <UART_SetConfig+0x238>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	08002685 	.word	0x08002685
 8002664:	08002797 	.word	0x08002797
 8002668:	080026d1 	.word	0x080026d1
 800266c:	08002797 	.word	0x08002797
 8002670:	08002705 	.word	0x08002705
 8002674:	08002797 	.word	0x08002797
 8002678:	08002797 	.word	0x08002797
 800267c:	08002797 	.word	0x08002797
 8002680:	0800276d 	.word	0x0800276d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002684:	f7fe fff6 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8002688:	4603      	mov	r3, r0
 800268a:	4619      	mov	r1, r3
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	f04f 0400 	mov.w	r4, #0
 8002698:	0214      	lsls	r4, r2, #8
 800269a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800269e:	020b      	lsls	r3, r1, #8
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6852      	ldr	r2, [r2, #4]
 80026a4:	0852      	lsrs	r2, r2, #1
 80026a6:	4611      	mov	r1, r2
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	eb13 0b01 	adds.w	fp, r3, r1
 80026b0:	eb44 0c02 	adc.w	ip, r4, r2
 80026b4:	4658      	mov	r0, fp
 80026b6:	4661      	mov	r1, ip
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f04f 0400 	mov.w	r4, #0
 80026c0:	461a      	mov	r2, r3
 80026c2:	4623      	mov	r3, r4
 80026c4:	f7fd fd82 	bl	80001cc <__aeabi_uldivmod>
 80026c8:	4603      	mov	r3, r0
 80026ca:	460c      	mov	r4, r1
 80026cc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80026ce:	e065      	b.n	800279c <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	f04f 0400 	mov.w	r4, #0
 80026da:	4923      	ldr	r1, [pc, #140]	; (8002768 <UART_SetConfig+0x340>)
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	eb13 0b01 	adds.w	fp, r3, r1
 80026e4:	eb44 0c02 	adc.w	ip, r4, r2
 80026e8:	4658      	mov	r0, fp
 80026ea:	4661      	mov	r1, ip
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f04f 0400 	mov.w	r4, #0
 80026f4:	461a      	mov	r2, r3
 80026f6:	4623      	mov	r3, r4
 80026f8:	f7fd fd68 	bl	80001cc <__aeabi_uldivmod>
 80026fc:	4603      	mov	r3, r0
 80026fe:	460c      	mov	r4, r1
 8002700:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002702:	e04b      	b.n	800279c <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002704:	f7fe ff20 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	f04f 0400 	mov.w	r4, #0
 8002718:	0214      	lsls	r4, r2, #8
 800271a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800271e:	020b      	lsls	r3, r1, #8
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6852      	ldr	r2, [r2, #4]
 8002724:	0852      	lsrs	r2, r2, #1
 8002726:	4611      	mov	r1, r2
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	eb13 0b01 	adds.w	fp, r3, r1
 8002730:	eb44 0c02 	adc.w	ip, r4, r2
 8002734:	4658      	mov	r0, fp
 8002736:	4661      	mov	r1, ip
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f04f 0400 	mov.w	r4, #0
 8002740:	461a      	mov	r2, r3
 8002742:	4623      	mov	r3, r4
 8002744:	f7fd fd42 	bl	80001cc <__aeabi_uldivmod>
 8002748:	4603      	mov	r3, r0
 800274a:	460c      	mov	r4, r1
 800274c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800274e:	e025      	b.n	800279c <UART_SetConfig+0x374>
 8002750:	efff69f3 	.word	0xefff69f3
 8002754:	40008000 	.word	0x40008000
 8002758:	40013800 	.word	0x40013800
 800275c:	40021000 	.word	0x40021000
 8002760:	40004400 	.word	0x40004400
 8002764:	00f42400 	.word	0x00f42400
 8002768:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	f04f 0400 	mov.w	r4, #0
 8002776:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800277a:	f144 0100 	adc.w	r1, r4, #0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f04f 0400 	mov.w	r4, #0
 8002786:	461a      	mov	r2, r3
 8002788:	4623      	mov	r3, r4
 800278a:	f7fd fd1f 	bl	80001cc <__aeabi_uldivmod>
 800278e:	4603      	mov	r3, r0
 8002790:	460c      	mov	r4, r1
 8002792:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002794:	e002      	b.n	800279c <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	74fb      	strb	r3, [r7, #19]
            break;
 800279a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027a2:	d308      	bcc.n	80027b6 <UART_SetConfig+0x38e>
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027aa:	d204      	bcs.n	80027b6 <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	e0f5      	b.n	80029a2 <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	74fb      	strb	r3, [r7, #19]
 80027ba:	e0f2      	b.n	80029a2 <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c4:	d17f      	bne.n	80028c6 <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 80027c6:	7efb      	ldrb	r3, [r7, #27]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d85c      	bhi.n	8002886 <UART_SetConfig+0x45e>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <UART_SetConfig+0x3ac>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	080027f9 	.word	0x080027f9
 80027d8:	08002817 	.word	0x08002817
 80027dc:	08002835 	.word	0x08002835
 80027e0:	08002887 	.word	0x08002887
 80027e4:	08002851 	.word	0x08002851
 80027e8:	08002887 	.word	0x08002887
 80027ec:	08002887 	.word	0x08002887
 80027f0:	08002887 	.word	0x08002887
 80027f4:	0800286f 	.word	0x0800286f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027f8:	f7fe ff3c 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 80027fc:	4603      	mov	r3, r0
 80027fe:	005a      	lsls	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	441a      	add	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	b29b      	uxth	r3, r3
 8002812:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002814:	e03a      	b.n	800288c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002816:	f7fe ff43 	bl	80016a0 <HAL_RCC_GetPCLK2Freq>
 800281a:	4603      	mov	r3, r0
 800281c:	005a      	lsls	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	441a      	add	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	b29b      	uxth	r3, r3
 8002830:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002832:	e02b      	b.n	800288c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800283e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6852      	ldr	r2, [r2, #4]
 8002846:	fbb3 f3f2 	udiv	r3, r3, r2
 800284a:	b29b      	uxth	r3, r3
 800284c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800284e:	e01d      	b.n	800288c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002850:	f7fe fe7a 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8002854:	4603      	mov	r3, r0
 8002856:	005a      	lsls	r2, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	441a      	add	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	b29b      	uxth	r3, r3
 800286a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800286c:	e00e      	b.n	800288c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	b29b      	uxth	r3, r3
 8002882:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002884:	e002      	b.n	800288c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	74fb      	strb	r3, [r7, #19]
        break;
 800288a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	d916      	bls.n	80028c0 <UART_SetConfig+0x498>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002898:	d212      	bcs.n	80028c0 <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	b29b      	uxth	r3, r3
 800289e:	f023 030f 	bic.w	r3, r3, #15
 80028a2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	897a      	ldrh	r2, [r7, #10]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	e070      	b.n	80029a2 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	74fb      	strb	r3, [r7, #19]
 80028c4:	e06d      	b.n	80029a2 <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 80028c6:	7efb      	ldrb	r3, [r7, #27]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d859      	bhi.n	8002980 <UART_SetConfig+0x558>
 80028cc:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <UART_SetConfig+0x4ac>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028f9 	.word	0x080028f9
 80028d8:	08002915 	.word	0x08002915
 80028dc:	08002931 	.word	0x08002931
 80028e0:	08002981 	.word	0x08002981
 80028e4:	0800294d 	.word	0x0800294d
 80028e8:	08002981 	.word	0x08002981
 80028ec:	08002981 	.word	0x08002981
 80028f0:	08002981 	.word	0x08002981
 80028f4:	08002969 	.word	0x08002969
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80028f8:	f7fe febc 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	441a      	add	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	b29b      	uxth	r3, r3
 8002910:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002912:	e038      	b.n	8002986 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002914:	f7fe fec4 	bl	80016a0 <HAL_RCC_GetPCLK2Freq>
 8002918:	4602      	mov	r2, r0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	441a      	add	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	b29b      	uxth	r3, r3
 800292c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800292e:	e02a      	b.n	8002986 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800293a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6852      	ldr	r2, [r2, #4]
 8002942:	fbb3 f3f2 	udiv	r3, r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800294a:	e01c      	b.n	8002986 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800294c:	f7fe fdfc 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	441a      	add	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002966:	e00e      	b.n	8002986 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	085b      	lsrs	r3, r3, #1
 800296e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	b29b      	uxth	r3, r3
 800297c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800297e:	e002      	b.n	8002986 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	74fb      	strb	r3, [r7, #19]
        break;
 8002984:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b0f      	cmp	r3, #15
 800298a:	d908      	bls.n	800299e <UART_SetConfig+0x576>
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d204      	bcs.n	800299e <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	e001      	b.n	80029a2 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80029ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80029ba:	bf00      	nop

080029bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01a      	beq.n	8002ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aba:	d10a      	bne.n	8002ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
  }
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b0e:	f7fd fd41 	bl	8000594 <HAL_GetTick>
 8002b12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d10e      	bne.n	8002b40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f82a 	bl	8002b8a <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e020      	b.n	8002b82 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d10e      	bne.n	8002b6c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f814 	bl	8002b8a <UART_WaitOnFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e00a      	b.n	8002b82 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9a:	e02a      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba2:	d026      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba4:	f7fd fcf6 	bl	8000594 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d302      	bcc.n	8002bba <UART_WaitOnFlagUntilTimeout+0x30>
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11b      	bne.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bc8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e00f      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d0c5      	beq.n	8002b9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <nP_create>:
 * Initialise a neopixel struct representing a NeoPixel device
 * Arguments :
 * 		ret : pointer to the struct we want to initialise
 * 		npixel : number of pixels on the device
 */
void nP_create(neopixel* ret,uint32_t npixel){ //Initialise la structure
 8002c1a:	b4b0      	push	{r4, r5, r7}
 8002c1c:	b08b      	sub	sp, #44	; 0x2c
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
 8002c24:	466b      	mov	r3, sp
 8002c26:	461d      	mov	r5, r3
	ret->npixel = npixel;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	601a      	str	r2, [r3, #0]
	uint8_t red[npixel];
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	4603      	mov	r3, r0
 8002c32:	3b01      	subs	r3, #1
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	4601      	mov	r1, r0
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	f04f 0400 	mov.w	r4, #0
 8002c44:	00d4      	lsls	r4, r2, #3
 8002c46:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4601      	mov	r1, r0
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	f04f 0400 	mov.w	r4, #0
 8002c5a:	00d4      	lsls	r4, r2, #3
 8002c5c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002c60:	00cb      	lsls	r3, r1, #3
 8002c62:	1dc3      	adds	r3, r0, #7
 8002c64:	08db      	lsrs	r3, r3, #3
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	ebad 0d03 	sub.w	sp, sp, r3
 8002c6c:	466b      	mov	r3, sp
 8002c6e:	3300      	adds	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t green[npixel];
 8002c72:	6838      	ldr	r0, [r7, #0]
 8002c74:	4603      	mov	r3, r0
 8002c76:	3b01      	subs	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	4601      	mov	r1, r0
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	f04f 0400 	mov.w	r4, #0
 8002c88:	00d4      	lsls	r4, r2, #3
 8002c8a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002c8e:	00cb      	lsls	r3, r1, #3
 8002c90:	4601      	mov	r1, r0
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	f04f 0400 	mov.w	r4, #0
 8002c9e:	00d4      	lsls	r4, r2, #3
 8002ca0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002ca4:	00cb      	lsls	r3, r1, #3
 8002ca6:	1dc3      	adds	r3, r0, #7
 8002ca8:	08db      	lsrs	r3, r3, #3
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	ebad 0d03 	sub.w	sp, sp, r3
 8002cb0:	466b      	mov	r3, sp
 8002cb2:	3300      	adds	r3, #0
 8002cb4:	61bb      	str	r3, [r7, #24]
	uint8_t blue[npixel];
 8002cb6:	6838      	ldr	r0, [r7, #0]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f04f 0400 	mov.w	r4, #0
 8002ccc:	00d4      	lsls	r4, r2, #3
 8002cce:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002cd2:	00cb      	lsls	r3, r1, #3
 8002cd4:	4601      	mov	r1, r0
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	f04f 0400 	mov.w	r4, #0
 8002ce2:	00d4      	lsls	r4, r2, #3
 8002ce4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002ce8:	00cb      	lsls	r3, r1, #3
 8002cea:	1dc3      	adds	r3, r0, #7
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	ebad 0d03 	sub.w	sp, sp, r3
 8002cf4:	466b      	mov	r3, sp
 8002cf6:	3300      	adds	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
	uint8_t bufferSPI[3 * 3 * 8 *npixel]; //we send 3 bits to give a bit of data to neopixels, each neopixels have 3 colors, each stored on 8 bits.
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4618      	mov	r0, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	f04f 0400 	mov.w	r4, #0
 8002d1a:	00d4      	lsls	r4, r2, #3
 8002d1c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002d20:	00cb      	lsls	r3, r1, #3
 8002d22:	4601      	mov	r1, r0
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	f04f 0400 	mov.w	r4, #0
 8002d30:	00d4      	lsls	r4, r2, #3
 8002d32:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002d36:	00cb      	lsls	r3, r1, #3
 8002d38:	1dc3      	adds	r3, r0, #7
 8002d3a:	08db      	lsrs	r3, r3, #3
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	ebad 0d03 	sub.w	sp, sp, r3
 8002d42:	466b      	mov	r3, sp
 8002d44:	3300      	adds	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
	ret->red = red;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	605a      	str	r2, [r3, #4]
	ret->green = green;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	609a      	str	r2, [r3, #8]
	ret->blue = blue;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	60da      	str	r2, [r3, #12]
	ret->bufferSPI = bufferSPI;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	611a      	str	r2, [r3, #16]
 8002d60:	46ad      	mov	sp, r5
	;
}
 8002d62:	bf00      	nop
 8002d64:	372c      	adds	r7, #44	; 0x2c
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bcb0      	pop	{r4, r5, r7}
 8002d6a:	4770      	bx	lr

08002d6c <nP_setPixel>:
 * Arguments:
 * 		np : struct representing the NeoPixel device
 * 		n : wich pixel we want to color, starts at 0
 * 		rgb : RGB code of the color
 */
void nP_setPixel(neopixel* np,uint32_t n, uint32_t rgb){ //permet de donner une valeur rgb à 1 pixel
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
	if(n < np->npixel){
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d216      	bcs.n	8002db0 <nP_setPixel+0x44>
		np->red[n] = (0xFF0000 & rgb) >> 16;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0c19      	lsrs	r1, r3, #16
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	b2ca      	uxtb	r2, r1
 8002d90:	701a      	strb	r2, [r3, #0]
		np->green[n] = (0x00FF00 & rgb) >> 8;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0a19      	lsrs	r1, r3, #8
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	b2ca      	uxtb	r2, r1
 8002da0:	701a      	strb	r2, [r3, #0]
		np->blue[n] = (0x0000FF & rgb) >> 0;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4413      	add	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	701a      	strb	r2, [r3, #0]
	}
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <nP_prepareMessage>:
/*
 * Update the content of bufferSPI of a neopixel struct to match its RGB values
 * Arguments:
 * 		np : the neopixel struct which need an update
 */
void nP_prepareMessage(neopixel* np){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	int index = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
	for(int i=0;i < np->npixel;i++){
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	e03d      	b.n	8002e4a <nP_prepareMessage+0x8e>
		uint32_t blueColor = nP_convertByteSPI(np->blue[i]);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f83f 	bl	8002e5c <nP_convertByteSPI>
 8002dde:	6178      	str	r0, [r7, #20]
		nP_concat(np->bufferSPI,index * 3 + 2,blueColor);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6918      	ldr	r0, [r3, #16]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	3302      	adds	r3, #2
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4619      	mov	r1, r3
 8002df2:	f000 f85c 	bl	8002eae <nP_concat>
		uint32_t redColor = nP_convertByteSPI(np->red[i]);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f82b 	bl	8002e5c <nP_convertByteSPI>
 8002e06:	6138      	str	r0, [r7, #16]
		nP_concat(np->bufferSPI,index * 3 + 1,redColor);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6918      	ldr	r0, [r3, #16]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	3301      	adds	r3, #1
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f000 f848 	bl	8002eae <nP_concat>
		uint32_t greenColor = nP_convertByteSPI(np->green[i]);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f817 	bl	8002e5c <nP_convertByteSPI>
 8002e2e:	60f8      	str	r0, [r7, #12]
		nP_concat(np->bufferSPI,index * 3 + 0,greenColor);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6918      	ldr	r0, [r3, #16]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f000 f835 	bl	8002eae <nP_concat>
	for(int i=0;i < np->npixel;i++){
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d8bc      	bhi.n	8002dce <nP_prepareMessage+0x12>
	}
}
 8002e54:	bf00      	nop
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <nP_convertByteSPI>:
 * 	Output:
 * 		An int whose 24 first bits are converted to be send to the NeoPixel device throught SPI
 * 	Example:
 * 		if we give 10010100 as an input the output will be 110 100 100 110 100 110 100 100
 */
uint32_t nP_convertByteSPI(uint8_t color){
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
	uint32_t ret = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
	for(int i=7; i>=0; i--){ //We must send the MSB first
 8002e6a:	2307      	movs	r3, #7
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	e014      	b.n	8002e9a <nP_convertByteSPI+0x3e>
		ret = ret << 3;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	60fb      	str	r3, [r7, #12]
		if((color >> i) & 1) //We look at the i-th bit of color
 8002e76:	79fa      	ldrb	r2, [r7, #7]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	fa42 f303 	asr.w	r3, r2, r3
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <nP_convertByteSPI+0x32>
			ret += 6; //110
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3306      	adds	r3, #6
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e002      	b.n	8002e94 <nP_convertByteSPI+0x38>
		else
			ret += 4; //100
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3304      	adds	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
	for(int i=7; i>=0; i--){ //We must send the MSB first
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	dae7      	bge.n	8002e70 <nP_convertByteSPI+0x14>
	}
	return ret;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <nP_concat>:
 * Arguments:
 * 		bufferSPI the buffer being filled
 * 		index : a dynamicaly evolving number tracking the size of bufferSPI.
 * 		color : the 24 bits word which will be placed at the end of bufferSPI
 */
void nP_concat(uint8_t* bufferSPI,int index,uint32_t color){
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
	uint8_t* curretPlace = bufferSPI + index;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
	for(int i=0; i<3; i++){
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e00c      	b.n	8002ee2 <nP_concat+0x34>
		curretPlace[i] = (char) (color >> (i * 8)) & 0xFF;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	fa22 f103 	lsr.w	r1, r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	b2ca      	uxtb	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<3; i++){
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	ddef      	ble.n	8002ec8 <nP_concat+0x1a>
	}
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <nP_send>:
 * Note regarding the SPI transimision :
 * 		For each neopixel we sent 3 color code.
 * 		Each color code represent 8 bits of data and are send over 24 bits throught SPI
 * 		For each pixel we send 8 times a 9 bit word (the packet size we use)
 */
void nP_send(neopixel* np, SPI_HandleTypeDef SpiHandle){
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	f107 0014 	add.w	r0, r7, #20
 8002f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//uint32_t null = 0;
	while(1){ //debug
		//HAL_SPI_Transmit(&SpiHandle, np->bufferSPI, (np->npixel) * 9, 1000);
		HAL_SPI_Transmit(&SpiHandle, np->bufferSPI,(np->npixel) * 16, 1000);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6919      	ldr	r1, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	f107 0014 	add.w	r0, r7, #20
 8002f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1c:	f7fe ffb2 	bl	8001e84 <HAL_SPI_Transmit>
		//HAL_SPI_Transmit(&SpiHandle,(uint8_t*) &null, 1, 1000);
		//nP_sendReset(&SpiHandle);
		HAL_Delay(10);
 8002f20:	200a      	movs	r0, #10
 8002f22:	f7fd fb43 	bl	80005ac <HAL_Delay>
		HAL_SPI_Transmit(&SpiHandle, np->bufferSPI,(np->npixel) * 16, 1000);
 8002f26:	e7ee      	b.n	8002f06 <nP_send+0x12>

08002f28 <tnP_test2>:
	while(1)
		nP_send(&np, SpiHandle);
}

//Light up a few led
void tnP_test2(){
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b0b5      	sub	sp, #212	; 0xd4
 8002f2c:	af16      	add	r7, sp, #88	; 0x58
	neopixel np;
	SPI_HandleTypeDef SpiHandle;
	SpiHandle.Instance = SPInp;
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <tnP_test2+0x70>)
 8002f30:	603b      	str	r3, [r7, #0]
	nP_create(&np,3);
 8002f32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f36:	2103      	movs	r1, #3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fe6e 	bl	8002c1a <nP_create>
	nP_setPixel(&np, 0, BLANC );
 8002f3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f42:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff0f 	bl	8002d6c <nP_setPixel>
	nP_setPixel(&np, 1, BLANC );
 8002f4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f52:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff07 	bl	8002d6c <nP_setPixel>
	nP_setPixel(&np, 2, BLANC );
 8002f5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f62:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8002f66:	2102      	movs	r1, #2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff feff 	bl	8002d6c <nP_setPixel>
	nP_prepareMessage(&np);
 8002f6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff22 	bl	8002dbc <nP_prepareMessage>
	while(1)
		nP_send(&np, SpiHandle);
 8002f78:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8002f7c:	4668      	mov	r0, sp
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	2258      	movs	r2, #88	; 0x58
 8002f84:	4619      	mov	r1, r3
 8002f86:	f000 fac7 	bl	8003518 <memcpy>
 8002f8a:	463b      	mov	r3, r7
 8002f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f7ff ffb0 	bl	8002ef4 <nP_send>
 8002f94:	e7f0      	b.n	8002f78 <tnP_test2+0x50>
 8002f96:	bf00      	nop
 8002f98:	40013000 	.word	0x40013000

08002f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fa0:	f7fd fa94 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fa4:	f000 f80a 	bl	8002fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fa8:	f000 f8f8 	bl	800319c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002fac:	f000 f8c6 	bl	800313c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002fb0:	f000 f886 	bl	80030c0 <MX_SPI1_Init>

  //tnP_testGPIO();
  //tnP_testSPI();
  //tnP_testLed0();
  //tnP_test1();
  tnP_test2();
 8002fb4:	f7ff ffb8 	bl	8002f28 <tnP_test2>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <main+0x1c>
	...

08002fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b0ac      	sub	sp, #176	; 0xb0
 8002fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fc6:	2244      	movs	r2, #68	; 0x44
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 faaf 	bl	800352e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	2254      	movs	r2, #84	; 0x54
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 faa1 	bl	800352e <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002fec:	f7fd fd68 	bl	8000ac0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <SystemClock_Config+0x100>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	4a31      	ldr	r2, [pc, #196]	; (80030bc <SystemClock_Config+0x100>)
 8002ff8:	f023 0318 	bic.w	r3, r3, #24
 8002ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003000:	2314      	movs	r3, #20
 8003002:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003004:	2301      	movs	r3, #1
 8003006:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003008:	2301      	movs	r3, #1
 800300a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003014:	2360      	movs	r3, #96	; 0x60
 8003016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800301a:	2302      	movs	r3, #2
 800301c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003020:	2301      	movs	r3, #1
 8003022:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003026:	2301      	movs	r3, #1
 8003028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 77;
 800302c:	234d      	movs	r3, #77	; 0x4d
 800302e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003032:	2307      	movs	r3, #7
 8003034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003038:	2302      	movs	r3, #2
 800303a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800303e:	2304      	movs	r3, #4
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003044:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fdad 	bl	8000ba8 <HAL_RCC_OscConfig>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003054:	f000 f8ec 	bl	8003230 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003058:	230f      	movs	r3, #15
 800305a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800305c:	2303      	movs	r3, #3
 800305e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003060:	2300      	movs	r3, #0
 8003062:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003064:	2300      	movs	r3, #0
 8003066:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003068:	2300      	movs	r3, #0
 800306a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800306c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003070:	2104      	movs	r1, #4
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f986 	bl	8001384 <HAL_RCC_ClockConfig>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800307e:	f000 f8d7 	bl	8003230 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003082:	2302      	movs	r3, #2
 8003084:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003086:	2300      	movs	r3, #0
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fb7d 	bl	800178c <HAL_RCCEx_PeriphCLKConfig>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003098:	f000 f8ca 	bl	8003230 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800309c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030a0:	f7fd fd2c 	bl	8000afc <HAL_PWREx_ControlVoltageScaling>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80030aa:	f000 f8c1 	bl	8003230 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80030ae:	f7fe fd5f 	bl	8001b70 <HAL_RCCEx_EnableMSIPLLMode>
}
 80030b2:	bf00      	nop
 80030b4:	37b0      	adds	r7, #176	; 0xb0
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000

080030c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <MX_SPI1_Init+0x74>)
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <MX_SPI1_Init+0x78>)
 80030c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <MX_SPI1_Init+0x74>)
 80030cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <MX_SPI1_Init+0x74>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_9BIT;
 80030d8:	4b16      	ldr	r3, [pc, #88]	; (8003134 <MX_SPI1_Init+0x74>)
 80030da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e0:	4b14      	ldr	r3, [pc, #80]	; (8003134 <MX_SPI1_Init+0x74>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <MX_SPI1_Init+0x74>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <MX_SPI1_Init+0x74>)
 80030ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <MX_SPI1_Init+0x74>)
 80030f6:	2220      	movs	r2, #32
 80030f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <MX_SPI1_Init+0x74>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <MX_SPI1_Init+0x74>)
 8003102:	2200      	movs	r2, #0
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003106:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <MX_SPI1_Init+0x74>)
 8003108:	2200      	movs	r2, #0
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <MX_SPI1_Init+0x74>)
 800310e:	2207      	movs	r2, #7
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <MX_SPI1_Init+0x74>)
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <MX_SPI1_Init+0x74>)
 800311a:	2208      	movs	r2, #8
 800311c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800311e:	4805      	ldr	r0, [pc, #20]	; (8003134 <MX_SPI1_Init+0x74>)
 8003120:	f7fe fe26 	bl	8001d70 <HAL_SPI_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800312a:	f000 f881 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	2000002c 	.word	0x2000002c
 8003138:	40013000 	.word	0x40013000

0800313c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <MX_USART2_UART_Init+0x58>)
 8003142:	4a15      	ldr	r2, [pc, #84]	; (8003198 <MX_USART2_UART_Init+0x5c>)
 8003144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <MX_USART2_UART_Init+0x58>)
 8003148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800314c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <MX_USART2_UART_Init+0x58>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <MX_USART2_UART_Init+0x58>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <MX_USART2_UART_Init+0x58>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003160:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <MX_USART2_UART_Init+0x58>)
 8003162:	220c      	movs	r2, #12
 8003164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <MX_USART2_UART_Init+0x58>)
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <MX_USART2_UART_Init+0x58>)
 800316e:	2200      	movs	r2, #0
 8003170:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <MX_USART2_UART_Init+0x58>)
 8003174:	2200      	movs	r2, #0
 8003176:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <MX_USART2_UART_Init+0x58>)
 800317a:	2200      	movs	r2, #0
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800317e:	4805      	ldr	r0, [pc, #20]	; (8003194 <MX_USART2_UART_Init+0x58>)
 8003180:	f7ff f903 	bl	800238a <HAL_UART_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800318a:	f000 f851 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000090 	.word	0x20000090
 8003198:	40004400 	.word	0x40004400

0800319c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <MX_GPIO_Init+0x8c>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <MX_GPIO_Init+0x8c>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031be:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <MX_GPIO_Init+0x8c>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	4b17      	ldr	r3, [pc, #92]	; (8003228 <MX_GPIO_Init+0x8c>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	4a16      	ldr	r2, [pc, #88]	; (8003228 <MX_GPIO_Init+0x8c>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <MX_GPIO_Init+0x8c>)
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <MX_GPIO_Init+0x8c>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	4a10      	ldr	r2, [pc, #64]	; (8003228 <MX_GPIO_Init+0x8c>)
 80031e8:	f043 0302 	orr.w	r3, r3, #2
 80031ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <MX_GPIO_Init+0x8c>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2108      	movs	r1, #8
 80031fe:	480b      	ldr	r0, [pc, #44]	; (800322c <MX_GPIO_Init+0x90>)
 8003200:	f7fd fc46 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003204:	2308      	movs	r3, #8
 8003206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003208:	2301      	movs	r3, #1
 800320a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	4619      	mov	r1, r3
 800321a:	4804      	ldr	r0, [pc, #16]	; (800322c <MX_GPIO_Init+0x90>)
 800321c:	f7fd face 	bl	80007bc <HAL_GPIO_Init>

}
 8003220:	bf00      	nop
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	48000400 	.word	0x48000400

08003230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HAL_MspInit+0x44>)
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <HAL_MspInit+0x44>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6613      	str	r3, [r2, #96]	; 0x60
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_MspInit+0x44>)
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_MspInit+0x44>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	4a08      	ldr	r2, [pc, #32]	; (8003284 <HAL_MspInit+0x44>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003268:	6593      	str	r3, [r2, #88]	; 0x58
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_MspInit+0x44>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000

08003288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a17      	ldr	r2, [pc, #92]	; (8003304 <HAL_SPI_MspInit+0x7c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d128      	bne.n	80032fc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_SPI_MspInit+0x80>)
 80032ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_SPI_MspInit+0x80>)
 80032b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032b4:	6613      	str	r3, [r2, #96]	; 0x60
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_SPI_MspInit+0x80>)
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_SPI_MspInit+0x80>)
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_SPI_MspInit+0x80>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_SPI_MspInit+0x80>)
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80032da:	2382      	movs	r3, #130	; 0x82
 80032dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
 80032e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e6:	2303      	movs	r3, #3
 80032e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ea:	2305      	movs	r3, #5
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	4619      	mov	r1, r3
 80032f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f8:	f7fd fa60 	bl	80007bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032fc:	bf00      	nop
 80032fe:	3728      	adds	r7, #40	; 0x28
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40013000 	.word	0x40013000
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a20      	ldr	r2, [pc, #128]	; (80033ac <HAL_UART_MspInit+0xa0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d13a      	bne.n	80033a4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_UART_MspInit+0xa4>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <HAL_UART_MspInit+0xa4>)
 8003334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003338:	6593      	str	r3, [r2, #88]	; 0x58
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_UART_MspInit+0xa4>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_UART_MspInit+0xa4>)
 8003348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334a:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <HAL_UART_MspInit+0xa4>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <HAL_UART_MspInit+0xa4>)
 8003354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800335e:	2304      	movs	r3, #4
 8003360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	2302      	movs	r3, #2
 8003364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336a:	2303      	movs	r3, #3
 800336c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800336e:	2307      	movs	r3, #7
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	4619      	mov	r1, r3
 8003378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800337c:	f7fd fa1e 	bl	80007bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003392:	2303      	movs	r3, #3
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003396:	f107 0314 	add.w	r3, r7, #20
 800339a:	4619      	mov	r1, r3
 800339c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a0:	f7fd fa0c 	bl	80007bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033a4:	bf00      	nop
 80033a6:	3728      	adds	r7, #40	; 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40004400 	.word	0x40004400
 80033b0:	40021000 	.word	0x40021000

080033b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c6:	e7fe      	b.n	80033c6 <HardFault_Handler+0x4>

080033c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <MemManage_Handler+0x4>

080033ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d2:	e7fe      	b.n	80033d2 <BusFault_Handler+0x4>

080033d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <UsageFault_Handler+0x4>

080033da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003408:	f7fd f8b2 	bl	8000570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}

08003410 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003414:	4b17      	ldr	r3, [pc, #92]	; (8003474 <SystemInit+0x64>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	4a16      	ldr	r2, [pc, #88]	; (8003474 <SystemInit+0x64>)
 800341c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <SystemInit+0x68>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a13      	ldr	r2, [pc, #76]	; (8003478 <SystemInit+0x68>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <SystemInit+0x68>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <SystemInit+0x68>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <SystemInit+0x68>)
 800343c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003440:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003444:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <SystemInit+0x68>)
 8003448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800344c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <SystemInit+0x68>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a09      	ldr	r2, [pc, #36]	; (8003478 <SystemInit+0x68>)
 8003454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003458:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <SystemInit+0x68>)
 800345c:	2200      	movs	r2, #0
 800345e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <SystemInit+0x64>)
 8003462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003466:	609a      	str	r2, [r3, #8]
#endif
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000ed00 	.word	0xe000ed00
 8003478:	40021000 	.word	0x40021000

0800347c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800347c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003480:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003482:	e003      	b.n	800348c <LoopCopyDataInit>

08003484 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003486:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003488:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800348a:	3104      	adds	r1, #4

0800348c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800348c:	480b      	ldr	r0, [pc, #44]	; (80034bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003490:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003492:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003494:	d3f6      	bcc.n	8003484 <CopyDataInit>
	ldr	r2, =_sbss
 8003496:	4a0b      	ldr	r2, [pc, #44]	; (80034c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003498:	e002      	b.n	80034a0 <LoopFillZerobss>

0800349a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800349a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800349c:	f842 3b04 	str.w	r3, [r2], #4

080034a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <LoopForever+0x16>)
	cmp	r2, r3
 80034a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80034a4:	d3f9      	bcc.n	800349a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034a6:	f7ff ffb3 	bl	8003410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034aa:	f000 f811 	bl	80034d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034ae:	f7ff fd75 	bl	8002f9c <main>

080034b2 <LoopForever>:

LoopForever:
    b LoopForever
 80034b2:	e7fe      	b.n	80034b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80034b4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80034b8:	080035b0 	.word	0x080035b0
	ldr	r0, =_sdata
 80034bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80034c0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80034c4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80034c8:	20000110 	.word	0x20000110

080034cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034cc:	e7fe      	b.n	80034cc <ADC1_IRQHandler>
	...

080034d0 <__libc_init_array>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4e0d      	ldr	r6, [pc, #52]	; (8003508 <__libc_init_array+0x38>)
 80034d4:	4c0d      	ldr	r4, [pc, #52]	; (800350c <__libc_init_array+0x3c>)
 80034d6:	1ba4      	subs	r4, r4, r6
 80034d8:	10a4      	asrs	r4, r4, #2
 80034da:	2500      	movs	r5, #0
 80034dc:	42a5      	cmp	r5, r4
 80034de:	d109      	bne.n	80034f4 <__libc_init_array+0x24>
 80034e0:	4e0b      	ldr	r6, [pc, #44]	; (8003510 <__libc_init_array+0x40>)
 80034e2:	4c0c      	ldr	r4, [pc, #48]	; (8003514 <__libc_init_array+0x44>)
 80034e4:	f000 f82c 	bl	8003540 <_init>
 80034e8:	1ba4      	subs	r4, r4, r6
 80034ea:	10a4      	asrs	r4, r4, #2
 80034ec:	2500      	movs	r5, #0
 80034ee:	42a5      	cmp	r5, r4
 80034f0:	d105      	bne.n	80034fe <__libc_init_array+0x2e>
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034f8:	4798      	blx	r3
 80034fa:	3501      	adds	r5, #1
 80034fc:	e7ee      	b.n	80034dc <__libc_init_array+0xc>
 80034fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003502:	4798      	blx	r3
 8003504:	3501      	adds	r5, #1
 8003506:	e7f2      	b.n	80034ee <__libc_init_array+0x1e>
 8003508:	080035a8 	.word	0x080035a8
 800350c:	080035a8 	.word	0x080035a8
 8003510:	080035a8 	.word	0x080035a8
 8003514:	080035ac 	.word	0x080035ac

08003518 <memcpy>:
 8003518:	b510      	push	{r4, lr}
 800351a:	1e43      	subs	r3, r0, #1
 800351c:	440a      	add	r2, r1
 800351e:	4291      	cmp	r1, r2
 8003520:	d100      	bne.n	8003524 <memcpy+0xc>
 8003522:	bd10      	pop	{r4, pc}
 8003524:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800352c:	e7f7      	b.n	800351e <memcpy+0x6>

0800352e <memset>:
 800352e:	4402      	add	r2, r0
 8003530:	4603      	mov	r3, r0
 8003532:	4293      	cmp	r3, r2
 8003534:	d100      	bne.n	8003538 <memset+0xa>
 8003536:	4770      	bx	lr
 8003538:	f803 1b01 	strb.w	r1, [r3], #1
 800353c:	e7f9      	b.n	8003532 <memset+0x4>
	...

08003540 <_init>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr

0800354c <_fini>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr

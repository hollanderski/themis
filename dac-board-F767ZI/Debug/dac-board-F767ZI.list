
dac-board-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000962c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08009830  08009830  00019830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ac8  08009ac8  00020844  2**0
                  CONTENTS
  4 .ARM          00000008  08009ac8  08009ac8  00019ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ad0  08009ad0  00020844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000844  20000000  08009ad8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000844  0800a31c  00020844  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  0800a31c  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5ae  00000000  00000000  00020872  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000367d  00000000  00000000  0003ae20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e8  00000000  00000000  0003e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  0003fa88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ac71  00000000  00000000  00040eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001370b  00000000  00000000  0006bb29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbb97  00000000  00000000  0007f234  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017adcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f0  00000000  00000000  0017ae48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000844 	.word	0x20000844
 800021c:	00000000 	.word	0x00000000
 8000220:	08009814 	.word	0x08009814

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000848 	.word	0x20000848
 800023c:	08009814 	.word	0x08009814

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f94b 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f806 	bl	80005fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f006 f8dc 	bl	80067ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_InitTick+0x54>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x58>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f965 	bl	80008ea <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e00e      	b.n	8000648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d80a      	bhi.n	8000646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000638:	f000 f92d 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_InitTick+0x5c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
 8000644:	e000      	b.n	8000648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000198 	.word	0x20000198
 8000654:	20000004 	.word	0x20000004
 8000658:	20000000 	.word	0x20000000

0800065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_IncTick+0x20>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_IncTick+0x24>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000004 	.word	0x20000004
 8000680:	20000878 	.word	0x20000878

08000684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_GetTick+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000878 	.word	0x20000878

0800069c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a4:	f7ff ffee 	bl	8000684 <HAL_GetTick>
 80006a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b4:	d005      	beq.n	80006c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_Delay+0x40>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006c2:	bf00      	nop
 80006c4:	f7ff ffde 	bl	8000684 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d8f7      	bhi.n	80006c4 <HAL_Delay+0x28>
  {
  }
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000004 	.word	0x20000004

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <__NVIC_SetPriorityGrouping+0x40>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	4313      	orrs	r3, r2
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <__NVIC_SetPriorityGrouping+0x40>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00
 8000724:	05fa0000 	.word	0x05fa0000

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <__NVIC_EnableIRQ+0x38>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff29 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff3e 	bl	8000728 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff31 	bl	8000744 <__NVIC_EnableIRQ>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffa2 	bl	800083c <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b02      	cmp	r3, #2
 8000914:	d004      	beq.n	8000920 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	e00c      	b.n	800093a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2205      	movs	r2, #5
 8000924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f022 0201 	bic.w	r2, r2, #1
 8000936:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
 8000966:	e175      	b.n	8000c54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000968:	2201      	movs	r2, #1
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	429a      	cmp	r2, r3
 8000982:	f040 8164 	bne.w	8000c4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d003      	beq.n	8000996 <HAL_GPIO_Init+0x4e>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	2b12      	cmp	r3, #18
 8000994:	d123      	bne.n	80009de <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	08da      	lsrs	r2, r3, #3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3208      	adds	r2, #8
 800099e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	220f      	movs	r2, #15
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	4013      	ands	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	691a      	ldr	r2, [r3, #16]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	08da      	lsrs	r2, r3, #3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3208      	adds	r2, #8
 80009d8:	69b9      	ldr	r1, [r7, #24]
 80009da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	2203      	movs	r2, #3
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 0203 	and.w	r2, r3, #3
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d00b      	beq.n	8000a32 <HAL_GPIO_Init+0xea>
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d007      	beq.n	8000a32 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a26:	2b11      	cmp	r3, #17
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	2b12      	cmp	r3, #18
 8000a30:	d130      	bne.n	8000a94 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68da      	ldr	r2, [r3, #12]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a68:	2201      	movs	r2, #1
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	091b      	lsrs	r3, r3, #4
 8000a7e:	f003 0201 	and.w	r2, r3, #1
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f000 80be 	beq.w	8000c4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b65      	ldr	r3, [pc, #404]	; (8000c68 <HAL_GPIO_Init+0x320>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a64      	ldr	r2, [pc, #400]	; (8000c68 <HAL_GPIO_Init+0x320>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b62      	ldr	r3, [pc, #392]	; (8000c68 <HAL_GPIO_Init+0x320>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000aea:	4a60      	ldr	r2, [pc, #384]	; (8000c6c <HAL_GPIO_Init+0x324>)
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	3302      	adds	r3, #2
 8000af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	220f      	movs	r2, #15
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a57      	ldr	r2, [pc, #348]	; (8000c70 <HAL_GPIO_Init+0x328>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d037      	beq.n	8000b86 <HAL_GPIO_Init+0x23e>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a56      	ldr	r2, [pc, #344]	; (8000c74 <HAL_GPIO_Init+0x32c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d031      	beq.n	8000b82 <HAL_GPIO_Init+0x23a>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a55      	ldr	r2, [pc, #340]	; (8000c78 <HAL_GPIO_Init+0x330>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d02b      	beq.n	8000b7e <HAL_GPIO_Init+0x236>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a54      	ldr	r2, [pc, #336]	; (8000c7c <HAL_GPIO_Init+0x334>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d025      	beq.n	8000b7a <HAL_GPIO_Init+0x232>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a53      	ldr	r2, [pc, #332]	; (8000c80 <HAL_GPIO_Init+0x338>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d01f      	beq.n	8000b76 <HAL_GPIO_Init+0x22e>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a52      	ldr	r2, [pc, #328]	; (8000c84 <HAL_GPIO_Init+0x33c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d019      	beq.n	8000b72 <HAL_GPIO_Init+0x22a>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a51      	ldr	r2, [pc, #324]	; (8000c88 <HAL_GPIO_Init+0x340>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d013      	beq.n	8000b6e <HAL_GPIO_Init+0x226>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a50      	ldr	r2, [pc, #320]	; (8000c8c <HAL_GPIO_Init+0x344>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d00d      	beq.n	8000b6a <HAL_GPIO_Init+0x222>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4f      	ldr	r2, [pc, #316]	; (8000c90 <HAL_GPIO_Init+0x348>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d007      	beq.n	8000b66 <HAL_GPIO_Init+0x21e>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4e      	ldr	r2, [pc, #312]	; (8000c94 <HAL_GPIO_Init+0x34c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_GPIO_Init+0x21a>
 8000b5e:	2309      	movs	r3, #9
 8000b60:	e012      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b62:	230a      	movs	r3, #10
 8000b64:	e010      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b66:	2308      	movs	r3, #8
 8000b68:	e00e      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	e00c      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b6e:	2306      	movs	r3, #6
 8000b70:	e00a      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b72:	2305      	movs	r3, #5
 8000b74:	e008      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b76:	2304      	movs	r3, #4
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e004      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b7e:	2302      	movs	r3, #2
 8000b80:	e002      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <HAL_GPIO_Init+0x240>
 8000b86:	2300      	movs	r3, #0
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	f002 0203 	and.w	r2, r2, #3
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	4093      	lsls	r3, r2
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b98:	4934      	ldr	r1, [pc, #208]	; (8000c6c <HAL_GPIO_Init+0x324>)
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ba6:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <HAL_GPIO_Init+0x350>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000bca:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <HAL_GPIO_Init+0x350>)
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bd0:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <HAL_GPIO_Init+0x350>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bf4:	4a28      	ldr	r2, [pc, #160]	; (8000c98 <HAL_GPIO_Init+0x350>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfa:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <HAL_GPIO_Init+0x350>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <HAL_GPIO_Init+0x350>)
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_GPIO_Init+0x350>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c48:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <HAL_GPIO_Init+0x350>)
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3301      	adds	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	2b0f      	cmp	r3, #15
 8000c58:	f67f ae86 	bls.w	8000968 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3724      	adds	r7, #36	; 0x24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40013800 	.word	0x40013800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40021400 	.word	0x40021400
 8000c88:	40021800 	.word	0x40021800
 8000c8c:	40021c00 	.word	0x40021c00
 8000c90:	40022000 	.word	0x40022000
 8000c94:	40022400 	.word	0x40022400
 8000c98:	40013c00 	.word	0x40013c00

08000c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	887b      	ldrh	r3, [r7, #2]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e001      	b.n	8000cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	619a      	str	r2, [r3, #24]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	460b      	mov	r3, r1
 8000d08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695a      	ldr	r2, [r3, #20]
 8000d0e:	887b      	ldrh	r3, [r7, #2]
 8000d10:	401a      	ands	r2, r3
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d104      	bne.n	8000d22 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	041a      	lsls	r2, r3, #16
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d40:	695a      	ldr	r2, [r3, #20]
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d006      	beq.n	8000d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f005 f9cc 	bl	80060f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40013c00 	.word	0x40013c00

08000d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e07f      	b.n	8000e76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d106      	bne.n	8000d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f005 fd32 	bl	80067f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2224      	movs	r2, #36	; 0x24
 8000d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0201 	bic.w	r2, r2, #1
 8000da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000db4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d107      	bne.n	8000dde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	e006      	b.n	8000dec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d104      	bne.n	8000dfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6859      	ldr	r1, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_I2C_Init+0x11c>)
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	ea42 0103 	orr.w	r1, r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	021a      	lsls	r2, r3, #8
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69d9      	ldr	r1, [r3, #28]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1a      	ldr	r2, [r3, #32]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0201 	orr.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2220      	movs	r2, #32
 8000e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	02008000 	.word	0x02008000

08000e84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b20      	cmp	r3, #32
 8000e98:	d138      	bne.n	8000f0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d101      	bne.n	8000ea8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e032      	b.n	8000f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2224      	movs	r2, #36	; 0x24
 8000eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0201 	bic.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ed6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6819      	ldr	r1, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2220      	movs	r2, #32
 8000efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e000      	b.n	8000f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f0c:	2302      	movs	r3, #2
  }
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b20      	cmp	r3, #32
 8000f2e:	d139      	bne.n	8000fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d101      	bne.n	8000f3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e033      	b.n	8000fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2224      	movs	r2, #36	; 0x24
 8000f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2220      	movs	r2, #32
 8000f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e000      	b.n	8000fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000fa4:	2302      	movs	r3, #2
  }
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <HAL_PWREx_EnableOverDrive+0x98>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a22      	ldr	r2, [pc, #136]	; (800104c <HAL_PWREx_EnableOverDrive+0x98>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <HAL_PWREx_EnableOverDrive+0x98>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe2:	f7ff fb4f 	bl	8000684 <HAL_GetTick>
 8000fe6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fe8:	e009      	b.n	8000ffe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fea:	f7ff fb4b 	bl	8000684 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ff8:	d901      	bls.n	8000ffe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e022      	b.n	8001044 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100a:	d1ee      	bne.n	8000fea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001016:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001018:	f7ff fb34 	bl	8000684 <HAL_GetTick>
 800101c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800101e:	e009      	b.n	8001034 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001020:	f7ff fb30 	bl	8000684 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800102e:	d901      	bls.n	8001034 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e007      	b.n	8001044 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001040:	d1ee      	bne.n	8001020 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e25e      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8087 	beq.w	8001186 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001078:	4b96      	ldr	r3, [pc, #600]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b04      	cmp	r3, #4
 8001082:	d00c      	beq.n	800109e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001084:	4b93      	ldr	r3, [pc, #588]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x62>
 8001090:	4b90      	ldr	r3, [pc, #576]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800109c:	d10b      	bne.n	80010b6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109e:	4b8d      	ldr	r3, [pc, #564]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d06c      	beq.n	8001184 <HAL_RCC_OscConfig+0x130>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d168      	bne.n	8001184 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e238      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x7a>
 80010c0:	4b84      	ldr	r3, [pc, #528]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a83      	ldr	r2, [pc, #524]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e02e      	b.n	800112c <HAL_RCC_OscConfig+0xd8>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x9c>
 80010d6:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7e      	ldr	r2, [pc, #504]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b7c      	ldr	r3, [pc, #496]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a7b      	ldr	r2, [pc, #492]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xd8>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0xc0>
 80010fa:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a75      	ldr	r2, [pc, #468]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a72      	ldr	r2, [pc, #456]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xd8>
 8001114:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a6e      	ldr	r2, [pc, #440]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a6b      	ldr	r2, [pc, #428]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff faa6 	bl	8000684 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff faa2 	bl	8000684 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1ec      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xe8>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff fa92 	bl	8000684 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fa8e 	bl	8000684 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1d8      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b57      	ldr	r3, [pc, #348]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x110>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d069      	beq.n	8001266 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001192:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x190>
 80011aa:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x17a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e1ac      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	493d      	ldr	r1, [pc, #244]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e040      	b.n	8001266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d023      	beq.n	8001234 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a38      	ldr	r2, [pc, #224]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fa44 	bl	8000684 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fa40 	bl	8000684 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e18a      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4929      	ldr	r1, [pc, #164]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
 8001232:	e018      	b.n	8001266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a26      	ldr	r2, [pc, #152]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fa20 	bl	8000684 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fa1c 	bl	8000684 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e166      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d038      	beq.n	80012e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d019      	beq.n	80012ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127e:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001286:	f7ff f9fd 	bl	8000684 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128e:	f7ff f9f9 	bl	8000684 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e143      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80012a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x23a>
 80012ac:	e01a      	b.n	80012e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80012b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ba:	f7ff f9e3 	bl	8000684 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff f9df 	bl	8000684 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d903      	bls.n	80012d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e129      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
 80012d4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	4b95      	ldr	r3, [pc, #596]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80012da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ee      	bne.n	80012c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a4 	beq.w	800143a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f2:	4b8f      	ldr	r3, [pc, #572]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a8b      	ldr	r2, [pc, #556]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b89      	ldr	r3, [pc, #548]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131a:	4b86      	ldr	r3, [pc, #536]	; (8001534 <HAL_RCC_OscConfig+0x4e0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d118      	bne.n	8001358 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001326:	4b83      	ldr	r3, [pc, #524]	; (8001534 <HAL_RCC_OscConfig+0x4e0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a82      	ldr	r2, [pc, #520]	; (8001534 <HAL_RCC_OscConfig+0x4e0>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001332:	f7ff f9a7 	bl	8000684 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800133a:	f7ff f9a3 	bl	8000684 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	; 0x64
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e0ed      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800134c:	4b79      	ldr	r3, [pc, #484]	; (8001534 <HAL_RCC_OscConfig+0x4e0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x31a>
 8001360:	4b73      	ldr	r3, [pc, #460]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	4a72      	ldr	r2, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
 800136c:	e02d      	b.n	80013ca <HAL_RCC_OscConfig+0x376>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x33c>
 8001376:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137a:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6713      	str	r3, [r2, #112]	; 0x70
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	4a6a      	ldr	r2, [pc, #424]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	6713      	str	r3, [r2, #112]	; 0x70
 800138e:	e01c      	b.n	80013ca <HAL_RCC_OscConfig+0x376>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b05      	cmp	r3, #5
 8001396:	d10c      	bne.n	80013b2 <HAL_RCC_OscConfig+0x35e>
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800139a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139c:	4a64      	ldr	r2, [pc, #400]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6713      	str	r3, [r2, #112]	; 0x70
 80013a4:	4b62      	ldr	r3, [pc, #392]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	4a61      	ldr	r2, [pc, #388]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	; 0x70
 80013b0:	e00b      	b.n	80013ca <HAL_RCC_OscConfig+0x376>
 80013b2:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6713      	str	r3, [r2, #112]	; 0x70
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c2:	4a5b      	ldr	r2, [pc, #364]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d015      	beq.n	80013fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d2:	f7ff f957 	bl	8000684 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	e00a      	b.n	80013f0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff f953 	bl	8000684 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e09b      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0ee      	beq.n	80013da <HAL_RCC_OscConfig+0x386>
 80013fc:	e014      	b.n	8001428 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fe:	f7ff f941 	bl	8000684 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff f93d 	bl	8000684 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f241 3288 	movw	r2, #5000	; 0x1388
 8001414:	4293      	cmp	r3, r2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e085      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141c:	4b44      	ldr	r3, [pc, #272]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ee      	bne.n	8001406 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d105      	bne.n	800143a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a3f      	ldr	r2, [pc, #252]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d071      	beq.n	8001526 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d069      	beq.n	8001522 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d14b      	bne.n	80014ee <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a35      	ldr	r2, [pc, #212]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800145c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff f90f 	bl	8000684 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff f90b 	bl	8000684 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e055      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69da      	ldr	r2, [r3, #28]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	019b      	lsls	r3, r3, #6
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	3b01      	subs	r3, #1
 80014a2:	041b      	lsls	r3, r3, #16
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	061b      	lsls	r3, r3, #24
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	071b      	lsls	r3, r3, #28
 80014b4:	491e      	ldr	r1, [pc, #120]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff f8dd 	bl	8000684 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff f8d9 	bl	8000684 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e023      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x47a>
 80014ec:	e01b      	b.n	8001526 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff f8c3 	bl	8000684 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff f8bf 	bl	8000684 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e009      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f0      	bne.n	8001502 <HAL_RCC_OscConfig+0x4ae>
 8001520:	e001      	b.n	8001526 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0ce      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d910      	bls.n	8001580 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 020f 	bic.w	r2, r3, #15
 8001566:	4964      	ldr	r1, [pc, #400]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0b6      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001598:	4b58      	ldr	r3, [pc, #352]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a57      	ldr	r2, [pc, #348]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a51      	ldr	r2, [pc, #324]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015bc:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	494c      	ldr	r1, [pc, #304]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d040      	beq.n	800165c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d115      	bne.n	800161a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e07d      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b40      	ldr	r3, [pc, #256]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e071      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e069      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 0203 	bic.w	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4935      	ldr	r1, [pc, #212]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800162c:	f7ff f82a 	bl	8000684 <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	e00a      	b.n	800164a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f7ff f826 	bl	8000684 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e051      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 020c 	and.w	r2, r3, #12
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	429a      	cmp	r2, r3
 800165a:	d1eb      	bne.n	8001634 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d210      	bcs.n	800168c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 020f 	bic.w	r2, r3, #15
 8001672:	4921      	ldr	r1, [pc, #132]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e030      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4915      	ldr	r1, [pc, #84]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	490d      	ldr	r1, [pc, #52]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ca:	f000 f81d 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80016ce:	4601      	mov	r1, r0
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1c8>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	fa21 f303 	lsr.w	r3, r1, r3
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_RCC_ClockConfig+0x1cc>)
 80016e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7fe ff88 	bl	80005fc <HAL_InitTick>

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023c00 	.word	0x40023c00
 80016fc:	40023800 	.word	0x40023800
 8001700:	080099d0 	.word	0x080099d0
 8001704:	20000198 	.word	0x20000198

08001708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d007      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x32>
 800172a:	2b08      	cmp	r3, #8
 800172c:	d008      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x38>
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80b4 	bne.w	800189c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001734:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001736:	60bb      	str	r3, [r7, #8]
       break;
 8001738:	e0b3      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800173a:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800173c:	60bb      	str	r3, [r7, #8]
      break;
 800173e:	e0b0      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001748:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800174a:	4b58      	ldr	r3, [pc, #352]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d04a      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001756:	4b55      	ldr	r3, [pc, #340]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	ea03 0501 	and.w	r5, r3, r1
 800176c:	ea04 0602 	and.w	r6, r4, r2
 8001770:	4629      	mov	r1, r5
 8001772:	4632      	mov	r2, r6
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	f04f 0400 	mov.w	r4, #0
 800177c:	0154      	lsls	r4, r2, #5
 800177e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001782:	014b      	lsls	r3, r1, #5
 8001784:	4619      	mov	r1, r3
 8001786:	4622      	mov	r2, r4
 8001788:	1b49      	subs	r1, r1, r5
 800178a:	eb62 0206 	sbc.w	r2, r2, r6
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f04f 0400 	mov.w	r4, #0
 8001796:	0194      	lsls	r4, r2, #6
 8001798:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800179c:	018b      	lsls	r3, r1, #6
 800179e:	1a5b      	subs	r3, r3, r1
 80017a0:	eb64 0402 	sbc.w	r4, r4, r2
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	00e2      	lsls	r2, r4, #3
 80017ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017b2:	00d9      	lsls	r1, r3, #3
 80017b4:	460b      	mov	r3, r1
 80017b6:	4614      	mov	r4, r2
 80017b8:	195b      	adds	r3, r3, r5
 80017ba:	eb44 0406 	adc.w	r4, r4, r6
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	02a2      	lsls	r2, r4, #10
 80017c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017cc:	0299      	lsls	r1, r3, #10
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	4621      	mov	r1, r4
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f04f 0400 	mov.w	r4, #0
 80017dc:	461a      	mov	r2, r3
 80017de:	4623      	mov	r3, r4
 80017e0:	f7fe fd7e 	bl	80002e0 <__aeabi_uldivmod>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e049      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ec:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	ea03 0501 	and.w	r5, r3, r1
 8001802:	ea04 0602 	and.w	r6, r4, r2
 8001806:	4629      	mov	r1, r5
 8001808:	4632      	mov	r2, r6
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	0154      	lsls	r4, r2, #5
 8001814:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001818:	014b      	lsls	r3, r1, #5
 800181a:	4619      	mov	r1, r3
 800181c:	4622      	mov	r2, r4
 800181e:	1b49      	subs	r1, r1, r5
 8001820:	eb62 0206 	sbc.w	r2, r2, r6
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	f04f 0400 	mov.w	r4, #0
 800182c:	0194      	lsls	r4, r2, #6
 800182e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001832:	018b      	lsls	r3, r1, #6
 8001834:	1a5b      	subs	r3, r3, r1
 8001836:	eb64 0402 	sbc.w	r4, r4, r2
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	00e2      	lsls	r2, r4, #3
 8001844:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001848:	00d9      	lsls	r1, r3, #3
 800184a:	460b      	mov	r3, r1
 800184c:	4614      	mov	r4, r2
 800184e:	195b      	adds	r3, r3, r5
 8001850:	eb44 0406 	adc.w	r4, r4, r6
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	02a2      	lsls	r2, r4, #10
 800185e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001862:	0299      	lsls	r1, r3, #10
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	4618      	mov	r0, r3
 800186a:	4621      	mov	r1, r4
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f04f 0400 	mov.w	r4, #0
 8001872:	461a      	mov	r2, r3
 8001874:	4623      	mov	r3, r4
 8001876:	f7fe fd33 	bl	80002e0 <__aeabi_uldivmod>
 800187a:	4603      	mov	r3, r0
 800187c:	460c      	mov	r4, r1
 800187e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	3301      	adds	r3, #1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	60bb      	str	r3, [r7, #8]
      break;
 800189a:	e002      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800189e:	60bb      	str	r3, [r7, #8]
      break;
 80018a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a2:	68bb      	ldr	r3, [r7, #8]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400

080018b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000198 	.word	0x20000198

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d0:	f7ff fff0 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018d4:	4601      	mov	r1, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0a9b      	lsrs	r3, r3, #10
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	080099e0 	.word	0x080099e0

080018f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018f8:	f7ff ffdc 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018fc:	4601      	mov	r1, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0b5b      	lsrs	r3, r3, #13
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	080099e0 	.word	0x080099e0

0800191c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d012      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001944:	4b69      	ldr	r3, [pc, #420]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	4a68      	ldr	r2, [pc, #416]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800194a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800194e:	6093      	str	r3, [r2, #8]
 8001950:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001958:	4964      	ldr	r1, [pc, #400]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001966:	2301      	movs	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d017      	beq.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800197c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	4959      	ldr	r1, [pc, #356]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001986:	4313      	orrs	r3, r2
 8001988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001994:	d101      	bne.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d017      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019b2:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	494a      	ldr	r1, [pc, #296]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d0:	d101      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80019de:	2301      	movs	r3, #1
 80019e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0320 	and.w	r3, r3, #32
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 808b 	beq.w	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	4a39      	ldr	r2, [pc, #228]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0c:	4b37      	ldr	r3, [pc, #220]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a34      	ldr	r2, [pc, #208]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a24:	f7fe fe2e 	bl	8000684 <HAL_GetTick>
 8001a28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2c:	f7fe fe2a 	bl	8000684 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e38d      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d035      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d02e      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d114      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7fe fdf2 	bl	8000684 <HAL_GetTick>
 8001aa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7fe fdee 	bl	8000684 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e34f      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0ee      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ad2:	d111      	bne.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	4901      	ldr	r1, [pc, #4]	; (8001aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40007000 	.word	0x40007000
 8001af4:	0ffffcff 	.word	0x0ffffcff
 8001af8:	4bb3      	ldr	r3, [pc, #716]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4ab2      	ldr	r2, [pc, #712]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001afe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b02:	6093      	str	r3, [r2, #8]
 8001b04:	4bb0      	ldr	r3, [pc, #704]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	49ad      	ldr	r1, [pc, #692]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b22:	4ba9      	ldr	r3, [pc, #676]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b28:	4aa7      	ldr	r2, [pc, #668]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b32:	4ba5      	ldr	r3, [pc, #660]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	49a2      	ldr	r1, [pc, #648]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b50:	4b9d      	ldr	r3, [pc, #628]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b5e:	499a      	ldr	r1, [pc, #616]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00a      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b72:	4b95      	ldr	r3, [pc, #596]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b80:	4991      	ldr	r1, [pc, #580]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00a      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b94:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ba2:	4989      	ldr	r1, [pc, #548]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001bb6:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4980      	ldr	r1, [pc, #512]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00a      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bd8:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4978      	ldr	r1, [pc, #480]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	f023 020c 	bic.w	r2, r3, #12
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c08:	496f      	ldr	r1, [pc, #444]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00a      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	4967      	ldr	r1, [pc, #412]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c3e:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c4c:	495e      	ldr	r1, [pc, #376]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00a      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	4956      	ldr	r1, [pc, #344]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c82:	4b51      	ldr	r3, [pc, #324]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	494d      	ldr	r1, [pc, #308]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00a      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ca4:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	4945      	ldr	r1, [pc, #276]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00a      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001cc6:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ccc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd4:	493c      	ldr	r1, [pc, #240]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00a      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ce8:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cf6:	4934      	ldr	r1, [pc, #208]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d011      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d18:	492b      	ldr	r1, [pc, #172]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d28:	d101      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d58:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00b      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d7c:	4912      	ldr	r1, [pc, #72]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00b      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001da0:	4909      	ldr	r1, [pc, #36]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00f      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc4:	e002      	b.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	4985      	ldr	r1, [pc, #532]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00b      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001de0:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001df0:	497c      	ldr	r1, [pc, #496]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d005      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e06:	f040 80d6 	bne.w	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e0a:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a75      	ldr	r2, [pc, #468]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e16:	f7fe fc35 	bl	8000684 <HAL_GetTick>
 8001e1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e1e:	f7fe fc31 	bl	8000684 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e194      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e30:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d021      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d11d      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e56:	0c1b      	lsrs	r3, r3, #16
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e5e:	4b61      	ldr	r3, [pc, #388]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e64:	0e1b      	lsrs	r3, r3, #24
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	019a      	lsls	r2, r3, #6
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	071b      	lsls	r3, r3, #28
 8001e84:	4957      	ldr	r1, [pc, #348]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d02e      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb6:	d129      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001eb8:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ebe:	0c1b      	lsrs	r3, r3, #16
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ecc:	0f1b      	lsrs	r3, r3, #28
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	019a      	lsls	r2, r3, #6
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	071b      	lsls	r3, r3, #28
 8001eec:	493d      	ldr	r1, [pc, #244]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001efa:	f023 021f 	bic.w	r2, r3, #31
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	3b01      	subs	r3, #1
 8001f04:	4937      	ldr	r1, [pc, #220]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01d      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f18:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1e:	0e1b      	lsrs	r3, r3, #24
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f26:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f2c:	0f1b      	lsrs	r3, r3, #28
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	019a      	lsls	r2, r3, #6
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	431a      	orrs	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	431a      	orrs	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	071b      	lsls	r3, r3, #28
 8001f4c:	4925      	ldr	r1, [pc, #148]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d011      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	019a      	lsls	r2, r3, #6
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	041b      	lsls	r3, r3, #16
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	061b      	lsls	r3, r3, #24
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	071b      	lsls	r3, r3, #28
 8001f7c:	4919      	ldr	r1, [pc, #100]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f84:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a16      	ldr	r2, [pc, #88]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f90:	f7fe fb78 	bl	8000684 <HAL_GetTick>
 8001f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f98:	f7fe fb74 	bl	8000684 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e0d7      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	f040 80cd 	bne.w	8002158 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fca:	f7fe fb5b 	bl	8000684 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001fd2:	f7fe fb57 	bl	8000684 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d903      	bls.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0ba      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8001fe4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff4:	d0ed      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002012:	2b00      	cmp	r3, #0
 8002014:	d02e      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d12a      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800201e:	4b51      	ldr	r3, [pc, #324]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002024:	0c1b      	lsrs	r3, r3, #16
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800202c:	4b4d      	ldr	r3, [pc, #308]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	0f1b      	lsrs	r3, r3, #28
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	019a      	lsls	r2, r3, #6
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	041b      	lsls	r3, r3, #16
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	061b      	lsls	r3, r3, #24
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	071b      	lsls	r3, r3, #28
 8002052:	4944      	ldr	r1, [pc, #272]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800205a:	4b42      	ldr	r3, [pc, #264]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800205c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002060:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	3b01      	subs	r3, #1
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	493d      	ldr	r1, [pc, #244]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d022      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002088:	d11d      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800208a:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	0e1b      	lsrs	r3, r3, #24
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	0f1b      	lsrs	r3, r3, #28
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	019a      	lsls	r2, r3, #6
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	041b      	lsls	r3, r3, #16
 80020b2:	431a      	orrs	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	061b      	lsls	r3, r3, #24
 80020b8:	431a      	orrs	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	071b      	lsls	r3, r3, #28
 80020be:	4929      	ldr	r1, [pc, #164]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d028      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020d2:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d8:	0e1b      	lsrs	r3, r3, #24
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020e0:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	019a      	lsls	r2, r3, #6
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	041b      	lsls	r3, r3, #16
 80020f8:	431a      	orrs	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	071b      	lsls	r3, r3, #28
 8002106:	4917      	ldr	r1, [pc, #92]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	4911      	ldr	r1, [pc, #68]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002130:	f7fe faa8 	bl	8000684 <HAL_GetTick>
 8002134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002138:	f7fe faa4 	bl	8000684 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e007      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002156:	d1ef      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e084      	b.n	8002284 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f004 fb71 	bl	800687c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021b0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021ba:	d902      	bls.n	80021c2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e002      	b.n	80021c8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80021d0:	d007      	beq.n	80021e2 <HAL_SPI_Init+0x7a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021da:	d002      	beq.n	80021e2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021f2:	d903      	bls.n	80021fc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
 80021fa:	e002      	b.n	8002202 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	ea42 0103 	orr.w	r1, r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	f003 0204 	and.w	r2, r3, #4
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	ea42 0103 	orr.w	r1, r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	430a      	orrs	r2, r1
 8002262:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	4613      	mov	r3, r2
 800229a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022a8:	d112      	bne.n	80022d0 <HAL_SPI_Receive+0x44>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10e      	bne.n	80022d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2204      	movs	r2, #4
 80022b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f908 	bl	80024dc <HAL_SPI_TransmitReceive>
 80022cc:	4603      	mov	r3, r0
 80022ce:	e101      	b.n	80024d4 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_SPI_Receive+0x52>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0fa      	b.n	80024d4 <HAL_SPI_Receive+0x248>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022e6:	f7fe f9cd 	bl	8000684 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d002      	beq.n	80022fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
 80022fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022fc:	e0e1      	b.n	80024c2 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <HAL_SPI_Receive+0x7e>
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800230e:	e0d8      	b.n	80024c2 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2204      	movs	r2, #4
 8002314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800235a:	d908      	bls.n	800236e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	e007      	b.n	800237e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800237c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002386:	d107      	bne.n	8002398 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002396:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d007      	beq.n	80023b6 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023be:	d867      	bhi.n	8002490 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023c0:	e030      	b.n	8002424 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d117      	bne.n	8002400 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f103 020c 	add.w	r2, r3, #12
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80023fe:	e011      	b.n	8002424 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002400:	f7fe f940 	bl	8000684 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d803      	bhi.n	8002418 <HAL_SPI_Receive+0x18c>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002416:	d102      	bne.n	800241e <HAL_SPI_Receive+0x192>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d102      	bne.n	8002424 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002422:	e04e      	b.n	80024c2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1c8      	bne.n	80023c2 <HAL_SPI_Receive+0x136>
 8002430:	e034      	b.n	800249c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d115      	bne.n	800246c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	b292      	uxth	r2, r2
 800244c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	1c9a      	adds	r2, r3, #2
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800246a:	e011      	b.n	8002490 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800246c:	f7fe f90a 	bl	8000684 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d803      	bhi.n	8002484 <HAL_SPI_Receive+0x1f8>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002482:	d102      	bne.n	800248a <HAL_SPI_Receive+0x1fe>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800248e:	e018      	b.n	80024c2 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ca      	bne.n	8002432 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fcf0 	bl	8002e86 <SPI_EndRxTransaction>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
 80024be:	e000      	b.n	80024c2 <HAL_SPI_Receive+0x236>
  }

error :
 80024c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024ea:	2301      	movs	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_SPI_TransmitReceive+0x26>
 80024fe:	2302      	movs	r3, #2
 8002500:	e1fb      	b.n	80028fa <HAL_SPI_TransmitReceive+0x41e>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800250a:	f7fe f8bb 	bl	8000684 <HAL_GetTick>
 800250e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002516:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002526:	7efb      	ldrb	r3, [r7, #27]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d00e      	beq.n	800254a <HAL_SPI_TransmitReceive+0x6e>
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002532:	d106      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x66>
 800253c:	7efb      	ldrb	r3, [r7, #27]
 800253e:	2b04      	cmp	r3, #4
 8002540:	d003      	beq.n	800254a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002542:	2302      	movs	r3, #2
 8002544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002548:	e1cd      	b.n	80028e6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_SPI_TransmitReceive+0x80>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_SPI_TransmitReceive+0x80>
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002562:	e1c0      	b.n	80028e6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b04      	cmp	r3, #4
 800256e:	d003      	beq.n	8002578 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2205      	movs	r2, #5
 8002574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	887a      	ldrh	r2, [r7, #2]
 800259e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025ba:	d802      	bhi.n	80025c2 <HAL_SPI_TransmitReceive+0xe6>
 80025bc:	8a3b      	ldrh	r3, [r7, #16]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d908      	bls.n	80025d4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	e007      	b.n	80025e4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025e2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d007      	beq.n	8002602 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800260a:	d97c      	bls.n	8002706 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_SPI_TransmitReceive+0x13e>
 8002614:	8a7b      	ldrh	r3, [r7, #18]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d169      	bne.n	80026ee <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	1c9a      	adds	r2, r3, #2
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800263e:	e056      	b.n	80026ee <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d11b      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x1aa>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d016      	beq.n	8002686 <HAL_SPI_TransmitReceive+0x1aa>
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	2b01      	cmp	r3, #1
 800265c:	d113      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	881a      	ldrh	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	1c9a      	adds	r2, r3, #2
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d11c      	bne.n	80026ce <HAL_SPI_TransmitReceive+0x1f2>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d016      	beq.n	80026ce <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	b292      	uxth	r2, r2
 80026ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	1c9a      	adds	r2, r3, #2
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026ca:	2301      	movs	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026ce:	f7fd ffd9 	bl	8000684 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026da:	429a      	cmp	r2, r3
 80026dc:	d807      	bhi.n	80026ee <HAL_SPI_TransmitReceive+0x212>
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026e4:	d003      	beq.n	80026ee <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80026ec:	e0fb      	b.n	80028e6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1a3      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x164>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d19d      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x164>
 8002704:	e0df      	b.n	80028c6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_SPI_TransmitReceive+0x23a>
 800270e:	8a7b      	ldrh	r3, [r7, #18]
 8002710:	2b01      	cmp	r3, #1
 8002712:	f040 80cb 	bne.w	80028ac <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d912      	bls.n	8002746 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	881a      	ldrh	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	1c9a      	adds	r2, r3, #2
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b02      	subs	r3, #2
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002744:	e0b2      	b.n	80028ac <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800276c:	e09e      	b.n	80028ac <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d134      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x30a>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d02f      	beq.n	80027e6 <HAL_SPI_TransmitReceive+0x30a>
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	2b01      	cmp	r3, #1
 800278a:	d12c      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d912      	bls.n	80027bc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	881a      	ldrh	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	1c9a      	adds	r2, r3, #2
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b02      	subs	r3, #2
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027ba:	e012      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d148      	bne.n	8002886 <HAL_SPI_TransmitReceive+0x3aa>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d042      	beq.n	8002886 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d923      	bls.n	8002854 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	b292      	uxth	r2, r2
 8002818:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	1c9a      	adds	r2, r3, #2
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b02      	subs	r3, #2
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d81f      	bhi.n	8002882 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	e016      	b.n	8002882 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f103 020c 	add.w	r2, r3, #12
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002882:	2301      	movs	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002886:	f7fd fefd 	bl	8000684 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002892:	429a      	cmp	r2, r3
 8002894:	d803      	bhi.n	800289e <HAL_SPI_TransmitReceive+0x3c2>
 8002896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289c:	d102      	bne.n	80028a4 <HAL_SPI_TransmitReceive+0x3c8>
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d103      	bne.n	80028ac <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80028aa:	e01c      	b.n	80028e6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f47f af5b 	bne.w	800276e <HAL_SPI_TransmitReceive+0x292>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f af54 	bne.w	800276e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fb33 	bl	8002f36 <SPI_EndRxTxTransaction>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d006      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	661a      	str	r2, [r3, #96]	; 0x60
 80028e2:	e000      	b.n	80028e6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80028e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80028f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3728      	adds	r7, #40	; 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_SPI_Transmit_IT+0x20>
 8002920:	2302      	movs	r3, #2
 8002922:	e06a      	b.n	80029fa <HAL_SPI_Transmit_IT+0xf6>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_SPI_Transmit_IT+0x34>
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800293c:	e058      	b.n	80029f0 <HAL_SPI_Transmit_IT+0xec>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d002      	beq.n	8002950 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800294a:	2302      	movs	r3, #2
 800294c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800294e:	e04f      	b.n	80029f0 <HAL_SPI_Transmit_IT+0xec>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2203      	movs	r2, #3
 8002954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	88fa      	ldrh	r2, [r7, #6]
 8002968:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002994:	d903      	bls.n	800299e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_SPI_Transmit_IT+0x104>)
 800299a:	651a      	str	r2, [r3, #80]	; 0x50
 800299c:	e002      	b.n	80029a4 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4a1a      	ldr	r2, [pc, #104]	; (8002a0c <HAL_SPI_Transmit_IT+0x108>)
 80029a2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ac:	d107      	bne.n	80029be <HAL_SPI_Transmit_IT+0xba>
  {
    SPI_1LINE_TX(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80029cc:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d008      	beq.n	80029ee <HAL_SPI_Transmit_IT+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e000      	b.n	80029f0 <HAL_SPI_Transmit_IT+0xec>
  }

error :
 80029ee:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	08002c95 	.word	0x08002c95
 8002a0c:	08002c4f 	.word	0x08002c4f

08002a10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	099b      	lsrs	r3, r3, #6
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10f      	bne.n	8002a54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
    return;
 8002a52:	e0d8      	b.n	8002c06 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_SPI_IRQHandler+0x66>
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	09db      	lsrs	r3, r3, #7
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
    return;
 8002a74:	e0c7      	b.n	8002c06 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_SPI_IRQHandler+0x8c>
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	099b      	lsrs	r3, r3, #6
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_SPI_IRQHandler+0x8c>
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80b5 	beq.w	8002c06 <HAL_SPI_IRQHandler+0x1f6>
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80ae 	beq.w	8002c06 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d023      	beq.n	8002afe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d011      	beq.n	8002ae6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac6:	f043 0204 	orr.w	r2, r3, #4
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	e00b      	b.n	8002afe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]
        return;
 8002afc:	e083      	b.n	8002c06 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d014      	beq.n	8002b34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00c      	beq.n	8002b5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b44:	f043 0208 	orr.w	r2, r3, #8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d050      	beq.n	8002c04 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <HAL_SPI_IRQHandler+0x17e>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d034      	beq.n	8002bf8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0203 	bic.w	r2, r2, #3
 8002b9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d011      	beq.n	8002bca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_SPI_IRQHandler+0x1fc>)
 8002bac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fea5 	bl	8000902 <HAL_DMA_Abort_IT>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_SPI_IRQHandler+0x1fc>)
 8002bd8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fe8f 	bl	8000902 <HAL_DMA_Abort_IT>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002bf6:	e003      	b.n	8002c00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f809 	bl	8002c10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002bfe:	e000      	b.n	8002c02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002c00:	bf00      	nop
    return;
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
  }
}
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	08002c25 	.word	0x08002c25

08002c10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff ffe5 	bl	8002c10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f99b 	bl	8002fc2 <SPI_CloseTx_ISR>
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	1c9a      	adds	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f979 	bl	8002fc2 <SPI_CloseTx_ISR>
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ce8:	e04c      	b.n	8002d84 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf0:	d048      	beq.n	8002d84 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002cf2:	f7fd fcc7 	bl	8000684 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d902      	bls.n	8002d08 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d13d      	bne.n	8002d84 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d20:	d111      	bne.n	8002d46 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2a:	d004      	beq.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d107      	bne.n	8002d46 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4e:	d10f      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e00f      	b.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d1a3      	bne.n	8002cea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002dba:	e057      	b.n	8002e6c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002dc2:	d106      	bne.n	8002dd2 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d103      	bne.n	8002dd2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d048      	beq.n	8002e6c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002dda:	f7fd fc53 	bl	8000684 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d902      	bls.n	8002df0 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d13d      	bne.n	8002e6c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e08:	d111      	bne.n	8002e2e <SPI_WaitFifoStateUntilTimeout+0x82>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e12:	d004      	beq.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1c:	d107      	bne.n	8002e2e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e36:	d10f      	bne.n	8002e58 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e008      	b.n	8002e7e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d19f      	bne.n	8002dbc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af02      	add	r7, sp, #8
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e9a:	d111      	bne.n	8002ec0 <SPI_EndRxTransaction+0x3a>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea4:	d004      	beq.n	8002eb0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eae:	d107      	bne.n	8002ec0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7ff ff04 	bl	8002cd8 <SPI_WaitFlagStateUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eda:	f043 0220 	orr.w	r2, r3, #32
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e023      	b.n	8002f2e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eee:	d11d      	bne.n	8002f2c <SPI_EndRxTransaction+0xa6>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef8:	d004      	beq.n	8002f04 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f02:	d113      	bne.n	8002f2c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff ff4b 	bl	8002dac <SPI_WaitFifoStateUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e000      	b.n	8002f2e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af02      	add	r7, sp, #8
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7ff ff2c 	bl	8002dac <SPI_WaitFifoStateUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5e:	f043 0220 	orr.w	r2, r3, #32
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e027      	b.n	8002fba <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff feaf 	bl	8002cd8 <SPI_WaitFlagStateUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f84:	f043 0220 	orr.w	r2, r3, #32
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e014      	b.n	8002fba <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f7ff ff05 	bl	8002dac <SPI_WaitFifoStateUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e000      	b.n	8002fba <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fca:	f7fd fb5b 	bl	8000684 <HAL_GetTick>
 8002fce:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fde:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	2164      	movs	r1, #100	; 0x64
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ffa6 	bl	8002f36 <SPI_EndRxTxTransaction>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fdf0 	bl	8002c10 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003030:	e002      	b.n	8003038 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f003 f826 	bl	8006084 <HAL_SPI_TxCpltCallback>
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e01d      	b.n	800308e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f003 fca6 	bl	80069b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f000 fc06 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <HAL_TIM_Base_Start_IT+0x50>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d00b      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x42>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c8:	d007      	beq.n	80030da <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	00010007 	.word	0x00010007

080030ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a1a      	ldr	r2, [r3, #32]
 800310a:	f241 1311 	movw	r3, #4369	; 0x1111
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10f      	bne.n	8003134 <HAL_TIM_Base_Stop_IT+0x48>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	f240 4344 	movw	r3, #1092	; 0x444
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_TIM_Base_Stop_IT+0x48>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e01d      	b.n	8003190 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f815 	bl	8003198 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2202      	movs	r2, #2
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3304      	adds	r3, #4
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f000 fb85 	bl	8003890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d841      	bhi.n	8003240 <HAL_TIM_IC_Start_IT+0x94>
 80031bc:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <HAL_TIM_IC_Start_IT+0x18>)
 80031be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c2:	bf00      	nop
 80031c4:	080031f9 	.word	0x080031f9
 80031c8:	08003241 	.word	0x08003241
 80031cc:	08003241 	.word	0x08003241
 80031d0:	08003241 	.word	0x08003241
 80031d4:	0800320b 	.word	0x0800320b
 80031d8:	08003241 	.word	0x08003241
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003241 	.word	0x08003241
 80031e4:	0800321d 	.word	0x0800321d
 80031e8:	08003241 	.word	0x08003241
 80031ec:	08003241 	.word	0x08003241
 80031f0:	08003241 	.word	0x08003241
 80031f4:	0800322f 	.word	0x0800322f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0202 	orr.w	r2, r2, #2
 8003206:	60da      	str	r2, [r3, #12]
      break;
 8003208:	e01b      	b.n	8003242 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0204 	orr.w	r2, r2, #4
 8003218:	60da      	str	r2, [r3, #12]
      break;
 800321a:	e012      	b.n	8003242 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	60da      	str	r2, [r3, #12]
      break;
 800322c:	e009      	b.n	8003242 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0210 	orr.w	r2, r2, #16
 800323c:	60da      	str	r2, [r3, #12]
      break;
 800323e:	e000      	b.n	8003242 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003240:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2201      	movs	r2, #1
 8003248:	6839      	ldr	r1, [r7, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fd84 	bl	8003d58 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_TIM_IC_Start_IT+0xd8>)
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d00b      	beq.n	800327a <HAL_TIM_IC_Start_IT+0xce>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d007      	beq.n	800327a <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	00010007 	.word	0x00010007

08003288 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d841      	bhi.n	800331c <HAL_TIM_IC_Stop_IT+0x94>
 8003298:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <HAL_TIM_IC_Stop_IT+0x18>)
 800329a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329e:	bf00      	nop
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	0800331d 	.word	0x0800331d
 80032a8:	0800331d 	.word	0x0800331d
 80032ac:	0800331d 	.word	0x0800331d
 80032b0:	080032e7 	.word	0x080032e7
 80032b4:	0800331d 	.word	0x0800331d
 80032b8:	0800331d 	.word	0x0800331d
 80032bc:	0800331d 	.word	0x0800331d
 80032c0:	080032f9 	.word	0x080032f9
 80032c4:	0800331d 	.word	0x0800331d
 80032c8:	0800331d 	.word	0x0800331d
 80032cc:	0800331d 	.word	0x0800331d
 80032d0:	0800330b 	.word	0x0800330b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0202 	bic.w	r2, r2, #2
 80032e2:	60da      	str	r2, [r3, #12]
      break;
 80032e4:	e01b      	b.n	800331e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0204 	bic.w	r2, r2, #4
 80032f4:	60da      	str	r2, [r3, #12]
      break;
 80032f6:	e012      	b.n	800331e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0208 	bic.w	r2, r2, #8
 8003306:	60da      	str	r2, [r3, #12]
      break;
 8003308:	e009      	b.n	800331e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0210 	bic.w	r2, r2, #16
 8003318:	60da      	str	r2, [r3, #12]
      break;
 800331a:	e000      	b.n	800331e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800331c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2200      	movs	r2, #0
 8003324:	6839      	ldr	r1, [r7, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fd16 	bl	8003d58 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a1a      	ldr	r2, [r3, #32]
 8003332:	f241 1311 	movw	r3, #4369	; 0x1111
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <HAL_TIM_IC_Stop_IT+0xd4>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6a1a      	ldr	r2, [r3, #32]
 8003342:	f240 4344 	movw	r3, #1092	; 0x444
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_TIM_IC_Stop_IT+0xd4>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop

08003368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b02      	cmp	r3, #2
 800337c:	d122      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b02      	cmp	r3, #2
 800338a:	d11b      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0202 	mvn.w	r2, #2
 8003394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f002 fe7c 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 80033b0:	e005      	b.n	80033be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fa4e 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fa55 	bl	8003868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d122      	bne.n	8003418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d11b      	bne.n	8003418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0204 	mvn.w	r2, #4
 80033e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2202      	movs	r2, #2
 80033ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f002 fe52 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 8003404:	e005      	b.n	8003412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa24 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fa2b 	bl	8003868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b08      	cmp	r3, #8
 8003424:	d122      	bne.n	800346c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b08      	cmp	r3, #8
 8003432:	d11b      	bne.n	800346c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0208 	mvn.w	r2, #8
 800343c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2204      	movs	r2, #4
 8003442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f002 fe28 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 8003458:	e005      	b.n	8003466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f9fa 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fa01 	bl	8003868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b10      	cmp	r3, #16
 8003478:	d122      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b10      	cmp	r3, #16
 8003486:	d11b      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0210 	mvn.w	r2, #16
 8003490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2208      	movs	r2, #8
 8003496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f002 fdfe 	bl	80060a8 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9d0 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f9d7 	bl	8003868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10e      	bne.n	80034ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d107      	bne.n	80034ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0201 	mvn.w	r2, #1
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f002 fdf0 	bl	80060cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b80      	cmp	r3, #128	; 0x80
 80034f8:	d10e      	bne.n	8003518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003504:	2b80      	cmp	r3, #128	; 0x80
 8003506:	d107      	bne.n	8003518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fcac 	bl	8003e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003526:	d10e      	bne.n	8003546 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d107      	bne.n	8003546 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800353e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fc9f 	bl	8003e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d10e      	bne.n	8003572 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d107      	bne.n	8003572 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800356a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f985 	bl	800387c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b20      	cmp	r3, #32
 800357e:	d10e      	bne.n	800359e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b20      	cmp	r3, #32
 800358c:	d107      	bne.n	800359e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f06f 0220 	mvn.w	r2, #32
 8003596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fc5f 	bl	8003e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80035bc:	2302      	movs	r3, #2
 80035be:	e08a      	b.n	80036d6 <HAL_TIM_IC_ConfigChannel+0x130>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11b      	bne.n	800360e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f000 f9f3 	bl	80039d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 020c 	bic.w	r2, r2, #12
 80035f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6999      	ldr	r1, [r3, #24]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	619a      	str	r2, [r3, #24]
 800360c:	e05a      	b.n	80036c4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d11c      	bne.n	800364e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f000 fa77 	bl	8003b16 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003636:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6999      	ldr	r1, [r3, #24]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	021a      	lsls	r2, r3, #8
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	619a      	str	r2, [r3, #24]
 800364c:	e03a      	b.n	80036c4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f000 fac4 	bl	8003bf0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 020c 	bic.w	r2, r2, #12
 8003676:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69d9      	ldr	r1, [r3, #28]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	61da      	str	r2, [r3, #28]
 800368a:	e01b      	b.n	80036c4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f000 fae4 	bl	8003c68 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69d9      	ldr	r1, [r3, #28]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	021a      	lsls	r2, r3, #8
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_TIM_ConfigClockSource+0x18>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0a6      	b.n	8003846 <HAL_TIM_ConfigClockSource+0x166>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4b4f      	ldr	r3, [pc, #316]	; (8003850 <HAL_TIM_ConfigClockSource+0x170>)
 8003714:	4013      	ands	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800371e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d067      	beq.n	8003800 <HAL_TIM_ConfigClockSource+0x120>
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d80b      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x6c>
 8003734:	2b10      	cmp	r3, #16
 8003736:	d073      	beq.n	8003820 <HAL_TIM_ConfigClockSource+0x140>
 8003738:	2b10      	cmp	r3, #16
 800373a:	d802      	bhi.n	8003742 <HAL_TIM_ConfigClockSource+0x62>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d06f      	beq.n	8003820 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003740:	e078      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003742:	2b20      	cmp	r3, #32
 8003744:	d06c      	beq.n	8003820 <HAL_TIM_ConfigClockSource+0x140>
 8003746:	2b30      	cmp	r3, #48	; 0x30
 8003748:	d06a      	beq.n	8003820 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800374a:	e073      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800374c:	2b70      	cmp	r3, #112	; 0x70
 800374e:	d00d      	beq.n	800376c <HAL_TIM_ConfigClockSource+0x8c>
 8003750:	2b70      	cmp	r3, #112	; 0x70
 8003752:	d804      	bhi.n	800375e <HAL_TIM_ConfigClockSource+0x7e>
 8003754:	2b50      	cmp	r3, #80	; 0x50
 8003756:	d033      	beq.n	80037c0 <HAL_TIM_ConfigClockSource+0xe0>
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d041      	beq.n	80037e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800375c:	e06a      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003762:	d066      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x152>
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003768:	d017      	beq.n	800379a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800376a:	e063      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6899      	ldr	r1, [r3, #8]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f000 facc 	bl	8003d18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800378e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	609a      	str	r2, [r3, #8]
      break;
 8003798:	e04c      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6899      	ldr	r1, [r3, #8]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f000 fab5 	bl	8003d18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037bc:	609a      	str	r2, [r3, #8]
      break;
 80037be:	e039      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	461a      	mov	r2, r3
 80037ce:	f000 f973 	bl	8003ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2150      	movs	r1, #80	; 0x50
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fa82 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 80037de:	e029      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	461a      	mov	r2, r3
 80037ee:	f000 f9cf 	bl	8003b90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2160      	movs	r1, #96	; 0x60
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fa72 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 80037fe:	e019      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	461a      	mov	r2, r3
 800380e:	f000 f953 	bl	8003ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2140      	movs	r1, #64	; 0x40
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fa62 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 800381e:	e009      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f000 fa59 	bl	8003ce2 <TIM_ITRx_SetConfig>
      break;
 8003830:	e000      	b.n	8003834 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	fffeff88 	.word	0xfffeff88

08003854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a40      	ldr	r2, [pc, #256]	; (80039a4 <TIM_Base_SetConfig+0x114>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d00f      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3d      	ldr	r2, [pc, #244]	; (80039a8 <TIM_Base_SetConfig+0x118>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3c      	ldr	r2, [pc, #240]	; (80039ac <TIM_Base_SetConfig+0x11c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d007      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a3b      	ldr	r2, [pc, #236]	; (80039b0 <TIM_Base_SetConfig+0x120>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0x40>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a3a      	ldr	r2, [pc, #232]	; (80039b4 <TIM_Base_SetConfig+0x124>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <TIM_Base_SetConfig+0x114>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d02b      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d027      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2c      	ldr	r2, [pc, #176]	; (80039a8 <TIM_Base_SetConfig+0x118>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d023      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2b      	ldr	r2, [pc, #172]	; (80039ac <TIM_Base_SetConfig+0x11c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01f      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2a      	ldr	r2, [pc, #168]	; (80039b0 <TIM_Base_SetConfig+0x120>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01b      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a29      	ldr	r2, [pc, #164]	; (80039b4 <TIM_Base_SetConfig+0x124>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d017      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a28      	ldr	r2, [pc, #160]	; (80039b8 <TIM_Base_SetConfig+0x128>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a27      	ldr	r2, [pc, #156]	; (80039bc <TIM_Base_SetConfig+0x12c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00f      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a26      	ldr	r2, [pc, #152]	; (80039c0 <TIM_Base_SetConfig+0x130>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a25      	ldr	r2, [pc, #148]	; (80039c4 <TIM_Base_SetConfig+0x134>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <TIM_Base_SetConfig+0x138>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a23      	ldr	r2, [pc, #140]	; (80039cc <TIM_Base_SetConfig+0x13c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d108      	bne.n	8003954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <TIM_Base_SetConfig+0x114>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0xf8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <TIM_Base_SetConfig+0x124>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800
 80039b0:	40000c00 	.word	0x40000c00
 80039b4:	40010400 	.word	0x40010400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800
 80039c4:	40001800 	.word	0x40001800
 80039c8:	40001c00 	.word	0x40001c00
 80039cc:	40002000 	.word	0x40002000

080039d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f023 0201 	bic.w	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <TIM_TI1_SetConfig+0xcc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01b      	beq.n	8003a36 <TIM_TI1_SetConfig+0x66>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d017      	beq.n	8003a36 <TIM_TI1_SetConfig+0x66>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a25      	ldr	r2, [pc, #148]	; (8003aa0 <TIM_TI1_SetConfig+0xd0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <TIM_TI1_SetConfig+0x66>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a24      	ldr	r2, [pc, #144]	; (8003aa4 <TIM_TI1_SetConfig+0xd4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00f      	beq.n	8003a36 <TIM_TI1_SetConfig+0x66>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4a23      	ldr	r2, [pc, #140]	; (8003aa8 <TIM_TI1_SetConfig+0xd8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <TIM_TI1_SetConfig+0x66>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a22      	ldr	r2, [pc, #136]	; (8003aac <TIM_TI1_SetConfig+0xdc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d007      	beq.n	8003a36 <TIM_TI1_SetConfig+0x66>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a21      	ldr	r2, [pc, #132]	; (8003ab0 <TIM_TI1_SetConfig+0xe0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_TI1_SetConfig+0x66>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4a20      	ldr	r2, [pc, #128]	; (8003ab4 <TIM_TI1_SetConfig+0xe4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <TIM_TI1_SetConfig+0x6a>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <TIM_TI1_SetConfig+0x6c>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e003      	b.n	8003a5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f023 030a 	bic.w	r3, r3, #10
 8003a74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f003 030a 	and.w	r3, r3, #10
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	621a      	str	r2, [r3, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800
 8003aa8:	40000c00 	.word	0x40000c00
 8003aac:	40010400 	.word	0x40010400
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40001800 	.word	0x40001800

08003ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f023 030a 	bic.w	r3, r3, #10
 8003af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f023 0210 	bic.w	r2, r3, #16
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	031b      	lsls	r3, r3, #12
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	621a      	str	r2, [r3, #32]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f023 0210 	bic.w	r2, r3, #16
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	031b      	lsls	r3, r3, #12
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	621a      	str	r2, [r3, #32]
}
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 0303 	bic.w	r3, r3, #3
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	621a      	str	r2, [r3, #32]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	031b      	lsls	r3, r3, #12
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	031b      	lsls	r3, r3, #12
 8003cc0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f043 0307 	orr.w	r3, r3, #7
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	021a      	lsls	r2, r3, #8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	609a      	str	r2, [r3, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a1a      	ldr	r2, [r3, #32]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e045      	b.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1c      	ldr	r2, [pc, #112]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d108      	bne.n	8003e02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003df6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40010000 	.word	0x40010000
 8003e58:	40010400 	.word	0x40010400

08003e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e040      	b.n	8003f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f002 fe00 	bl	8006ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	; 0x24
 8003ec4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa90 	bl	80043fc <UART_SetConfig>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e022      	b.n	8003f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fd28 	bl	8004944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f12:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fdaf 	bl	8004a88 <UART_CheckIdleState>
 8003f2a:	4603      	mov	r3, r0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4613      	mov	r3, r2
 8003f42:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d17f      	bne.n	800404c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Transmit+0x24>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e078      	b.n	800404e <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_UART_Transmit+0x36>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e071      	b.n	800404e <HAL_UART_Transmit+0x11a>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2221      	movs	r2, #33	; 0x21
 8003f7c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f7e:	f7fc fb81 	bl	8000684 <HAL_GetTick>
 8003f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d108      	bne.n	8003fb0 <HAL_UART_Transmit+0x7c>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e003      	b.n	8003fb8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fb8:	e02c      	b.n	8004014 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fd8e 	bl	8004ae6 <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e03c      	b.n	800404e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	3302      	adds	r3, #2
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	e007      	b.n	8004002 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	3301      	adds	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1cc      	bne.n	8003fba <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2200      	movs	r2, #0
 8004028:	2140      	movs	r1, #64	; 0x40
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fd5b 	bl	8004ae6 <UART_WaitOnFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e009      	b.n	800404e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406a:	2b20      	cmp	r3, #32
 800406c:	f040 808a 	bne.w	8004184 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_UART_Receive_IT+0x24>
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e082      	b.n	8004186 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_UART_Receive_IT+0x36>
 800408a:	2302      	movs	r3, #2
 800408c:	e07b      	b.n	8004186 <HAL_UART_Receive_IT+0x12e>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d10e      	bne.n	80040da <HAL_UART_Receive_IT+0x82>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_UART_Receive_IT+0x78>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ce:	e02d      	b.n	800412c <HAL_UART_Receive_IT+0xd4>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	22ff      	movs	r2, #255	; 0xff
 80040d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040d8:	e028      	b.n	800412c <HAL_UART_Receive_IT+0xd4>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10d      	bne.n	80040fe <HAL_UART_Receive_IT+0xa6>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <HAL_UART_Receive_IT+0x9c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	22ff      	movs	r2, #255	; 0xff
 80040ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040f2:	e01b      	b.n	800412c <HAL_UART_Receive_IT+0xd4>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	227f      	movs	r2, #127	; 0x7f
 80040f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040fc:	e016      	b.n	800412c <HAL_UART_Receive_IT+0xd4>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004106:	d10d      	bne.n	8004124 <HAL_UART_Receive_IT+0xcc>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <HAL_UART_Receive_IT+0xc2>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	227f      	movs	r2, #127	; 0x7f
 8004114:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004118:	e008      	b.n	800412c <HAL_UART_Receive_IT+0xd4>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	223f      	movs	r2, #63	; 0x3f
 800411e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004122:	e003      	b.n	800412c <HAL_UART_Receive_IT+0xd4>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2222      	movs	r2, #34	; 0x22
 8004136:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d107      	bne.n	8004162 <HAL_UART_Receive_IT+0x10a>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d103      	bne.n	8004162 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <HAL_UART_Receive_IT+0x13c>)
 800415e:	661a      	str	r2, [r3, #96]	; 0x60
 8004160:	e002      	b.n	8004168 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <HAL_UART_Receive_IT+0x140>)
 8004166:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800417e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
  }
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	08004cbb 	.word	0x08004cbb
 8004198:	08004c15 	.word	0x08004c15

0800419c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d113      	bne.n	80041f2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00e      	beq.n	80041f2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80eb 	beq.w	80043be <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
      }
      return;
 80041f0:	e0e5      	b.n	80043be <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80c0 	beq.w	800437a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80b5 	beq.w	800437a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00e      	beq.n	8004238 <HAL_UART_IRQHandler+0x9c>
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2201      	movs	r2, #1
 800422a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004230:	f043 0201 	orr.w	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00e      	beq.n	8004260 <HAL_UART_IRQHandler+0xc4>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2202      	movs	r2, #2
 8004252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004258:	f043 0204 	orr.w	r2, r3, #4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00e      	beq.n	8004288 <HAL_UART_IRQHandler+0xec>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2204      	movs	r2, #4
 800427a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004280:	f043 0202 	orr.w	r2, r3, #2
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d013      	beq.n	80042ba <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2208      	movs	r2, #8
 80042ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d07f      	beq.n	80043c2 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ea:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d004      	beq.n	8004304 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004300:	2b00      	cmp	r3, #0
 8004302:	d031      	beq.n	8004368 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fc36 	bl	8004b76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d123      	bne.n	8004360 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d013      	beq.n	8004358 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <HAL_UART_IRQHandler+0x234>)
 8004336:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc fae0 	bl	8000902 <HAL_DMA_Abort_IT>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d016      	beq.n	8004376 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004352:	4610      	mov	r0, r2
 8004354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004356:	e00e      	b.n	8004376 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f845 	bl	80043e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435e:	e00a      	b.n	8004376 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f841 	bl	80043e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004366:	e006      	b.n	8004376 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f83d 	bl	80043e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004374:	e025      	b.n	80043c2 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004376:	bf00      	nop
    return;
 8004378:	e023      	b.n	80043c2 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004392:	2b00      	cmp	r3, #0
 8004394:	d017      	beq.n	80043c6 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
    }
    return;
 800439e:	e012      	b.n	80043c6 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00e      	beq.n	80043c8 <HAL_UART_IRQHandler+0x22c>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fc14 	bl	8004be2 <UART_EndTransmit_IT>
    return;
 80043ba:	bf00      	nop
 80043bc:	e004      	b.n	80043c8 <HAL_UART_IRQHandler+0x22c>
      return;
 80043be:	bf00      	nop
 80043c0:	e002      	b.n	80043c8 <HAL_UART_IRQHandler+0x22c>
    return;
 80043c2:	bf00      	nop
 80043c4:	e000      	b.n	80043c8 <HAL_UART_IRQHandler+0x22c>
    return;
 80043c6:	bf00      	nop
  }

}
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	08004bb7 	.word	0x08004bb7

080043d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4bb1      	ldr	r3, [pc, #708]	; (80046f0 <UART_SetConfig+0x2f4>)
 800442c:	4013      	ands	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	6939      	ldr	r1, [r7, #16]
 8004434:	430b      	orrs	r3, r1
 8004436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a9f      	ldr	r2, [pc, #636]	; (80046f4 <UART_SetConfig+0x2f8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d121      	bne.n	80044c0 <UART_SetConfig+0xc4>
 800447c:	4b9e      	ldr	r3, [pc, #632]	; (80046f8 <UART_SetConfig+0x2fc>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b03      	cmp	r3, #3
 8004488:	d816      	bhi.n	80044b8 <UART_SetConfig+0xbc>
 800448a:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x94>)
 800448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004490:	080044a1 	.word	0x080044a1
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044a7 	.word	0x080044a7
 800449c:	080044b3 	.word	0x080044b3
 80044a0:	2301      	movs	r3, #1
 80044a2:	77fb      	strb	r3, [r7, #31]
 80044a4:	e151      	b.n	800474a <UART_SetConfig+0x34e>
 80044a6:	2302      	movs	r3, #2
 80044a8:	77fb      	strb	r3, [r7, #31]
 80044aa:	e14e      	b.n	800474a <UART_SetConfig+0x34e>
 80044ac:	2304      	movs	r3, #4
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e14b      	b.n	800474a <UART_SetConfig+0x34e>
 80044b2:	2308      	movs	r3, #8
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e148      	b.n	800474a <UART_SetConfig+0x34e>
 80044b8:	2310      	movs	r3, #16
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	bf00      	nop
 80044be:	e144      	b.n	800474a <UART_SetConfig+0x34e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a8d      	ldr	r2, [pc, #564]	; (80046fc <UART_SetConfig+0x300>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d134      	bne.n	8004534 <UART_SetConfig+0x138>
 80044ca:	4b8b      	ldr	r3, [pc, #556]	; (80046f8 <UART_SetConfig+0x2fc>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	d829      	bhi.n	800452c <UART_SetConfig+0x130>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0xe4>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004515 	.word	0x08004515
 80044e4:	0800452d 	.word	0x0800452d
 80044e8:	0800452d 	.word	0x0800452d
 80044ec:	0800452d 	.word	0x0800452d
 80044f0:	08004521 	.word	0x08004521
 80044f4:	0800452d 	.word	0x0800452d
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	0800452d 	.word	0x0800452d
 8004500:	0800451b 	.word	0x0800451b
 8004504:	0800452d 	.word	0x0800452d
 8004508:	0800452d 	.word	0x0800452d
 800450c:	0800452d 	.word	0x0800452d
 8004510:	08004527 	.word	0x08004527
 8004514:	2300      	movs	r3, #0
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e117      	b.n	800474a <UART_SetConfig+0x34e>
 800451a:	2302      	movs	r3, #2
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e114      	b.n	800474a <UART_SetConfig+0x34e>
 8004520:	2304      	movs	r3, #4
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e111      	b.n	800474a <UART_SetConfig+0x34e>
 8004526:	2308      	movs	r3, #8
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e10e      	b.n	800474a <UART_SetConfig+0x34e>
 800452c:	2310      	movs	r3, #16
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	bf00      	nop
 8004532:	e10a      	b.n	800474a <UART_SetConfig+0x34e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a71      	ldr	r2, [pc, #452]	; (8004700 <UART_SetConfig+0x304>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d120      	bne.n	8004580 <UART_SetConfig+0x184>
 800453e:	4b6e      	ldr	r3, [pc, #440]	; (80046f8 <UART_SetConfig+0x2fc>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004548:	2b10      	cmp	r3, #16
 800454a:	d00f      	beq.n	800456c <UART_SetConfig+0x170>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d802      	bhi.n	8004556 <UART_SetConfig+0x15a>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <UART_SetConfig+0x164>
 8004554:	e010      	b.n	8004578 <UART_SetConfig+0x17c>
 8004556:	2b20      	cmp	r3, #32
 8004558:	d005      	beq.n	8004566 <UART_SetConfig+0x16a>
 800455a:	2b30      	cmp	r3, #48	; 0x30
 800455c:	d009      	beq.n	8004572 <UART_SetConfig+0x176>
 800455e:	e00b      	b.n	8004578 <UART_SetConfig+0x17c>
 8004560:	2300      	movs	r3, #0
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e0f1      	b.n	800474a <UART_SetConfig+0x34e>
 8004566:	2302      	movs	r3, #2
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e0ee      	b.n	800474a <UART_SetConfig+0x34e>
 800456c:	2304      	movs	r3, #4
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e0eb      	b.n	800474a <UART_SetConfig+0x34e>
 8004572:	2308      	movs	r3, #8
 8004574:	77fb      	strb	r3, [r7, #31]
 8004576:	e0e8      	b.n	800474a <UART_SetConfig+0x34e>
 8004578:	2310      	movs	r3, #16
 800457a:	77fb      	strb	r3, [r7, #31]
 800457c:	bf00      	nop
 800457e:	e0e4      	b.n	800474a <UART_SetConfig+0x34e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a5f      	ldr	r2, [pc, #380]	; (8004704 <UART_SetConfig+0x308>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d120      	bne.n	80045cc <UART_SetConfig+0x1d0>
 800458a:	4b5b      	ldr	r3, [pc, #364]	; (80046f8 <UART_SetConfig+0x2fc>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d00f      	beq.n	80045b8 <UART_SetConfig+0x1bc>
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d802      	bhi.n	80045a2 <UART_SetConfig+0x1a6>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <UART_SetConfig+0x1b0>
 80045a0:	e010      	b.n	80045c4 <UART_SetConfig+0x1c8>
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d005      	beq.n	80045b2 <UART_SetConfig+0x1b6>
 80045a6:	2bc0      	cmp	r3, #192	; 0xc0
 80045a8:	d009      	beq.n	80045be <UART_SetConfig+0x1c2>
 80045aa:	e00b      	b.n	80045c4 <UART_SetConfig+0x1c8>
 80045ac:	2300      	movs	r3, #0
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e0cb      	b.n	800474a <UART_SetConfig+0x34e>
 80045b2:	2302      	movs	r3, #2
 80045b4:	77fb      	strb	r3, [r7, #31]
 80045b6:	e0c8      	b.n	800474a <UART_SetConfig+0x34e>
 80045b8:	2304      	movs	r3, #4
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e0c5      	b.n	800474a <UART_SetConfig+0x34e>
 80045be:	2308      	movs	r3, #8
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e0c2      	b.n	800474a <UART_SetConfig+0x34e>
 80045c4:	2310      	movs	r3, #16
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	bf00      	nop
 80045ca:	e0be      	b.n	800474a <UART_SetConfig+0x34e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a4d      	ldr	r2, [pc, #308]	; (8004708 <UART_SetConfig+0x30c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d124      	bne.n	8004620 <UART_SetConfig+0x224>
 80045d6:	4b48      	ldr	r3, [pc, #288]	; (80046f8 <UART_SetConfig+0x2fc>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e4:	d012      	beq.n	800460c <UART_SetConfig+0x210>
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ea:	d802      	bhi.n	80045f2 <UART_SetConfig+0x1f6>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <UART_SetConfig+0x204>
 80045f0:	e012      	b.n	8004618 <UART_SetConfig+0x21c>
 80045f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f6:	d006      	beq.n	8004606 <UART_SetConfig+0x20a>
 80045f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fc:	d009      	beq.n	8004612 <UART_SetConfig+0x216>
 80045fe:	e00b      	b.n	8004618 <UART_SetConfig+0x21c>
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e0a1      	b.n	800474a <UART_SetConfig+0x34e>
 8004606:	2302      	movs	r3, #2
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e09e      	b.n	800474a <UART_SetConfig+0x34e>
 800460c:	2304      	movs	r3, #4
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e09b      	b.n	800474a <UART_SetConfig+0x34e>
 8004612:	2308      	movs	r3, #8
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e098      	b.n	800474a <UART_SetConfig+0x34e>
 8004618:	2310      	movs	r3, #16
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	bf00      	nop
 800461e:	e094      	b.n	800474a <UART_SetConfig+0x34e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a39      	ldr	r2, [pc, #228]	; (800470c <UART_SetConfig+0x310>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d124      	bne.n	8004674 <UART_SetConfig+0x278>
 800462a:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <UART_SetConfig+0x2fc>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d012      	beq.n	8004660 <UART_SetConfig+0x264>
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463e:	d802      	bhi.n	8004646 <UART_SetConfig+0x24a>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <UART_SetConfig+0x258>
 8004644:	e012      	b.n	800466c <UART_SetConfig+0x270>
 8004646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464a:	d006      	beq.n	800465a <UART_SetConfig+0x25e>
 800464c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004650:	d009      	beq.n	8004666 <UART_SetConfig+0x26a>
 8004652:	e00b      	b.n	800466c <UART_SetConfig+0x270>
 8004654:	2301      	movs	r3, #1
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e077      	b.n	800474a <UART_SetConfig+0x34e>
 800465a:	2302      	movs	r3, #2
 800465c:	77fb      	strb	r3, [r7, #31]
 800465e:	e074      	b.n	800474a <UART_SetConfig+0x34e>
 8004660:	2304      	movs	r3, #4
 8004662:	77fb      	strb	r3, [r7, #31]
 8004664:	e071      	b.n	800474a <UART_SetConfig+0x34e>
 8004666:	2308      	movs	r3, #8
 8004668:	77fb      	strb	r3, [r7, #31]
 800466a:	e06e      	b.n	800474a <UART_SetConfig+0x34e>
 800466c:	2310      	movs	r3, #16
 800466e:	77fb      	strb	r3, [r7, #31]
 8004670:	bf00      	nop
 8004672:	e06a      	b.n	800474a <UART_SetConfig+0x34e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a25      	ldr	r2, [pc, #148]	; (8004710 <UART_SetConfig+0x314>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d124      	bne.n	80046c8 <UART_SetConfig+0x2cc>
 800467e:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <UART_SetConfig+0x2fc>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468c:	d012      	beq.n	80046b4 <UART_SetConfig+0x2b8>
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d802      	bhi.n	800469a <UART_SetConfig+0x29e>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <UART_SetConfig+0x2ac>
 8004698:	e012      	b.n	80046c0 <UART_SetConfig+0x2c4>
 800469a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469e:	d006      	beq.n	80046ae <UART_SetConfig+0x2b2>
 80046a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046a4:	d009      	beq.n	80046ba <UART_SetConfig+0x2be>
 80046a6:	e00b      	b.n	80046c0 <UART_SetConfig+0x2c4>
 80046a8:	2300      	movs	r3, #0
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e04d      	b.n	800474a <UART_SetConfig+0x34e>
 80046ae:	2302      	movs	r3, #2
 80046b0:	77fb      	strb	r3, [r7, #31]
 80046b2:	e04a      	b.n	800474a <UART_SetConfig+0x34e>
 80046b4:	2304      	movs	r3, #4
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e047      	b.n	800474a <UART_SetConfig+0x34e>
 80046ba:	2308      	movs	r3, #8
 80046bc:	77fb      	strb	r3, [r7, #31]
 80046be:	e044      	b.n	800474a <UART_SetConfig+0x34e>
 80046c0:	2310      	movs	r3, #16
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	bf00      	nop
 80046c6:	e040      	b.n	800474a <UART_SetConfig+0x34e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a11      	ldr	r2, [pc, #68]	; (8004714 <UART_SetConfig+0x318>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d139      	bne.n	8004746 <UART_SetConfig+0x34a>
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <UART_SetConfig+0x2fc>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e0:	d027      	beq.n	8004732 <UART_SetConfig+0x336>
 80046e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e6:	d817      	bhi.n	8004718 <UART_SetConfig+0x31c>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01c      	beq.n	8004726 <UART_SetConfig+0x32a>
 80046ec:	e027      	b.n	800473e <UART_SetConfig+0x342>
 80046ee:	bf00      	nop
 80046f0:	efff69f3 	.word	0xefff69f3
 80046f4:	40011000 	.word	0x40011000
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40004400 	.word	0x40004400
 8004700:	40004800 	.word	0x40004800
 8004704:	40004c00 	.word	0x40004c00
 8004708:	40005000 	.word	0x40005000
 800470c:	40011400 	.word	0x40011400
 8004710:	40007800 	.word	0x40007800
 8004714:	40007c00 	.word	0x40007c00
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	d006      	beq.n	800472c <UART_SetConfig+0x330>
 800471e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004722:	d009      	beq.n	8004738 <UART_SetConfig+0x33c>
 8004724:	e00b      	b.n	800473e <UART_SetConfig+0x342>
 8004726:	2300      	movs	r3, #0
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e00e      	b.n	800474a <UART_SetConfig+0x34e>
 800472c:	2302      	movs	r3, #2
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e00b      	b.n	800474a <UART_SetConfig+0x34e>
 8004732:	2304      	movs	r3, #4
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e008      	b.n	800474a <UART_SetConfig+0x34e>
 8004738:	2308      	movs	r3, #8
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e005      	b.n	800474a <UART_SetConfig+0x34e>
 800473e:	2310      	movs	r3, #16
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	bf00      	nop
 8004744:	e001      	b.n	800474a <UART_SetConfig+0x34e>
 8004746:	2310      	movs	r3, #16
 8004748:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004752:	d17c      	bne.n	800484e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004754:	7ffb      	ldrb	r3, [r7, #31]
 8004756:	2b08      	cmp	r3, #8
 8004758:	d859      	bhi.n	800480e <UART_SetConfig+0x412>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <UART_SetConfig+0x364>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004785 	.word	0x08004785
 8004764:	080047a3 	.word	0x080047a3
 8004768:	080047c1 	.word	0x080047c1
 800476c:	0800480f 	.word	0x0800480f
 8004770:	080047d9 	.word	0x080047d9
 8004774:	0800480f 	.word	0x0800480f
 8004778:	0800480f 	.word	0x0800480f
 800477c:	0800480f 	.word	0x0800480f
 8004780:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004784:	f7fd f8a2 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8004788:	4603      	mov	r3, r0
 800478a:	005a      	lsls	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	441a      	add	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	b29b      	uxth	r3, r3
 800479e:	61bb      	str	r3, [r7, #24]
        break;
 80047a0:	e038      	b.n	8004814 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80047a2:	f7fd f8a7 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 80047a6:	4603      	mov	r3, r0
 80047a8:	005a      	lsls	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	61bb      	str	r3, [r7, #24]
        break;
 80047be:	e029      	b.n	8004814 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	085a      	lsrs	r2, r3, #1
 80047c6:	4b5d      	ldr	r3, [pc, #372]	; (800493c <UART_SetConfig+0x540>)
 80047c8:	4413      	add	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6852      	ldr	r2, [r2, #4]
 80047ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	61bb      	str	r3, [r7, #24]
        break;
 80047d6:	e01d      	b.n	8004814 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80047d8:	f7fc ff96 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80047dc:	4603      	mov	r3, r0
 80047de:	005a      	lsls	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	441a      	add	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	61bb      	str	r3, [r7, #24]
        break;
 80047f4:	e00e      	b.n	8004814 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	b29b      	uxth	r3, r3
 800480a:	61bb      	str	r3, [r7, #24]
        break;
 800480c:	e002      	b.n	8004814 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	75fb      	strb	r3, [r7, #23]
        break;
 8004812:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d916      	bls.n	8004848 <UART_SetConfig+0x44c>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004820:	d212      	bcs.n	8004848 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f023 030f 	bic.w	r3, r3, #15
 800482a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	b29b      	uxth	r3, r3
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	b29a      	uxth	r2, r3
 8004838:	89fb      	ldrh	r3, [r7, #14]
 800483a:	4313      	orrs	r3, r2
 800483c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	89fa      	ldrh	r2, [r7, #14]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	e06e      	b.n	8004926 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	75fb      	strb	r3, [r7, #23]
 800484c:	e06b      	b.n	8004926 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800484e:	7ffb      	ldrb	r3, [r7, #31]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d857      	bhi.n	8004904 <UART_SetConfig+0x508>
 8004854:	a201      	add	r2, pc, #4	; (adr r2, 800485c <UART_SetConfig+0x460>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004881 	.word	0x08004881
 8004860:	0800489d 	.word	0x0800489d
 8004864:	080048b9 	.word	0x080048b9
 8004868:	08004905 	.word	0x08004905
 800486c:	080048d1 	.word	0x080048d1
 8004870:	08004905 	.word	0x08004905
 8004874:	08004905 	.word	0x08004905
 8004878:	08004905 	.word	0x08004905
 800487c:	080048ed 	.word	0x080048ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004880:	f7fd f824 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	b29b      	uxth	r3, r3
 8004898:	61bb      	str	r3, [r7, #24]
        break;
 800489a:	e036      	b.n	800490a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800489c:	f7fd f82a 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	441a      	add	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	61bb      	str	r3, [r7, #24]
        break;
 80048b6:	e028      	b.n	800490a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	085a      	lsrs	r2, r3, #1
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <UART_SetConfig+0x544>)
 80048c0:	4413      	add	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6852      	ldr	r2, [r2, #4]
 80048c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	61bb      	str	r3, [r7, #24]
        break;
 80048ce:	e01c      	b.n	800490a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048d0:	f7fc ff1a 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	61bb      	str	r3, [r7, #24]
        break;
 80048ea:	e00e      	b.n	800490a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	b29b      	uxth	r3, r3
 8004900:	61bb      	str	r3, [r7, #24]
        break;
 8004902:	e002      	b.n	800490a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	75fb      	strb	r3, [r7, #23]
        break;
 8004908:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b0f      	cmp	r3, #15
 800490e:	d908      	bls.n	8004922 <UART_SetConfig+0x526>
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004916:	d204      	bcs.n	8004922 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	60da      	str	r2, [r3, #12]
 8004920:	e001      	b.n	8004926 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	01e84800 	.word	0x01e84800
 8004940:	00f42400 	.word	0x00f42400

08004944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00a      	beq.n	80049b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01a      	beq.n	8004a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a42:	d10a      	bne.n	8004a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a96:	f7fb fdf5 	bl	8000684 <HAL_GetTick>
 8004a9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d10e      	bne.n	8004ac8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f814 	bl	8004ae6 <UART_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e00a      	b.n	8004ade <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af6:	e02a      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afe:	d026      	beq.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b00:	f7fb fdc0 	bl	8000684 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d302      	bcc.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11b      	bne.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e00f      	b.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d0c5      	beq.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b8c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7ff fc07 	bl	80043e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fbe4 	bl	80043d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c22:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c28:	2b22      	cmp	r3, #34	; 0x22
 8004c2a:	d13a      	bne.n	8004ca2 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c34:	89bb      	ldrh	r3, [r7, #12]
 8004c36:	b2d9      	uxtb	r1, r3
 8004c38:	89fb      	ldrh	r3, [r7, #14]
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	400a      	ands	r2, r1
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d121      	bne.n	8004cb2 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c7c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 fa5a 	bl	8006154 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ca0:	e007      	b.n	8004cb2 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0208 	orr.w	r2, r2, #8
 8004cb0:	619a      	str	r2, [r3, #24]
}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cc8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cce:	2b22      	cmp	r3, #34	; 0x22
 8004cd0:	d13a      	bne.n	8004d48 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cde:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ce0:	89ba      	ldrh	r2, [r7, #12]
 8004ce2:	89fb      	ldrh	r3, [r7, #14]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	1c9a      	adds	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d121      	bne.n	8004d58 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d22:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f001 fa07 	bl	8006154 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d46:	e007      	b.n	8004d58 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0208 	orr.w	r2, r2, #8
 8004d56:	619a      	str	r2, [r3, #24]
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <prepareVcaEnvelopeNoteON>:
/* Private function prototypes -----------------------------------------------*/

/**
 * Init data for the Attack phase of the VCA envelope. This is triggered by a MIDI Note On.
 */
void prepareVcaEnvelopeNoteON() {
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0

	// stateMachineVca.amplitude=0.0; // commented Dec 3 2019 SR : avoid clip when re-triggering note while the enveloppe is not finished
	stateMachineVca.tmpTargetLevel =
			((1.0 - stateMachineVca.velocitySensitivity)
 8004d64:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <prepareVcaEnvelopeNoteON+0x78>)
 8004d66:	ed93 7b04 	vldr	d7, [r3, #16]
 8004d6a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004d6e:	ee36 6b47 	vsub.f64	d6, d6, d7
					+ (midiNote.velocity / 127.)
 8004d72:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <prepareVcaEnvelopeNoteON+0x7c>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004d7e:	ed9f 4b12 	vldr	d4, [pc, #72]	; 8004dc8 <prepareVcaEnvelopeNoteON+0x68>
 8004d82:	ee87 5b04 	vdiv.f64	d5, d7, d4
							* stateMachineVca.velocitySensitivity);
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <prepareVcaEnvelopeNoteON+0x78>)
 8004d88:	ed93 7b04 	vldr	d7, [r3, #16]
 8004d8c:	ee25 7b07 	vmul.f64	d7, d5, d7
					+ (midiNote.velocity / 127.)
 8004d90:	ee36 7b07 	vadd.f64	d7, d6, d7
	stateMachineVca.tmpTargetLevel =
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <prepareVcaEnvelopeNoteON+0x78>)
 8004d96:	ed83 7b08 	vstr	d7, [r3, #32]
	stateMachineVca.tmpDelta = ADSR_TIMER_PERIOD_MS
			* stateMachineVca.tmpTargetLevel / vcaAdsr.attackTimeMs; // prepare dx for the attack phase of x(t)
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <prepareVcaEnvelopeNoteON+0x78>)
 8004d9c:	ed93 7b08 	vldr	d7, [r3, #32]
 8004da0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8004dd0 <prepareVcaEnvelopeNoteON+0x70>
 8004da4:	ee27 5b06 	vmul.f64	d5, d7, d6
 8004da8:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <prepareVcaEnvelopeNoteON+0x80>)
 8004daa:	ed93 6b00 	vldr	d6, [r3]
 8004dae:	ee85 7b06 	vdiv.f64	d7, d5, d6
	stateMachineVca.tmpDelta = ADSR_TIMER_PERIOD_MS
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <prepareVcaEnvelopeNoteON+0x78>)
 8004db4:	ed83 7b06 	vstr	d7, [r3, #24]

	stateMachineVca.machineState = ATTACK; // force vca machine state to ATTACK
 8004db8:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <prepareVcaEnvelopeNoteON+0x78>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	405fc000 	.word	0x405fc000
 8004dd0:	7b425ed0 	.word	0x7b425ed0
 8004dd4:	3feded09 	.word	0x3feded09
 8004dd8:	20000028 	.word	0x20000028
 8004ddc:	20000110 	.word	0x20000110
 8004de0:	20000008 	.word	0x20000008
 8004de4:	00000000 	.word	0x00000000

08004de8 <prepareVcaEnvelopeNoteOFF>:

/**
 * Init data for the Release phase of the VCA envelope. This is triggered by a MIDI Note Off.
 */
void prepareVcaEnvelopeNoteOFF() {
 8004de8:	b490      	push	{r4, r7}
 8004dea:	af00      	add	r7, sp, #0

	stateMachineVca.tmpTargetLevel = 0.0;
 8004dec:	4a10      	ldr	r2, [pc, #64]	; (8004e30 <prepareVcaEnvelopeNoteOFF+0x48>)
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	f04f 0400 	mov.w	r4, #0
 8004df6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	stateMachineVca.tmpDelta = - ADSR_TIMER_PERIOD_MS
			* stateMachineVca.amplitude / vcaAdsr.releaseTimeMs; // prepare dx for the R phase of x(t)
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <prepareVcaEnvelopeNoteOFF+0x48>)
 8004dfc:	ed93 7b02 	vldr	d7, [r3, #8]
 8004e00:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8004e28 <prepareVcaEnvelopeNoteOFF+0x40>
 8004e04:	ee27 5b06 	vmul.f64	d5, d7, d6
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <prepareVcaEnvelopeNoteOFF+0x4c>)
 8004e0a:	ed93 6b06 	vldr	d6, [r3, #24]
 8004e0e:	ee85 7b06 	vdiv.f64	d7, d5, d6
	stateMachineVca.tmpDelta = - ADSR_TIMER_PERIOD_MS
 8004e12:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <prepareVcaEnvelopeNoteOFF+0x48>)
 8004e14:	ed83 7b06 	vstr	d7, [r3, #24]

	stateMachineVca.machineState = RELEASE; // force vca machine state to RELEASE
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <prepareVcaEnvelopeNoteOFF+0x48>)
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	701a      	strb	r2, [r3, #0]

}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc90      	pop	{r4, r7}
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	7b425ed0 	.word	0x7b425ed0
 8004e2c:	bfeded09 	.word	0xbfeded09
 8004e30:	20000028 	.word	0x20000028
 8004e34:	20000008 	.word	0x20000008

08004e38 <updateVcaEnvelope>:
/**
 * Updates the state machines associated with the generation of the VCA ADSR envelope,
 * then write "stateMachineVca.amplitude" to the appropriate DAC
 * This method should be called from the timer handler (every ms or so)
 */
void updateVcaEnvelope() {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0

	switch (stateMachineVca.machineState) {
 8004e3c:	4b4a      	ldr	r3, [pc, #296]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	f200 808b 	bhi.w	8004f5c <updateVcaEnvelope+0x124>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <updateVcaEnvelope+0x14>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004f5b 	.word	0x08004f5b
 8004e50:	08004e5d 	.word	0x08004e5d
 8004e54:	08004edf 	.word	0x08004edf
 8004e58:	08004f1d 	.word	0x08004f1d

	case IDLE:
		break;

	case ATTACK:
		dacVcaWrite(stateMachineVca.amplitude);
 8004e5c:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004e5e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004e62:	eeb0 0b47 	vmov.f64	d0, d7
 8004e66:	f001 ffeb 	bl	8006e40 <dacVcaWrite>
		stateMachineVca.amplitude += stateMachineVca.tmpDelta;
 8004e6a:	4b3f      	ldr	r3, [pc, #252]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004e6c:	ed93 6b02 	vldr	d6, [r3, #8]
 8004e70:	4b3d      	ldr	r3, [pc, #244]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004e72:	ed93 7b06 	vldr	d7, [r3, #24]
 8004e76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004e7c:	ed83 7b02 	vstr	d7, [r3, #8]
		if (stateMachineVca.amplitude >= stateMachineVca.tmpTargetLevel) {
 8004e80:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004e82:	ed93 6b02 	vldr	d6, [r3, #8]
 8004e86:	4b38      	ldr	r3, [pc, #224]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004e88:	ed93 7b08 	vldr	d7, [r3, #32]
 8004e8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e94:	da00      	bge.n	8004e98 <updateVcaEnvelope+0x60>
					* (stateMachineVca.tmpTargetLevel
							- stateMachineVca.amplitude)
					/ (vcaAdsr.decayTimeMs); // prepare dx for the decay phase of x(t)
			stateMachineVca.machineState = DECAY;
		}
		break;
 8004e96:	e061      	b.n	8004f5c <updateVcaEnvelope+0x124>
			stateMachineVca.tmpTargetLevel *= vcaAdsr.sustainLevel; // modulate sustain level with velocity factor
 8004e98:	4b33      	ldr	r3, [pc, #204]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004e9a:	ed93 6b08 	vldr	d6, [r3, #32]
 8004e9e:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <updateVcaEnvelope+0x134>)
 8004ea0:	ed93 7b04 	vldr	d7, [r3, #16]
 8004ea4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ea8:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004eaa:	ed83 7b08 	vstr	d7, [r3, #32]
					* (stateMachineVca.tmpTargetLevel
 8004eae:	4b2e      	ldr	r3, [pc, #184]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004eb0:	ed93 6b08 	vldr	d6, [r3, #32]
							- stateMachineVca.amplitude)
 8004eb4:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004eb6:	ed93 7b02 	vldr	d7, [r3, #8]
 8004eba:	ee36 7b47 	vsub.f64	d7, d6, d7
					* (stateMachineVca.tmpTargetLevel
 8004ebe:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8004f60 <updateVcaEnvelope+0x128>
 8004ec2:	ee27 5b06 	vmul.f64	d5, d7, d6
					/ (vcaAdsr.decayTimeMs); // prepare dx for the decay phase of x(t)
 8004ec6:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <updateVcaEnvelope+0x134>)
 8004ec8:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ecc:	ee85 7b06 	vdiv.f64	d7, d5, d6
			stateMachineVca.tmpDelta = ADSR_TIMER_PERIOD_MS
 8004ed0:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004ed2:	ed83 7b06 	vstr	d7, [r3, #24]
			stateMachineVca.machineState = DECAY;
 8004ed6:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004ed8:	2202      	movs	r2, #2
 8004eda:	701a      	strb	r2, [r3, #0]
		break;
 8004edc:	e03e      	b.n	8004f5c <updateVcaEnvelope+0x124>

	case DECAY:

		if (stateMachineVca.amplitude > stateMachineVca.tmpTargetLevel) {
 8004ede:	4b22      	ldr	r3, [pc, #136]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004ee0:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ee4:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004ee6:	ed93 7b08 	vldr	d7, [r3, #32]
 8004eea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	dc00      	bgt.n	8004ef6 <updateVcaEnvelope+0xbe>
			stateMachineVca.amplitude += stateMachineVca.tmpDelta;
			dacVcaWrite(stateMachineVca.amplitude);
		}
		// else stays on sustain plateau until NOTE OFF occurs
		break;
 8004ef4:	e032      	b.n	8004f5c <updateVcaEnvelope+0x124>
			stateMachineVca.amplitude += stateMachineVca.tmpDelta;
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004ef8:	ed93 6b02 	vldr	d6, [r3, #8]
 8004efc:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004efe:	ed93 7b06 	vldr	d7, [r3, #24]
 8004f02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004f08:	ed83 7b02 	vstr	d7, [r3, #8]
			dacVcaWrite(stateMachineVca.amplitude);
 8004f0c:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004f0e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004f12:	eeb0 0b47 	vmov.f64	d0, d7
 8004f16:	f001 ff93 	bl	8006e40 <dacVcaWrite>
		break;
 8004f1a:	e01f      	b.n	8004f5c <updateVcaEnvelope+0x124>

	case RELEASE:

		if (stateMachineVca.amplitude > 0.0) { // stateMachineVca.tmpTargetLevel) {
 8004f1c:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004f1e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004f22:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2a:	dd12      	ble.n	8004f52 <updateVcaEnvelope+0x11a>
			stateMachineVca.amplitude += stateMachineVca.tmpDelta; // else stays on sustain plateau until NOTE OFF occurs
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004f2e:	ed93 6b02 	vldr	d6, [r3, #8]
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004f34:	ed93 7b06 	vldr	d7, [r3, #24]
 8004f38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004f3e:	ed83 7b02 	vstr	d7, [r3, #8]
			dacVcaWrite(stateMachineVca.amplitude);
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004f44:	ed93 7b02 	vldr	d7, [r3, #8]
 8004f48:	eeb0 0b47 	vmov.f64	d0, d7
 8004f4c:	f001 ff78 	bl	8006e40 <dacVcaWrite>
		} else
			stateMachineVca.machineState = IDLE;
		break;
 8004f50:	e004      	b.n	8004f5c <updateVcaEnvelope+0x124>
			stateMachineVca.machineState = IDLE;
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <updateVcaEnvelope+0x130>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]
		break;
 8004f58:	e000      	b.n	8004f5c <updateVcaEnvelope+0x124>
		break;
 8004f5a:	bf00      	nop
	}

}
 8004f5c:	bf00      	nop
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	7b425ed0 	.word	0x7b425ed0
 8004f64:	3feded09 	.word	0x3feded09
 8004f68:	20000028 	.word	0x20000028
 8004f6c:	20000008 	.word	0x20000008

08004f70 <prepareVcfEnvelopeNoteON>:

/**
 * Init data for the Attack phase of the VCF envelope. This is triggered by a MIDI Note On.
 */
void prepareVcfEnvelopeNoteON() {
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
	 * globalParams.vcfCutoff = 100/127
	 *
	 * => velocityMulFactor=1.0
	 */

	stateMachineVcf.tmpVelocityMulFactor = (1.0 - stateMachineVcf.velocitySensitivity) + (midiNote.velocity / 127.) * stateMachineVcf.velocitySensitivity;
 8004f74:	4b2c      	ldr	r3, [pc, #176]	; (8005028 <prepareVcfEnvelopeNoteON+0xb8>)
 8004f76:	ed93 7b06 	vldr	d7, [r3, #24]
 8004f7a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004f7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f82:	4b2a      	ldr	r3, [pc, #168]	; (800502c <prepareVcfEnvelopeNoteON+0xbc>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f8e:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8005008 <prepareVcfEnvelopeNoteON+0x98>
 8004f92:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <prepareVcfEnvelopeNoteON+0xb8>)
 8004f98:	ed93 7b06 	vldr	d7, [r3, #24]
 8004f9c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004fa0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fa4:	4b20      	ldr	r3, [pc, #128]	; (8005028 <prepareVcfEnvelopeNoteON+0xb8>)
 8004fa6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	stateMachineVcf.t = 0;
 8004faa:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <prepareVcfEnvelopeNoteON+0xb8>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	609a      	str	r2, [r3, #8]
	stateMachineVcf.tMax = (int) (vcfAdsr.attackTimeMs / (ADSR_TIMER_PERIOD_MS));
 8004fb0:	4b1f      	ldr	r3, [pc, #124]	; (8005030 <prepareVcfEnvelopeNoteON+0xc0>)
 8004fb2:	ed93 6b00 	vldr	d6, [r3]
 8004fb6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8005010 <prepareVcfEnvelopeNoteON+0xa0>
 8004fba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004fbe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004fc2:	ee17 2a90 	vmov	r2, s15
 8004fc6:	4b18      	ldr	r3, [pc, #96]	; (8005028 <prepareVcfEnvelopeNoteON+0xb8>)
 8004fc8:	60da      	str	r2, [r3, #12]
	stateMachineVcf.tmpKbdtrackingShiftFactor = (midiNote.note - 64) / 64.0* stateMachineVcf.kbdTracking * MAX_KBD_TRACKING_VCF;
 8004fca:	4b18      	ldr	r3, [pc, #96]	; (800502c <prepareVcfEnvelopeNoteON+0xbc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3b40      	subs	r3, #64	; 0x40
 8004fd0:	ee07 3a90 	vmov	s15, r3
 8004fd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004fd8:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8005018 <prepareVcfEnvelopeNoteON+0xa8>
 8004fdc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004fe0:	4b11      	ldr	r3, [pc, #68]	; (8005028 <prepareVcfEnvelopeNoteON+0xb8>)
 8004fe2:	ed93 7b08 	vldr	d7, [r3, #32]
 8004fe6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004fea:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8005020 <prepareVcfEnvelopeNoteON+0xb0>
 8004fee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	; (8005028 <prepareVcfEnvelopeNoteON+0xb8>)
 8004ff4:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
#ifndef LEGATO
	stateMachineVcf.cutoffFrequency = globalFilterParams.vcfCutoff; // starts at global cutoff value (comment out in legato mode)
#endif

	stateMachineVcf.machineState = ATTACK; // force vcf machine state to ATTACK
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <prepareVcfEnvelopeNoteON+0xb8>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
}
 8004ffe:	bf00      	nop
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	00000000 	.word	0x00000000
 800500c:	405fc000 	.word	0x405fc000
 8005010:	7b425ed0 	.word	0x7b425ed0
 8005014:	3feded09 	.word	0x3feded09
 8005018:	00000000 	.word	0x00000000
 800501c:	40500000 	.word	0x40500000
	...
 8005028:	20000070 	.word	0x20000070
 800502c:	20000110 	.word	0x20000110
 8005030:	20000050 	.word	0x20000050
 8005034:	00000000 	.word	0x00000000

08005038 <prepareVcfEnvelopeNoteOFF>:

/**
 * Init data for the Release phase of the VCA envelope. This is triggered by a MIDI Note Off.
 */
void prepareVcfEnvelopeNoteOFF() {
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0

	stateMachineVcf.t = 0;
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <prepareVcfEnvelopeNoteOFF+0x40>)
 800503e:	2200      	movs	r2, #0
 8005040:	609a      	str	r2, [r3, #8]
	stateMachineVcf.tMax = vcfAdsr.releaseTimeMs / (ADSR_TIMER_PERIOD_MS);
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <prepareVcfEnvelopeNoteOFF+0x44>)
 8005044:	ed93 6b06 	vldr	d6, [r3, #24]
 8005048:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8005070 <prepareVcfEnvelopeNoteOFF+0x38>
 800504c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005050:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005054:	ee17 2a90 	vmov	r2, s15
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <prepareVcfEnvelopeNoteOFF+0x40>)
 800505a:	60da      	str	r2, [r3, #12]
	//stateMachineVcf.tmpTargetLevel = globalFilterParams.vcfCutoff;
	//stateMachineVcf.tmpDelta = ADSR_TIMER_PERIOD_MS * (stateMachineVcf.tmpTargetLevel - stateMachineVcf.cutoffFrequency) / stateMachineVcf.tMax;

	stateMachineVcf.machineState = RELEASE; // force vcf machine state to RELEASE
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <prepareVcfEnvelopeNoteOFF+0x40>)
 800505e:	2203      	movs	r2, #3
 8005060:	701a      	strb	r2, [r3, #0]
}
 8005062:	bf00      	nop
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	f3af 8000 	nop.w
 8005070:	7b425ed0 	.word	0x7b425ed0
 8005074:	3feded09 	.word	0x3feded09
 8005078:	20000070 	.word	0x20000070
 800507c:	20000050 	.word	0x20000050

08005080 <updateVcfEnvelope>:

/**
 * Updates the state machines associated with the generation of the VCF ADSR enveloppes,
 * then write it to the appropriate DAC
 */
void updateVcfEnvelope() {
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0

	StateMachineVcf* s = &stateMachineVcf; // alias for easier reading
 8005086:	4b8a      	ldr	r3, [pc, #552]	; (80052b0 <updateVcfEnvelope+0x230>)
 8005088:	607b      	str	r3, [r7, #4]

	switch (stateMachineVcf.machineState) {
 800508a:	4b89      	ldr	r3, [pc, #548]	; (80052b0 <updateVcfEnvelope+0x230>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b03      	cmp	r3, #3
 8005090:	f200 8103 	bhi.w	800529a <updateVcfEnvelope+0x21a>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <updateVcfEnvelope+0x1c>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050ad 	.word	0x080050ad
 80050a0:	080050bb 	.word	0x080050bb
 80050a4:	08005153 	.word	0x08005153
 80050a8:	08005217 	.word	0x08005217

	case IDLE:
		s->cutoffFrequency = globalFilterParams.vcfCutoff;
 80050ac:	4b81      	ldr	r3, [pc, #516]	; (80052b4 <updateVcfEnvelope+0x234>)
 80050ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	e9c2 3404 	strd	r3, r4, [r2, #16]
		break;
 80050b8:	e0ef      	b.n	800529a <updateVcfEnvelope+0x21a>

	case ATTACK:
		s->tmpTargetLevel = s->envAmount * s->tmpVelocityMulFactor;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80050c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
		s->tmpDelta = (s->tmpTargetLevel - s->cutoffFrequency) / (s->tMax - s->t);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	ed93 7b04 	vldr	d7, [r3, #16]
 80050dc:	ee36 5b47 	vsub.f64	d5, d6, d7
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80050f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		s->cutoffFrequency += s->tmpDelta;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	ed93 6b04 	vldr	d6, [r3, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8005108:	ee36 7b07 	vadd.f64	d7, d6, d7
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	ed83 7b04 	vstr	d7, [r3, #16]
		s->t++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	609a      	str	r2, [r3, #8]
		if (s->t >= s->tMax) {
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	429a      	cmp	r2, r3
 8005126:	f2c0 80b7 	blt.w	8005298 <updateVcfEnvelope+0x218>
			// prepare dyn params for DECAY phase:
			s->t = 0;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	609a      	str	r2, [r3, #8]
			s->tMax = vcfAdsr.decayTimeMs / (ADSR_TIMER_PERIOD_MS);
 8005130:	4b61      	ldr	r3, [pc, #388]	; (80052b8 <updateVcfEnvelope+0x238>)
 8005132:	ed93 6b02 	vldr	d6, [r3, #8]
 8005136:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 80052a8 <updateVcfEnvelope+0x228>
 800513a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800513e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005142:	ee17 2a90 	vmov	r2, s15
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60da      	str	r2, [r3, #12]
			s->machineState = DECAY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005150:	e0a2      	b.n	8005298 <updateVcfEnvelope+0x218>

	case DECAY:
		if (s->t < s->tMax) {
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	429a      	cmp	r2, r3
 800515c:	da40      	bge.n	80051e0 <updateVcfEnvelope+0x160>
			s->tmpTargetLevel = globalFilterParams.vcfCutoff + (s->envAmount * s->tmpVelocityMulFactor - globalFilterParams.vcfCutoff) * vcfAdsr.sustainLevel; // modulate sustain level with velocity factor
 800515e:	4b55      	ldr	r3, [pc, #340]	; (80052b4 <updateVcfEnvelope+0x234>)
 8005160:	ed93 6b00 	vldr	d6, [r3]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005170:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005174:	4b4f      	ldr	r3, [pc, #316]	; (80052b4 <updateVcfEnvelope+0x234>)
 8005176:	ed93 7b00 	vldr	d7, [r3]
 800517a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800517e:	4b4e      	ldr	r3, [pc, #312]	; (80052b8 <updateVcfEnvelope+0x238>)
 8005180:	ed93 7b04 	vldr	d7, [r3, #16]
 8005184:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005188:	ee36 7b07 	vadd.f64	d7, d6, d7
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
			s->tmpDelta = (s->tmpTargetLevel - s->cutoffFrequency) / (s->tMax  - s->t);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	ed93 7b04 	vldr	d7, [r3, #16]
 800519e:	ee36 5b47 	vsub.f64	d5, d6, d7
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	ee07 3a90 	vmov	s15, r3
 80051b0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80051b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
			s->cutoffFrequency += s->tmpDelta;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	ed93 6b04 	vldr	d6, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80051ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	ed83 7b04 	vstr	d7, [r3, #16]
			s->t++;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	609a      	str	r2, [r3, #8]
		}
		else
			s->cutoffFrequency = globalFilterParams.vcfCutoff + (s->envAmount * s->tmpVelocityMulFactor - globalFilterParams.vcfCutoff) * vcfAdsr.sustainLevel;
		// else stays on sustain plateau until NOTE OFF occurs
		break;
 80051de:	e05c      	b.n	800529a <updateVcfEnvelope+0x21a>
			s->cutoffFrequency = globalFilterParams.vcfCutoff + (s->envAmount * s->tmpVelocityMulFactor - globalFilterParams.vcfCutoff) * vcfAdsr.sustainLevel;
 80051e0:	4b34      	ldr	r3, [pc, #208]	; (80052b4 <updateVcfEnvelope+0x234>)
 80051e2:	ed93 6b00 	vldr	d6, [r3]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80051f2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80051f6:	4b2f      	ldr	r3, [pc, #188]	; (80052b4 <updateVcfEnvelope+0x234>)
 80051f8:	ed93 7b00 	vldr	d7, [r3]
 80051fc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005200:	4b2d      	ldr	r3, [pc, #180]	; (80052b8 <updateVcfEnvelope+0x238>)
 8005202:	ed93 7b04 	vldr	d7, [r3, #16]
 8005206:	ee25 7b07 	vmul.f64	d7, d5, d7
 800520a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	ed83 7b04 	vstr	d7, [r3, #16]
		break;
 8005214:	e041      	b.n	800529a <updateVcfEnvelope+0x21a>

	case RELEASE:
		if (s->t < s->tMax) {
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	429a      	cmp	r2, r3
 8005220:	da30      	bge.n	8005284 <updateVcfEnvelope+0x204>
			s->tmpTargetLevel = globalFilterParams.vcfCutoff; // allow for realtime editing of vcf cutoff!
 8005222:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <updateVcfEnvelope+0x234>)
 8005224:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			s->tmpDelta = ADSR_TIMER_PERIOD_MS * (s->tmpTargetLevel - s->cutoffFrequency) / (s->tMax - s->t);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	ed93 7b04 	vldr	d7, [r3, #16]
 800523a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800523e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80052a8 <updateVcfEnvelope+0x228>
 8005242:	ee27 5b06 	vmul.f64	d5, d7, d6
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	ee07 3a90 	vmov	s15, r3
 8005254:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005258:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
			s->cutoffFrequency += s->tmpDelta; // else go back to IDLE state
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	ed93 6b04 	vldr	d6, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800526e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	ed83 7b04 	vstr	d7, [r3, #16]
			s->t++;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	609a      	str	r2, [r3, #8]
		}
		else {
			s->machineState = IDLE;
			s->cutoffFrequency = globalFilterParams.vcfCutoff;
		}
		break;
 8005282:	e00a      	b.n	800529a <updateVcfEnvelope+0x21a>
			s->machineState = IDLE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
			s->cutoffFrequency = globalFilterParams.vcfCutoff;
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <updateVcfEnvelope+0x234>)
 800528c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	e9c2 3404 	strd	r3, r4, [r2, #16]
		break;
 8005296:	e000      	b.n	800529a <updateVcfEnvelope+0x21a>
		break;
 8005298:	bf00      	nop
	}
	updateVcfCutoff();
 800529a:	f001 fe89 	bl	8006fb0 <updateVcfCutoff>

}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	bf00      	nop
 80052a8:	7b425ed0 	.word	0x7b425ed0
 80052ac:	3feded09 	.word	0x3feded09
 80052b0:	20000070 	.word	0x20000070
 80052b4:	200001a0 	.word	0x200001a0
 80052b8:	20000050 	.word	0x20000050
 80052bc:	00000000 	.word	0x00000000

080052c0 <setVcaAdsrAttack>:

void setVcaAdsrAttack(uint8_t value) {
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
	vcaAdsr.attackTimeMs = ((value + 1) / 127.) * MAX_ATTACK_TIME_VCA;
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	3301      	adds	r3, #1
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80052d6:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80052f8 <setVcaAdsrAttack+0x38>
 80052da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80052de:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8005300 <setVcaAdsrAttack+0x40>
 80052e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <setVcaAdsrAttack+0x48>)
 80052e8:	ed83 7b00 	vstr	d7, [r3]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	00000000 	.word	0x00000000
 80052fc:	405fc000 	.word	0x405fc000
 8005300:	00000000 	.word	0x00000000
 8005304:	408f4000 	.word	0x408f4000
 8005308:	20000008 	.word	0x20000008
 800530c:	00000000 	.word	0x00000000

08005310 <setVcaAdsrDecay>:

void setVcaAdsrDecay(uint8_t value) {
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	71fb      	strb	r3, [r7, #7]
	vcaAdsr.decayTimeMs = ((value + 1) / 127.) * MAX_DECAY_TIME_VCA;
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	3301      	adds	r3, #1
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005326:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8005348 <setVcaAdsrDecay+0x38>
 800532a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800532e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8005350 <setVcaAdsrDecay+0x40>
 8005332:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <setVcaAdsrDecay+0x48>)
 8005338:	ed83 7b02 	vstr	d7, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	00000000 	.word	0x00000000
 800534c:	405fc000 	.word	0x405fc000
 8005350:	00000000 	.word	0x00000000
 8005354:	408f4000 	.word	0x408f4000
 8005358:	20000008 	.word	0x20000008
 800535c:	00000000 	.word	0x00000000

08005360 <setVcaAdsrSustain>:

void setVcaAdsrSustain(uint8_t value) {
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	71fb      	strb	r3, [r7, #7]
	vcaAdsr.sustainLevel = (value / 127.) * MAX_SUSTAIN_LVL_VCA;
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005374:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8005390 <setVcaAdsrSustain+0x30>
 8005378:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800537c:	4b06      	ldr	r3, [pc, #24]	; (8005398 <setVcaAdsrSustain+0x38>)
 800537e:	ed83 7b04 	vstr	d7, [r3, #16]
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	00000000 	.word	0x00000000
 8005394:	405fc000 	.word	0x405fc000
 8005398:	20000008 	.word	0x20000008
 800539c:	00000000 	.word	0x00000000

080053a0 <setVcaAdsrRelease>:

void setVcaAdsrRelease(uint8_t value) {
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
	vcaAdsr.releaseTimeMs = ((value + 1) / 127.) * MAX_RELEASE_TIME_VCA;
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	3301      	adds	r3, #1
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80053b6:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80053d8 <setVcaAdsrRelease+0x38>
 80053ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80053be:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80053e0 <setVcaAdsrRelease+0x40>
 80053c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053c6:	4b08      	ldr	r3, [pc, #32]	; (80053e8 <setVcaAdsrRelease+0x48>)
 80053c8:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	00000000 	.word	0x00000000
 80053dc:	405fc000 	.word	0x405fc000
 80053e0:	00000000 	.word	0x00000000
 80053e4:	40b38800 	.word	0x40b38800
 80053e8:	20000008 	.word	0x20000008
 80053ec:	00000000 	.word	0x00000000

080053f0 <setVcaVelocitySensitivity>:

void setVcaVelocitySensitivity(uint8_t value) {
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
	stateMachineVca.velocitySensitivity = MAX_VELOCITY_SENSITIVITY * value / 127.;
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	ee07 3a90 	vmov	s15, r3
 8005400:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005404:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8005420 <setVcaVelocitySensitivity+0x30>
 8005408:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <setVcaVelocitySensitivity+0x38>)
 800540e:	ed83 7b04 	vstr	d7, [r3, #16]
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	00000000 	.word	0x00000000
 8005424:	405fc000 	.word	0x405fc000
 8005428:	20000028 	.word	0x20000028
 800542c:	00000000 	.word	0x00000000

08005430 <setVcfAdsrAttack>:

void setVcfAdsrAttack(uint8_t value) {
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	71fb      	strb	r3, [r7, #7]
	vcfAdsr.attackTimeMs = ((value + 1) / 127.) * MAX_ATTACK_TIME_VCF;
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	3301      	adds	r3, #1
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005446:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8005468 <setVcfAdsrAttack+0x38>
 800544a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800544e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8005470 <setVcfAdsrAttack+0x40>
 8005452:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005456:	4b08      	ldr	r3, [pc, #32]	; (8005478 <setVcfAdsrAttack+0x48>)
 8005458:	ed83 7b00 	vstr	d7, [r3]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	00000000 	.word	0x00000000
 800546c:	405fc000 	.word	0x405fc000
 8005470:	00000000 	.word	0x00000000
 8005474:	408f4000 	.word	0x408f4000
 8005478:	20000050 	.word	0x20000050
 800547c:	00000000 	.word	0x00000000

08005480 <setVcfAdsrDecay>:

void setVcfAdsrDecay(uint8_t value) {
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	71fb      	strb	r3, [r7, #7]
	vcfAdsr.decayTimeMs = ((value + 1) / 127.) * MAX_DECAY_TIME_VCF;
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	3301      	adds	r3, #1
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005496:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80054b8 <setVcfAdsrDecay+0x38>
 800549a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800549e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80054c0 <setVcfAdsrDecay+0x40>
 80054a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80054a6:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <setVcfAdsrDecay+0x48>)
 80054a8:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	00000000 	.word	0x00000000
 80054bc:	405fc000 	.word	0x405fc000
 80054c0:	00000000 	.word	0x00000000
 80054c4:	408f4000 	.word	0x408f4000
 80054c8:	20000050 	.word	0x20000050
 80054cc:	00000000 	.word	0x00000000

080054d0 <setVcfAdsrSustain>:

void setVcfAdsrSustain(uint8_t value) {
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
	vcfAdsr.sustainLevel = (value / 127.) * MAX_SUSTAIN_LVL_VCF;
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80054e4:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8005500 <setVcfAdsrSustain+0x30>
 80054e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <setVcfAdsrSustain+0x38>)
 80054ee:	ed83 7b04 	vstr	d7, [r3, #16]
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	00000000 	.word	0x00000000
 8005504:	405fc000 	.word	0x405fc000
 8005508:	20000050 	.word	0x20000050
 800550c:	00000000 	.word	0x00000000

08005510 <setVcfAdsrRelease>:

void setVcfAdsrRelease(uint8_t value) {
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
	vcfAdsr.releaseTimeMs = ((value + 1) / 127.) * MAX_RELEASE_TIME_VCF;
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	3301      	adds	r3, #1
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005526:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8005548 <setVcfAdsrRelease+0x38>
 800552a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800552e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8005550 <setVcfAdsrRelease+0x40>
 8005532:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <setVcfAdsrRelease+0x48>)
 8005538:	ed83 7b06 	vstr	d7, [r3, #24]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	00000000 	.word	0x00000000
 800554c:	405fc000 	.word	0x405fc000
 8005550:	00000000 	.word	0x00000000
 8005554:	40b38800 	.word	0x40b38800
 8005558:	20000050 	.word	0x20000050
 800555c:	00000000 	.word	0x00000000

08005560 <setVcfVelocitySensitivity>:

void setVcfVelocitySensitivity(uint8_t value) {
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
	stateMachineVcf.velocitySensitivity = MAX_VELOCITY_SENSITIVITY * value / 127.;
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	ee07 3a90 	vmov	s15, r3
 8005570:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8005574:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8005590 <setVcfVelocitySensitivity+0x30>
 8005578:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <setVcfVelocitySensitivity+0x38>)
 800557e:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	00000000 	.word	0x00000000
 8005594:	405fc000 	.word	0x405fc000
 8005598:	20000070 	.word	0x20000070

0800559c <switchRedLEDOn>:

void switchRedLED(GPIO_PinState state){
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, state);
}

void switchRedLEDOn(){
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80055a0:	2201      	movs	r2, #1
 80055a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055a6:	4802      	ldr	r0, [pc, #8]	; (80055b0 <switchRedLEDOn+0x14>)
 80055a8:	f7fb fb90 	bl	8000ccc <HAL_GPIO_WritePin>
}
 80055ac:	bf00      	nop
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40020400 	.word	0x40020400

080055b4 <switchRedLEDOff>:

void switchRedLEDOff(){
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055be:	4802      	ldr	r0, [pc, #8]	; (80055c8 <switchRedLEDOff+0x14>)
 80055c0:	f7fb fb84 	bl	8000ccc <HAL_GPIO_WritePin>
}
 80055c4:	bf00      	nop
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40020400 	.word	0x40020400

080055cc <toggleRedLED>:

void toggleRedLED(){
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 80055d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055d4:	4802      	ldr	r0, [pc, #8]	; (80055e0 <toggleRedLED+0x14>)
 80055d6:	f7fb fb92 	bl	8000cfe <HAL_GPIO_TogglePin>
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40020400 	.word	0x40020400

080055e4 <toggleBlueLED>:

void switchBlueLEDOff(){
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
}

void toggleBlueLED(){
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80055e8:	2180      	movs	r1, #128	; 0x80
 80055ea:	4802      	ldr	r0, [pc, #8]	; (80055f4 <toggleBlueLED+0x10>)
 80055ec:	f7fb fb87 	bl	8000cfe <HAL_GPIO_TogglePin>
}
 80055f0:	bf00      	nop
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40020400 	.word	0x40020400

080055f8 <dacTIMCallback>:
 * BUT since after each SPI bus write we must wait (around 16 * 1/3MHz = 5us) for the transfer to complete before writing a new word,
 * it'd be a waste of time... so there's a clever trick that consists in writing one distinct enveloppe at each timer call
 * (since there are 20 timer calls b/w every envelope update, we could update up to 20 distinct enveloppes this way!
 * of course there are only 15 available DAC's on the board, so we do nothing during the last 5 calls anyway)
 */
void dacTIMCallback(){
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0

		// white noise for the drum machine :
		/* debug 2/4/19 int noise = (int)(4096.0 * rand() / RAND_MAX);
		dacWrite(noise, DAC_NOISE);*/

		dacTIMUpdateTask f = dacTIMUpdateTaskList[dacTick];
 80055fe:	4b08      	ldr	r3, [pc, #32]	; (8005620 <dacTIMCallback+0x28>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a08      	ldr	r2, [pc, #32]	; (8005624 <dacTIMCallback+0x2c>)
 8005604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005608:	607b      	str	r3, [r7, #4]
		if (f != NULL) f();
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <dacTIMCallback+0x1c>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4798      	blx	r3
		incDacTick();
 8005614:	f000 f808 	bl	8005628 <incDacTick>

			// todo : mixers modulation, etc
		}*/


}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000860 	.word	0x20000860
 8005624:	200000c0 	.word	0x200000c0

08005628 <incDacTick>:

void incDacTick(){
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	dacTick++;
 800562c:	4b08      	ldr	r3, [pc, #32]	; (8005650 <incDacTick+0x28>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3301      	adds	r3, #1
 8005632:	4a07      	ldr	r2, [pc, #28]	; (8005650 <incDacTick+0x28>)
 8005634:	6013      	str	r3, [r2, #0]
	if (dacTick == ADSR_TIMER_PERIOD_FACTOR) {
 8005636:	4b06      	ldr	r3, [pc, #24]	; (8005650 <incDacTick+0x28>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b14      	cmp	r3, #20
 800563c:	d102      	bne.n	8005644 <incDacTick+0x1c>
		dacTick = 0;
 800563e:	4b04      	ldr	r3, [pc, #16]	; (8005650 <incDacTick+0x28>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
	}
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000860 	.word	0x20000860
 8005654:	00000000 	.word	0x00000000

08005658 <initSynthParams>:


/**
 * Initialize synth parameters and DAC values
 */
void initSynthParams(){
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0

	// wavetable init:
	//int i;
	//for (i=0; i<WAVE_TABLE_LEN; i++) waveTable[i] = 1000 * (1.0 + sin(0.0628 * i));

	dacVcaWrite(0.0); // makes sure we don't hear anything
 800565c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8005678 <initSynthParams+0x20>
 8005660:	f001 fbee 	bl	8006e40 <dacVcaWrite>
	HAL_Delay(1); // wait 1ms for transfer to complete (could be lower but HAL_Delay can't go below)
 8005664:	2001      	movs	r0, #1
 8005666:	f7fb f819 	bl	800069c <HAL_Delay>

	initVcf();
 800566a:	f001 fc8f 	bl	8006f8c <initVcf>
	initVco();
 800566e:	f001 fcc5 	bl	8006ffc <initVco>

}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
	...

08005680 <blueButtonActionPerformedCallback>:

/**
 * Called when the blue button gets pressed or released.
 */
void blueButtonActionPerformedCallback(GPIO_PinState  state){
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]

	if (state == GPIO_PIN_SET){ // note ON
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d11c      	bne.n	80056ca <blueButtonActionPerformedCallback+0x4a>
		int randomNote = rand() % 20 + 34;
 8005690:	f002 fb94 	bl	8007dbc <rand>
 8005694:	4601      	mov	r1, r0
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <blueButtonActionPerformedCallback+0x5c>)
 8005698:	fb83 2301 	smull	r2, r3, r3, r1
 800569c:	10da      	asrs	r2, r3, #3
 800569e:	17cb      	asrs	r3, r1, #31
 80056a0:	1ad2      	subs	r2, r2, r3
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	1aca      	subs	r2, r1, r3
 80056ac:	f102 0322 	add.w	r3, r2, #34	; 0x22
 80056b0:	60fb      	str	r3, [r7, #12]
		printf("rd note=%d\n", randomNote);
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	480a      	ldr	r0, [pc, #40]	; (80056e0 <blueButtonActionPerformedCallback+0x60>)
 80056b6:	f002 faf1 	bl	8007c9c <iprintf>
		processIncomingMidiMessage(NOTE_ON, randomNote,100);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2264      	movs	r2, #100	; 0x64
 80056c0:	4619      	mov	r1, r3
 80056c2:	2090      	movs	r0, #144	; 0x90
 80056c4:	f001 f838 	bl	8006738 <processIncomingMidiMessage>
	}
	else { // note OFF
		processIncomingMidiMessage(NOTE_OFF, 40, 0);
	}
}
 80056c8:	e004      	b.n	80056d4 <blueButtonActionPerformedCallback+0x54>
		processIncomingMidiMessage(NOTE_OFF, 40, 0);
 80056ca:	2200      	movs	r2, #0
 80056cc:	2128      	movs	r1, #40	; 0x28
 80056ce:	2080      	movs	r0, #128	; 0x80
 80056d0:	f001 f832 	bl	8006738 <processIncomingMidiMessage>
}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	66666667 	.word	0x66666667
 80056e0:	08009830 	.word	0x08009830

080056e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */

	// make alias to ease code reading and future changes:
	hspiDacs = &hspi5;
 80056ea:	4b23      	ldr	r3, [pc, #140]	; (8005778 <main+0x94>)
 80056ec:	4a23      	ldr	r2, [pc, #140]	; (800577c <main+0x98>)
 80056ee:	601a      	str	r2, [r3, #0]
	hspiMidi = &hspi3;
 80056f0:	4b23      	ldr	r3, [pc, #140]	; (8005780 <main+0x9c>)
 80056f2:	4a24      	ldr	r2, [pc, #144]	; (8005784 <main+0xa0>)
 80056f4:	601a      	str	r2, [r3, #0]
	htimDacs = &htim1;
 80056f6:	4b24      	ldr	r3, [pc, #144]	; (8005788 <main+0xa4>)
 80056f8:	4a24      	ldr	r2, [pc, #144]	; (800578c <main+0xa8>)
 80056fa:	601a      	str	r2, [r3, #0]
	htimCalib = &htim2;
 80056fc:	4b24      	ldr	r3, [pc, #144]	; (8005790 <main+0xac>)
 80056fe:	4a25      	ldr	r2, [pc, #148]	; (8005794 <main+0xb0>)
 8005700:	601a      	str	r2, [r3, #0]
	huartMidi = &huart5;  // 31250 bauds
 8005702:	4b25      	ldr	r3, [pc, #148]	; (8005798 <main+0xb4>)
 8005704:	4a25      	ldr	r2, [pc, #148]	; (800579c <main+0xb8>)
 8005706:	601a      	str	r2, [r3, #0]
	huartSTlink = &huart3; // 115200 bauds
 8005708:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <main+0xbc>)
 800570a:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <main+0xc0>)
 800570c:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800570e:	f7fa ff67 	bl	80005e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005712:	f000 f84d 	bl	80057b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005716:	f000 fad9 	bl	8005ccc <MX_GPIO_Init>
	MX_I2C1_Init();
 800571a:	f000 f8e5 	bl	80058e8 <MX_I2C1_Init>
	MX_SPI3_Init();
 800571e:	f000 f923 	bl	8005968 <MX_SPI3_Init>
	MX_TIM1_Init();
 8005722:	f000 f999 	bl	8005a58 <MX_TIM1_Init>
	MX_TIM2_Init();
 8005726:	f000 f9e9 	bl	8005afc <MX_TIM2_Init>
	MX_SPI5_Init();
 800572a:	f000 f957 	bl	80059dc <MX_SPI5_Init>
	MX_UART5_Init();
 800572e:	f000 fa6d 	bl	8005c0c <MX_UART5_Init>
	MX_USART3_UART_Init();
 8005732:	f000 fa9b 	bl	8005c6c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	initSynthParams(); // be sure to do this BEFORE starting htimEnveloppes!
 8005736:	f7ff ff8f 	bl	8005658 <initSynthParams>
	startAdsrTIM(); // start timer responsible for updating ADSR enveloppes and writing to DACs
 800573a:	f000 fc8b 	bl	8006054 <startAdsrTIM>
	HAL_UART_Receive_IT(huartSTlink, rxUartSTlinkBuff, 3); // starts listening to incoming message over ST-link USB virtual com port
 800573e:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <main+0xbc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2203      	movs	r2, #3
 8005744:	4918      	ldr	r1, [pc, #96]	; (80057a8 <main+0xc4>)
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe fc86 	bl	8004058 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	int i = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	607b      	str	r3, [r7, #4]
		//testDacSelect();
		//testDacWriteSPI();
		//testScale();
		//testVcf();
		//testGPIOVcfVco();
		HAL_Delay(1000);
 8005750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005754:	f7fa ffa2 	bl	800069c <HAL_Delay>
		toggleBlueLED();
 8005758:	f7ff ff44 	bl	80055e4 <toggleBlueLED>
		printf("%d\n", i);
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4813      	ldr	r0, [pc, #76]	; (80057ac <main+0xc8>)
 8005760:	f002 fa9c 	bl	8007c9c <iprintf>

		i+=63;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	333f      	adds	r3, #63	; 0x3f
 8005768:	607b      	str	r3, [r7, #4]
		if (i>127)i=0;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b7f      	cmp	r3, #127	; 0x7f
 800576e:	ddef      	ble.n	8005750 <main+0x6c>
 8005770:	2300      	movs	r3, #0
 8005772:	607b      	str	r3, [r7, #4]
		HAL_Delay(1000);
 8005774:	e7ec      	b.n	8005750 <main+0x6c>
 8005776:	bf00      	nop
 8005778:	200009bc 	.word	0x200009bc
 800577c:	20000880 	.word	0x20000880
 8005780:	20000aa4 	.word	0x20000aa4
 8005784:	200009c0 	.word	0x200009c0
 8005788:	2000087c 	.word	0x2000087c
 800578c:	20000aac 	.word	0x20000aac
 8005790:	20000aec 	.word	0x20000aec
 8005794:	20000af0 	.word	0x20000af0
 8005798:	20000aa8 	.word	0x20000aa8
 800579c:	20000a24 	.word	0x20000a24
 80057a0:	200009b8 	.word	0x200009b8
 80057a4:	200008e4 	.word	0x200008e4
 80057a8:	200009b0 	.word	0x200009b0
 80057ac:	0800983c 	.word	0x0800983c

080057b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b0b8      	sub	sp, #224	; 0xe0
 80057b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80057b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80057ba:	2234      	movs	r2, #52	; 0x34
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f002 fa64 	bl	8007c8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80057c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80057d4:	f107 0308 	add.w	r3, r7, #8
 80057d8:	2290      	movs	r2, #144	; 0x90
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f002 fa55 	bl	8007c8c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80057e2:	4b3f      	ldr	r3, [pc, #252]	; (80058e0 <SystemClock_Config+0x130>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	4a3e      	ldr	r2, [pc, #248]	; (80058e0 <SystemClock_Config+0x130>)
 80057e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ec:	6413      	str	r3, [r2, #64]	; 0x40
 80057ee:	4b3c      	ldr	r3, [pc, #240]	; (80058e0 <SystemClock_Config+0x130>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f6:	607b      	str	r3, [r7, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80057fa:	4b3a      	ldr	r3, [pc, #232]	; (80058e4 <SystemClock_Config+0x134>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a39      	ldr	r2, [pc, #228]	; (80058e4 <SystemClock_Config+0x134>)
 8005800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	4b37      	ldr	r3, [pc, #220]	; (80058e4 <SystemClock_Config+0x134>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8005812:	2303      	movs	r3, #3
 8005814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800581c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005820:	2301      	movs	r3, #1
 8005822:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005826:	2310      	movs	r3, #16
 8005828:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800582c:	2302      	movs	r3, #2
 800582e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 8;
 800583a:	2308      	movs	r3, #8
 800583c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8005840:	23d8      	movs	r3, #216	; 0xd8
 8005842:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005846:	2302      	movs	r3, #2
 8005848:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800584c:	2302      	movs	r3, #2
 800584e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005852:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005856:	4618      	mov	r0, r3
 8005858:	f7fb fbfc 	bl	8001054 <HAL_RCC_OscConfig>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <SystemClock_Config+0xb6>
		Error_Handler();
 8005862:	f000 fc93 	bl	800618c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8005866:	f7fb fba5 	bl	8000fb4 <HAL_PWREx_EnableOverDrive>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <SystemClock_Config+0xc4>
		Error_Handler();
 8005870:	f000 fc8c 	bl	800618c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005874:	230f      	movs	r3, #15
 8005876:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800587a:	2302      	movs	r3, #2
 800587c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005880:	2300      	movs	r3, #0
 8005882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800588a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800588e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8005896:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800589a:	2107      	movs	r1, #7
 800589c:	4618      	mov	r0, r3
 800589e:	f7fb fe4b 	bl	8001538 <HAL_RCC_ClockConfig>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <SystemClock_Config+0xfc>
		Error_Handler();
 80058a8:	f000 fc70 	bl	800618c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 80058ac:	f44f 438a 	mov.w	r3, #17664	; 0x4500
 80058b0:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_UART5 | RCC_PERIPHCLK_I2C1;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_HSI;
 80058b2:	2320      	movs	r3, #32
 80058b4:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_HSI;
 80058b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ba:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80058bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80058c2:	f107 0308 	add.w	r3, r7, #8
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fc f828 	bl	800191c <HAL_RCCEx_PeriphCLKConfig>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <SystemClock_Config+0x126>
		Error_Handler();
 80058d2:	f000 fc5b 	bl	800618c <Error_Handler>
	}
}
 80058d6:	bf00      	nop
 80058d8:	37e0      	adds	r7, #224	; 0xe0
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40023800 	.word	0x40023800
 80058e4:	40007000 	.word	0x40007000

080058e8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80058ec:	4b1b      	ldr	r3, [pc, #108]	; (800595c <MX_I2C1_Init+0x74>)
 80058ee:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <MX_I2C1_Init+0x78>)
 80058f0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
 80058f2:	4b1a      	ldr	r3, [pc, #104]	; (800595c <MX_I2C1_Init+0x74>)
 80058f4:	4a1b      	ldr	r2, [pc, #108]	; (8005964 <MX_I2C1_Init+0x7c>)
 80058f6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80058f8:	4b18      	ldr	r3, [pc, #96]	; (800595c <MX_I2C1_Init+0x74>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058fe:	4b17      	ldr	r3, [pc, #92]	; (800595c <MX_I2C1_Init+0x74>)
 8005900:	2201      	movs	r2, #1
 8005902:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005904:	4b15      	ldr	r3, [pc, #84]	; (800595c <MX_I2C1_Init+0x74>)
 8005906:	2200      	movs	r2, #0
 8005908:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800590a:	4b14      	ldr	r3, [pc, #80]	; (800595c <MX_I2C1_Init+0x74>)
 800590c:	2200      	movs	r2, #0
 800590e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005910:	4b12      	ldr	r3, [pc, #72]	; (800595c <MX_I2C1_Init+0x74>)
 8005912:	2200      	movs	r2, #0
 8005914:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005916:	4b11      	ldr	r3, [pc, #68]	; (800595c <MX_I2C1_Init+0x74>)
 8005918:	2200      	movs	r2, #0
 800591a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800591c:	4b0f      	ldr	r3, [pc, #60]	; (800595c <MX_I2C1_Init+0x74>)
 800591e:	2200      	movs	r2, #0
 8005920:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005922:	480e      	ldr	r0, [pc, #56]	; (800595c <MX_I2C1_Init+0x74>)
 8005924:	f7fb fa1e 	bl	8000d64 <HAL_I2C_Init>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800592e:	f000 fc2d 	bl	800618c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8005932:	2100      	movs	r1, #0
 8005934:	4809      	ldr	r0, [pc, #36]	; (800595c <MX_I2C1_Init+0x74>)
 8005936:	f7fb faa5 	bl	8000e84 <HAL_I2CEx_ConfigAnalogFilter>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8005940:	f000 fc24 	bl	800618c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8005944:	2100      	movs	r1, #0
 8005946:	4805      	ldr	r0, [pc, #20]	; (800595c <MX_I2C1_Init+0x74>)
 8005948:	f7fb fae7 	bl	8000f1a <HAL_I2CEx_ConfigDigitalFilter>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8005952:	f000 fc1b 	bl	800618c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8005956:	bf00      	nop
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000964 	.word	0x20000964
 8005960:	40005400 	.word	0x40005400
 8005964:	00303d5b 	.word	0x00303d5b

08005968 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <MX_SPI3_Init+0x6c>)
 800596e:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <MX_SPI3_Init+0x70>)
 8005970:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 8005972:	4b18      	ldr	r3, [pc, #96]	; (80059d4 <MX_SPI3_Init+0x6c>)
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8005978:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <MX_SPI3_Init+0x6c>)
 800597a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800597e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8005980:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <MX_SPI3_Init+0x6c>)
 8005982:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005986:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005988:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <MX_SPI3_Init+0x6c>)
 800598a:	2200      	movs	r2, #0
 800598c:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800598e:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <MX_SPI3_Init+0x6c>)
 8005990:	2200      	movs	r2, #0
 8005992:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8005994:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <MX_SPI3_Init+0x6c>)
 8005996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800599a:	619a      	str	r2, [r3, #24]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <MX_SPI3_Init+0x6c>)
 800599e:	2200      	movs	r2, #0
 80059a0:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <MX_SPI3_Init+0x6c>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <MX_SPI3_Init+0x6c>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 80059ae:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <MX_SPI3_Init+0x6c>)
 80059b0:	2207      	movs	r2, #7
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80059b4:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <MX_SPI3_Init+0x6c>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80059ba:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <MX_SPI3_Init+0x6c>)
 80059bc:	2200      	movs	r2, #0
 80059be:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80059c0:	4804      	ldr	r0, [pc, #16]	; (80059d4 <MX_SPI3_Init+0x6c>)
 80059c2:	f7fc fbd1 	bl	8002168 <HAL_SPI_Init>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <MX_SPI3_Init+0x68>
		Error_Handler();
 80059cc:	f000 fbde 	bl	800618c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80059d0:	bf00      	nop
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	200009c0 	.word	0x200009c0
 80059d8:	40003c00 	.word	0x40003c00

080059dc <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <MX_SPI5_Init+0x74>)
 80059e2:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <MX_SPI5_Init+0x78>)
 80059e4:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <MX_SPI5_Init+0x74>)
 80059e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80059ec:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80059ee:	4b18      	ldr	r3, [pc, #96]	; (8005a50 <MX_SPI5_Init+0x74>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80059f4:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <MX_SPI5_Init+0x74>)
 80059f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80059fa:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80059fc:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <MX_SPI5_Init+0x74>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8005a08:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0e:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005a10:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a12:	2220      	movs	r2, #32
 8005a14:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005a16:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 7;
 8005a28:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a2a:	2207      	movs	r2, #7
 8005a2c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005a2e:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a36:	2208      	movs	r2, #8
 8005a38:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8005a3a:	4805      	ldr	r0, [pc, #20]	; (8005a50 <MX_SPI5_Init+0x74>)
 8005a3c:	f7fc fb94 	bl	8002168 <HAL_SPI_Init>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <MX_SPI5_Init+0x6e>
		Error_Handler();
 8005a46:	f000 fba1 	bl	800618c <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8005a4a:	bf00      	nop
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000880 	.word	0x20000880
 8005a54:	40015000 	.word	0x40015000

08005a58 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005a5e:	f107 0310 	add.w	r3, r7, #16
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	609a      	str	r2, [r3, #8]
 8005a6a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005a6c:	1d3b      	adds	r3, r7, #4
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	605a      	str	r2, [r3, #4]
 8005a74:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8005a76:	4b1f      	ldr	r3, [pc, #124]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005a78:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <MX_TIM1_Init+0xa0>)
 8005a7a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100;
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005a7e:	2264      	movs	r2, #100	; 0x64
 8005a80:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a82:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 50;
 8005a88:	4b1a      	ldr	r3, [pc, #104]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005a8a:	2232      	movs	r2, #50	; 0x32
 8005a8c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a8e:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8005a94:	4b17      	ldr	r3, [pc, #92]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a9a:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8005aa0:	4814      	ldr	r0, [pc, #80]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005aa2:	f7fd facd 	bl	8003040 <HAL_TIM_Base_Init>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_TIM1_Init+0x58>
		Error_Handler();
 8005aac:	f000 fb6e 	bl	800618c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ab4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8005ab6:	f107 0310 	add.w	r3, r7, #16
 8005aba:	4619      	mov	r1, r3
 8005abc:	480d      	ldr	r0, [pc, #52]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005abe:	f7fd fe0f 	bl	80036e0 <HAL_TIM_ConfigClockSource>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <MX_TIM1_Init+0x74>
		Error_Handler();
 8005ac8:	f000 fb60 	bl	800618c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005acc:	2300      	movs	r3, #0
 8005ace:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8005ad8:	1d3b      	adds	r3, r7, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	4805      	ldr	r0, [pc, #20]	; (8005af4 <MX_TIM1_Init+0x9c>)
 8005ade:	f7fe f961 	bl	8003da4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <MX_TIM1_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 8005ae8:	f000 fb50 	bl	800618c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8005aec:	bf00      	nop
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000aac 	.word	0x20000aac
 8005af8:	40010000 	.word	0x40010000

08005afc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005b02:	f107 0320 	add.w	r3, r7, #32
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	605a      	str	r2, [r3, #4]
 8005b0c:	609a      	str	r2, [r3, #8]
 8005b0e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005b10:	f107 0314 	add.w	r3, r7, #20
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8005b1c:	1d3b      	adds	r3, r7, #4
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	605a      	str	r2, [r3, #4]
 8005b24:	609a      	str	r2, [r3, #8]
 8005b26:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8005b28:	4b36      	ldr	r3, [pc, #216]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b2e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 8005b30:	4b34      	ldr	r3, [pc, #208]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b32:	220f      	movs	r2, #15
 8005b34:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b36:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000000000;
 8005b3c:	4b31      	ldr	r3, [pc, #196]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b3e:	4a32      	ldr	r2, [pc, #200]	; (8005c08 <MX_TIM2_Init+0x10c>)
 8005b40:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b42:	4b30      	ldr	r3, [pc, #192]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b48:	4b2e      	ldr	r3, [pc, #184]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8005b4e:	482d      	ldr	r0, [pc, #180]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b50:	f7fd fa76 	bl	8003040 <HAL_TIM_Base_Init>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <MX_TIM2_Init+0x62>
		Error_Handler();
 8005b5a:	f000 fb17 	bl	800618c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b62:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8005b64:	f107 0320 	add.w	r3, r7, #32
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4826      	ldr	r0, [pc, #152]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b6c:	f7fd fdb8 	bl	80036e0 <HAL_TIM_ConfigClockSource>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8005b76:	f000 fb09 	bl	800618c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8005b7a:	4822      	ldr	r0, [pc, #136]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b7c:	f7fd fae1 	bl	8003142 <HAL_TIM_IC_Init>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <MX_TIM2_Init+0x8e>
		Error_Handler();
 8005b86:	f000 fb01 	bl	800618c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8005b92:	f107 0314 	add.w	r3, r7, #20
 8005b96:	4619      	mov	r1, r3
 8005b98:	481a      	ldr	r0, [pc, #104]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005b9a:	f7fe f903 	bl	8003da4 <HAL_TIMEx_MasterConfigSynchronization>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8005ba4:	f000 faf2 	bl	800618c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005bac:	2301      	movs	r3, #1
 8005bae:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV8;
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 15;
 8005bb4:	230f      	movs	r3, #15
 8005bb6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	2200      	movs	r2, #0
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4811      	ldr	r0, [pc, #68]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005bc0:	f7fd fcf1 	bl	80035a6 <HAL_TIM_IC_ConfigChannel>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <MX_TIM2_Init+0xd2>
		Error_Handler();
 8005bca:	f000 fadf 	bl	800618c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8005bce:	1d3b      	adds	r3, r7, #4
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	480b      	ldr	r0, [pc, #44]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005bd6:	f7fd fce6 	bl	80035a6 <HAL_TIM_IC_ConfigChannel>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <MX_TIM2_Init+0xe8>
		Error_Handler();
 8005be0:	f000 fad4 	bl	800618c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8005be4:	1d3b      	adds	r3, r7, #4
 8005be6:	220c      	movs	r2, #12
 8005be8:	4619      	mov	r1, r3
 8005bea:	4806      	ldr	r0, [pc, #24]	; (8005c04 <MX_TIM2_Init+0x108>)
 8005bec:	f7fd fcdb 	bl	80035a6 <HAL_TIM_IC_ConfigChannel>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <MX_TIM2_Init+0xfe>
		Error_Handler();
 8005bf6:	f000 fac9 	bl	800618c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8005bfa:	bf00      	nop
 8005bfc:	3730      	adds	r7, #48	; 0x30
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000af0 	.word	0x20000af0
 8005c08:	3b9aca00 	.word	0x3b9aca00

08005c0c <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8005c10:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c12:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <MX_UART5_Init+0x5c>)
 8005c14:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 31250;
 8005c16:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c18:	f647 2212 	movw	r2, #31250	; 0x7a12
 8005c1c:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005c1e:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8005c2a:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8005c30:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c32:	220c      	movs	r2, #12
 8005c34:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c36:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c42:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8005c4e:	4805      	ldr	r0, [pc, #20]	; (8005c64 <MX_UART5_Init+0x58>)
 8005c50:	f7fe f922 	bl	8003e98 <HAL_UART_Init>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <MX_UART5_Init+0x52>
		Error_Handler();
 8005c5a:	f000 fa97 	bl	800618c <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000a24 	.word	0x20000a24
 8005c68:	40005000 	.word	0x40005000

08005c6c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8005c70:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005c72:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <MX_USART3_UART_Init+0x5c>)
 8005c74:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c7c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005c7e:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8005c84:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8005c90:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005c92:	220c      	movs	r2, #12
 8005c94:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c9c:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ca2:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8005cae:	4805      	ldr	r0, [pc, #20]	; (8005cc4 <MX_USART3_UART_Init+0x58>)
 8005cb0:	f7fe f8f2 	bl	8003e98 <HAL_UART_Init>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8005cba:	f000 fa67 	bl	800618c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8005cbe:	bf00      	nop
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200008e4 	.word	0x200008e4
 8005cc8:	40004800 	.word	0x40004800

08005ccc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08e      	sub	sp, #56	; 0x38
 8005cd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	609a      	str	r2, [r3, #8]
 8005cde:	60da      	str	r2, [r3, #12]
 8005ce0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8005ce2:	4bb3      	ldr	r3, [pc, #716]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	4ab2      	ldr	r2, [pc, #712]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005ce8:	f043 0310 	orr.w	r3, r3, #16
 8005cec:	6313      	str	r3, [r2, #48]	; 0x30
 8005cee:	4bb0      	ldr	r3, [pc, #704]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	f003 0310 	and.w	r3, r3, #16
 8005cf6:	623b      	str	r3, [r7, #32]
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005cfa:	4bad      	ldr	r3, [pc, #692]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	4aac      	ldr	r2, [pc, #688]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d00:	f043 0304 	orr.w	r3, r3, #4
 8005d04:	6313      	str	r3, [r2, #48]	; 0x30
 8005d06:	4baa      	ldr	r3, [pc, #680]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	f003 0304 	and.w	r3, r3, #4
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8005d12:	4ba7      	ldr	r3, [pc, #668]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	4aa6      	ldr	r2, [pc, #664]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d18:	f043 0320 	orr.w	r3, r3, #32
 8005d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d1e:	4ba4      	ldr	r3, [pc, #656]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8005d2a:	4ba1      	ldr	r3, [pc, #644]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	4aa0      	ldr	r2, [pc, #640]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d34:	6313      	str	r3, [r2, #48]	; 0x30
 8005d36:	4b9e      	ldr	r3, [pc, #632]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005d42:	4b9b      	ldr	r3, [pc, #620]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	4a9a      	ldr	r2, [pc, #616]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d4e:	4b98      	ldr	r3, [pc, #608]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005d5a:	4b95      	ldr	r3, [pc, #596]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	4a94      	ldr	r2, [pc, #592]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d60:	f043 0302 	orr.w	r3, r3, #2
 8005d64:	6313      	str	r3, [r2, #48]	; 0x30
 8005d66:	4b92      	ldr	r3, [pc, #584]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8005d72:	4b8f      	ldr	r3, [pc, #572]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	4a8e      	ldr	r2, [pc, #568]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005d7e:	4b8c      	ldr	r3, [pc, #560]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005d8a:	4b89      	ldr	r3, [pc, #548]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	4a88      	ldr	r2, [pc, #544]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d90:	f043 0308 	orr.w	r3, r3, #8
 8005d94:	6313      	str	r3, [r2, #48]	; 0x30
 8005d96:	4b86      	ldr	r3, [pc, #536]	; (8005fb0 <MX_GPIO_Init+0x2e4>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	607b      	str	r3, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8005da2:	2200      	movs	r2, #0
 8005da4:	2174      	movs	r1, #116	; 0x74
 8005da6:	4883      	ldr	r0, [pc, #524]	; (8005fb4 <MX_GPIO_Init+0x2e8>)
 8005da8:	f7fa ff90 	bl	8000ccc <HAL_GPIO_WritePin>
			VCF_4THORDER_Pin | VCF_2NDORDER_Pin | DRUM_KICK_Pin | TRI_3340_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, DRUM_RIM_Pin | DRUM_LOWTOM_Pin | DRUM_HIGHTOM_Pin,
 8005dac:	2200      	movs	r2, #0
 8005dae:	2107      	movs	r1, #7
 8005db0:	4881      	ldr	r0, [pc, #516]	; (8005fb8 <MX_GPIO_Init+0x2ec>)
 8005db2:	f7fa ff8b 	bl	8000ccc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 8005db6:	2200      	movs	r2, #0
 8005db8:	f241 2141 	movw	r1, #4673	; 0x1241
 8005dbc:	487f      	ldr	r0, [pc, #508]	; (8005fbc <MX_GPIO_Init+0x2f0>)
 8005dbe:	f7fa ff85 	bl	8000ccc <HAL_GPIO_WritePin>
			DAC_CS_Pin | USB_PowerSwitchOn_Pin | SAW_3340_Pin | SYNC_3340_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8005dc8:	487d      	ldr	r0, [pc, #500]	; (8005fc0 <MX_GPIO_Init+0x2f4>)
 8005dca:	f7fa ff7f 	bl	8000ccc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LS138_A0_Pin | LS138_A1_Pin | LS138_A2_Pin,
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8005dd4:	487b      	ldr	r0, [pc, #492]	; (8005fc4 <MX_GPIO_Init+0x2f8>)
 8005dd6:	f7fa ff79 	bl	8000ccc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, PULSE_3340_Pin | DRUM_SNARE_Pin, GPIO_PIN_RESET);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2103      	movs	r1, #3
 8005dde:	487a      	ldr	r0, [pc, #488]	; (8005fc8 <MX_GPIO_Init+0x2fc>)
 8005de0:	f7fa ff74 	bl	8000ccc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : VCF_4THORDER_Pin VCF_2NDORDER_Pin DRUM_KICK_Pin TRI_3340_Pin */
	GPIO_InitStruct.Pin = VCF_4THORDER_Pin | VCF_2NDORDER_Pin | DRUM_KICK_Pin
 8005de4:	2374      	movs	r3, #116	; 0x74
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
			| TRI_3340_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005de8:	2301      	movs	r3, #1
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005df0:	2300      	movs	r3, #0
 8005df2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df8:	4619      	mov	r1, r3
 8005dfa:	486e      	ldr	r0, [pc, #440]	; (8005fb4 <MX_GPIO_Init+0x2e8>)
 8005dfc:	f7fa fda4 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005e06:	4b71      	ldr	r3, [pc, #452]	; (8005fcc <MX_GPIO_Init+0x300>)
 8005e08:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e12:	4619      	mov	r1, r3
 8005e14:	486b      	ldr	r0, [pc, #428]	; (8005fc4 <MX_GPIO_Init+0x2f8>)
 8005e16:	f7fa fd97 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pins : DRUM_RIM_Pin DRUM_LOWTOM_Pin DRUM_HIGHTOM_Pin */
	GPIO_InitStruct.Pin = DRUM_RIM_Pin | DRUM_LOWTOM_Pin | DRUM_HIGHTOM_Pin;
 8005e1a:	2307      	movs	r3, #7
 8005e1c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e26:	2300      	movs	r3, #0
 8005e28:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4861      	ldr	r0, [pc, #388]	; (8005fb8 <MX_GPIO_Init+0x2ec>)
 8005e32:	f7fa fd89 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8005e36:	2332      	movs	r3, #50	; 0x32
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e42:	2303      	movs	r3, #3
 8005e44:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e46:	230b      	movs	r3, #11
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e4e:	4619      	mov	r1, r3
 8005e50:	485c      	ldr	r0, [pc, #368]	; (8005fc4 <MX_GPIO_Init+0x2f8>)
 8005e52:	f7fa fd79 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8005e56:	2386      	movs	r3, #134	; 0x86
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e62:	2303      	movs	r3, #3
 8005e64:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e66:	230b      	movs	r3, #11
 8005e68:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4857      	ldr	r0, [pc, #348]	; (8005fd0 <MX_GPIO_Init+0x304>)
 8005e72:	f7fa fd69 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pin : DAC_CS_Pin */
	GPIO_InitStruct.Pin = DAC_CS_Pin;
 8005e76:	2301      	movs	r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e82:	2302      	movs	r3, #2
 8005e84:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(DAC_CS_GPIO_Port, &GPIO_InitStruct);
 8005e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	484b      	ldr	r0, [pc, #300]	; (8005fbc <MX_GPIO_Init+0x2f0>)
 8005e8e:	f7fa fd5b 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ea4:	230b      	movs	r3, #11
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eac:	4619      	mov	r1, r3
 8005eae:	4844      	ldr	r0, [pc, #272]	; (8005fc0 <MX_GPIO_Init+0x2f4>)
 8005eb0:	f7fa fd4a 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 8005eb4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eca:	4619      	mov	r1, r3
 8005ecc:	483c      	ldr	r0, [pc, #240]	; (8005fc0 <MX_GPIO_Init+0x2f4>)
 8005ece:	f7fa fd3b 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005ed2:	2340      	movs	r3, #64	; 0x40
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4834      	ldr	r0, [pc, #208]	; (8005fbc <MX_GPIO_Init+0x2f0>)
 8005eea:	f7fa fd2d 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005efe:	4619      	mov	r1, r3
 8005f00:	482e      	ldr	r0, [pc, #184]	; (8005fbc <MX_GPIO_Init+0x2f0>)
 8005f02:	f7fa fd21 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pin : CE_RPi_Pin */
	GPIO_InitStruct.Pin = CE_RPi_Pin;
 8005f06:	2340      	movs	r3, #64	; 0x40
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005f0a:	4b32      	ldr	r3, [pc, #200]	; (8005fd4 <MX_GPIO_Init+0x308>)
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CE_RPi_GPIO_Port, &GPIO_InitStruct);
 8005f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f16:	4619      	mov	r1, r3
 8005f18:	482a      	ldr	r0, [pc, #168]	; (8005fc4 <MX_GPIO_Init+0x2f8>)
 8005f1a:	f7fa fd15 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pins : LS138_A0_Pin LS138_A1_Pin LS138_A2_Pin */
	GPIO_InitStruct.Pin = LS138_A0_Pin | LS138_A1_Pin | LS138_A2_Pin;
 8005f1e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f24:	2301      	movs	r3, #1
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f34:	4619      	mov	r1, r3
 8005f36:	4823      	ldr	r0, [pc, #140]	; (8005fc4 <MX_GPIO_Init+0x2f8>)
 8005f38:	f7fa fd06 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8005f3c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f42:	2302      	movs	r3, #2
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f4e:	230a      	movs	r3, #10
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f56:	4619      	mov	r1, r3
 8005f58:	481d      	ldr	r0, [pc, #116]	; (8005fd0 <MX_GPIO_Init+0x304>)
 8005f5a:	f7fa fcf5 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f64:	2300      	movs	r3, #0
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f70:	4619      	mov	r1, r3
 8005f72:	4817      	ldr	r0, [pc, #92]	; (8005fd0 <MX_GPIO_Init+0x304>)
 8005f74:	f7fa fce8 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pins : PULSE_3340_Pin DRUM_SNARE_Pin */
	GPIO_InitStruct.Pin = PULSE_3340_Pin | DRUM_SNARE_Pin;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f84:	2300      	movs	r3, #0
 8005f86:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	480e      	ldr	r0, [pc, #56]	; (8005fc8 <MX_GPIO_Init+0x2fc>)
 8005f90:	f7fa fcda 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pins : SAW_3340_Pin SYNC_3340_Pin */
	GPIO_InitStruct.Pin = SAW_3340_Pin | SYNC_3340_Pin;
 8005f94:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005faa:	4619      	mov	r1, r3
 8005fac:	e014      	b.n	8005fd8 <MX_GPIO_Init+0x30c>
 8005fae:	bf00      	nop
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	40021400 	.word	0x40021400
 8005fbc:	40021800 	.word	0x40021800
 8005fc0:	40020400 	.word	0x40020400
 8005fc4:	40020800 	.word	0x40020800
 8005fc8:	40020c00 	.word	0x40020c00
 8005fcc:	10310000 	.word	0x10310000
 8005fd0:	40020000 	.word	0x40020000
 8005fd4:	10210000 	.word	0x10210000
 8005fd8:	4813      	ldr	r0, [pc, #76]	; (8006028 <MX_GPIO_Init+0x35c>)
 8005fda:	f7fa fcb5 	bl	8000948 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8005fde:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fec:	2303      	movs	r3, #3
 8005fee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ff0:	230b      	movs	r3, #11
 8005ff2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	480b      	ldr	r0, [pc, #44]	; (8006028 <MX_GPIO_Init+0x35c>)
 8005ffc:	f7fa fca4 	bl	8000948 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006000:	2200      	movs	r2, #0
 8006002:	2100      	movs	r1, #0
 8006004:	2017      	movs	r0, #23
 8006006:	f7fa fc46 	bl	8000896 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800600a:	2017      	movs	r0, #23
 800600c:	f7fa fc5f 	bl	80008ce <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006010:	2200      	movs	r2, #0
 8006012:	2100      	movs	r1, #0
 8006014:	2028      	movs	r0, #40	; 0x28
 8006016:	f7fa fc3e 	bl	8000896 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800601a:	2028      	movs	r0, #40	; 0x28
 800601c:	f7fa fc57 	bl	80008ce <HAL_NVIC_EnableIRQ>

}
 8006020:	bf00      	nop
 8006022:	3738      	adds	r7, #56	; 0x38
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40021800 	.word	0x40021800

0800602c <__io_putchar>:

/* USER CODE BEGIN 4 */

// our own implementation of putchar used by printf, so that printf is forwarded
// to the Virtual Com Port (need Hyperterminal or a dedicated terminal on the PC or Mac host station)
int __io_putchar(int ch) {
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

#ifdef PRINTF
	HAL_UART_Transmit(huartSTlink, (uint8_t*) &ch, 1, 0xFFFF); // beware blocking call!
 8006034:	4b06      	ldr	r3, [pc, #24]	; (8006050 <__io_putchar+0x24>)
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	1d39      	adds	r1, r7, #4
 800603a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800603e:	2201      	movs	r2, #1
 8006040:	f7fd ff78 	bl	8003f34 <HAL_UART_Transmit>
#endif
	// it's possible to use non-blocking with function HAL_UART_Transmit_IT(...), see HAL documentation
	return ch;
 8006044:	687b      	ldr	r3, [r7, #4]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	200009b8 	.word	0x200009b8

08006054 <startAdsrTIM>:

// --------------------------------------------------------------------------------------------------
//                                     peripherals
// --------------------------------------------------------------------------------------------------

void startAdsrTIM() {
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(htimDacs);
 8006058:	4b03      	ldr	r3, [pc, #12]	; (8006068 <startAdsrTIM+0x14>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f7fd f81b 	bl	8003098 <HAL_TIM_Base_Start_IT>

}
 8006062:	bf00      	nop
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	2000087c 	.word	0x2000087c

0800606c <stopAdsrTIM>:

void stopAdsrTIM() {
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(htimDacs);
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <stopAdsrTIM+0x14>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f7fd f839 	bl	80030ec <HAL_TIM_Base_Stop_IT>

}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	2000087c 	.word	0x2000087c

08006084 <HAL_SPI_TxCpltCallback>:
// --------------------------------------------------------------------------------------------------

/**
 * Callback implementation for the SPI peripheral "end of transfer" interruption
 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]

	if (hspi == hspiDacs)
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <HAL_SPI_TxCpltCallback+0x20>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	429a      	cmp	r2, r3
 8006094:	d101      	bne.n	800609a <HAL_SPI_TxCpltCallback+0x16>
		spiDacs_TxCpltCallback();
 8006096:	f000 f979 	bl	800638c <spiDacs_TxCpltCallback>
}
 800609a:	bf00      	nop
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	200009bc 	.word	0x200009bc

080060a8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]

	if (htim == htimCalib)
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <HAL_TIM_IC_CaptureCallback+0x20>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d101      	bne.n	80060be <HAL_TIM_IC_CaptureCallback+0x16>
		VCO_Calib_CaptureCallback();
 80060ba:	f001 fc43 	bl	8007944 <VCO_Calib_CaptureCallback>
}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000aec 	.word	0x20000aec

080060cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

	if (htim == htimDacs)
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_PeriodElapsedCallback+0x16>
		dacTIMCallback();
 80060de:	f7ff fa8b 	bl	80055f8 <dacTIMCallback>
}
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	2000087c 	.word	0x2000087c

080060f0 <HAL_GPIO_EXTI_Callback>:
 *  We "listen" to two pins:
 *  - CE_RPi_Pin: this pin is connected to the CE ("chip enable") signal of the Raspberry Pi ; this signal
 *  			gets low every time data is to be transmitted by the Raspberry Pi to the STM32 through the SPI3 bus
 *  - USER_Btn_Pin: this pin is connected to the blue button on the STM32 board; can be used for any kind of debugging purpose
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	80fb      	strh	r3, [r7, #6]

	// RPi as note trigger
	if (GPIO_Pin == CE_RPi_Pin) { // CE0 from RaspBerryPi (PC6)
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	d111      	bne.n	8006124 <HAL_GPIO_EXTI_Callback+0x34>

		// TODO :use HAL_SPI_Receive_IT
		HAL_SPI_Receive(hspiMidi, rxSpiMidiBuff, 3, HAL_MAX_DELAY); // read three MIDI bytes in a row
 8006100:	4b11      	ldr	r3, [pc, #68]	; (8006148 <HAL_GPIO_EXTI_Callback+0x58>)
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006108:	2203      	movs	r2, #3
 800610a:	4910      	ldr	r1, [pc, #64]	; (800614c <HAL_GPIO_EXTI_Callback+0x5c>)
 800610c:	f7fc f8be 	bl	800228c <HAL_SPI_Receive>
		processIncomingMidiMessage(rxSpiMidiBuff[0], rxSpiMidiBuff[1],
 8006110:	4b0e      	ldr	r3, [pc, #56]	; (800614c <HAL_GPIO_EXTI_Callback+0x5c>)
 8006112:	7818      	ldrb	r0, [r3, #0]
 8006114:	4b0d      	ldr	r3, [pc, #52]	; (800614c <HAL_GPIO_EXTI_Callback+0x5c>)
 8006116:	7859      	ldrb	r1, [r3, #1]
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <HAL_GPIO_EXTI_Callback+0x5c>)
 800611a:	789b      	ldrb	r3, [r3, #2]
 800611c:	461a      	mov	r2, r3
 800611e:	f000 fb0b 	bl	8006738 <processIncomingMidiMessage>

		blueButtonActionPerformedCallback(
				HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin));

	}
}
 8006122:	e00c      	b.n	800613e <HAL_GPIO_EXTI_Callback+0x4e>
	else if (GPIO_Pin == USER_Btn_Pin) { // PC13
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612a:	d108      	bne.n	800613e <HAL_GPIO_EXTI_Callback+0x4e>
		blueButtonActionPerformedCallback(
 800612c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006130:	4807      	ldr	r0, [pc, #28]	; (8006150 <HAL_GPIO_EXTI_Callback+0x60>)
 8006132:	f7fa fdb3 	bl	8000c9c <HAL_GPIO_ReadPin>
 8006136:	4603      	mov	r3, r0
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff faa1 	bl	8005680 <blueButtonActionPerformedCallback>
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000aa4 	.word	0x20000aa4
 800614c:	200009b4 	.word	0x200009b4
 8006150:	40020800 	.word	0x40020800

08006154 <HAL_UART_RxCpltCallback>:

/**
 * Callback for the UART peripheral receive data process
 * Called when a given amount of data has been received on given UART port
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

	//printf("Received: %s\n", rxUartSTlinkBuff);
	processIncomingMidiMessage(rxUartSTlinkBuff[0], rxUartSTlinkBuff[1],
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <HAL_UART_RxCpltCallback+0x30>)
 800615e:	7818      	ldrb	r0, [r3, #0]
 8006160:	4b08      	ldr	r3, [pc, #32]	; (8006184 <HAL_UART_RxCpltCallback+0x30>)
 8006162:	7859      	ldrb	r1, [r3, #1]
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <HAL_UART_RxCpltCallback+0x30>)
 8006166:	789b      	ldrb	r3, [r3, #2]
 8006168:	461a      	mov	r2, r3
 800616a:	f000 fae5 	bl	8006738 <processIncomingMidiMessage>
			rxUartSTlinkBuff[2]);
	HAL_UART_Receive_IT(huartSTlink, rxUartSTlinkBuff, 3); // wait for next MIDI msg
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <HAL_UART_RxCpltCallback+0x34>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2203      	movs	r2, #3
 8006174:	4903      	ldr	r1, [pc, #12]	; (8006184 <HAL_UART_RxCpltCallback+0x30>)
 8006176:	4618      	mov	r0, r3
 8006178:	f7fd ff6e 	bl	8004058 <HAL_UART_Receive_IT>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	200009b0 	.word	0x200009b0
 8006188:	200009b8 	.word	0x200009b8

0800618c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("HAL Error !\n");
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <Error_Handler+0xc>)
 8006192:	f001 fe0b 	bl	8007dac <puts>
	while (1) {
 8006196:	e7fe      	b.n	8006196 <Error_Handler+0xa>
 8006198:	08009840 	.word	0x08009840

0800619c <dac4822AdressSelect>:

/**
 * sends the appropriate address to the 74LS128 3-to-8 decoder
 * so that the corresponding MCP4822 chip is activated when CS is asserted later
 */
void dac4822AdressSelect(int chipNumber){
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

	// selection du CNA: A0=PC4, A1=PB1, A2=PC5 and address=A2.A1.A0
	chipNumber &= 0x07;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	607b      	str	r3, [r7, #4]

	switch (chipNumber){
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b07      	cmp	r3, #7
 80061b0:	f200 80ac 	bhi.w	800630c <dac4822AdressSelect+0x170>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <dac4822AdressSelect+0x20>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061dd 	.word	0x080061dd
 80061c0:	08006203 	.word	0x08006203
 80061c4:	08006229 	.word	0x08006229
 80061c8:	0800624f 	.word	0x0800624f
 80061cc:	08006275 	.word	0x08006275
 80061d0:	0800629b 	.word	0x0800629b
 80061d4:	080062c1 	.word	0x080062c1
 80061d8:	080062e7 	.word	0x080062e7
	case 0:
		HAL_GPIO_WritePin(LS138_A2_GPIO_Port, LS138_A2_Pin, GPIO_PIN_RESET);
 80061dc:	2200      	movs	r2, #0
 80061de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061e2:	484c      	ldr	r0, [pc, #304]	; (8006314 <dac4822AdressSelect+0x178>)
 80061e4:	f7fa fd72 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A1_GPIO_Port, LS138_A1_Pin, GPIO_PIN_RESET);
 80061e8:	2200      	movs	r2, #0
 80061ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061ee:	4849      	ldr	r0, [pc, #292]	; (8006314 <dac4822AdressSelect+0x178>)
 80061f0:	f7fa fd6c 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A0_GPIO_Port, LS138_A0_Pin, GPIO_PIN_RESET);
 80061f4:	2200      	movs	r2, #0
 80061f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061fa:	4846      	ldr	r0, [pc, #280]	; (8006314 <dac4822AdressSelect+0x178>)
 80061fc:	f7fa fd66 	bl	8000ccc <HAL_GPIO_WritePin>
		break;
 8006200:	e084      	b.n	800630c <dac4822AdressSelect+0x170>
	case 1:
		HAL_GPIO_WritePin(LS138_A2_GPIO_Port, LS138_A2_Pin, GPIO_PIN_RESET);
 8006202:	2200      	movs	r2, #0
 8006204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006208:	4842      	ldr	r0, [pc, #264]	; (8006314 <dac4822AdressSelect+0x178>)
 800620a:	f7fa fd5f 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A1_GPIO_Port, LS138_A1_Pin, GPIO_PIN_RESET);
 800620e:	2200      	movs	r2, #0
 8006210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006214:	483f      	ldr	r0, [pc, #252]	; (8006314 <dac4822AdressSelect+0x178>)
 8006216:	f7fa fd59 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A0_GPIO_Port, LS138_A0_Pin, GPIO_PIN_SET);
 800621a:	2201      	movs	r2, #1
 800621c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006220:	483c      	ldr	r0, [pc, #240]	; (8006314 <dac4822AdressSelect+0x178>)
 8006222:	f7fa fd53 	bl	8000ccc <HAL_GPIO_WritePin>
		break;
 8006226:	e071      	b.n	800630c <dac4822AdressSelect+0x170>
	case 2:
		HAL_GPIO_WritePin(LS138_A2_GPIO_Port, LS138_A2_Pin, GPIO_PIN_RESET);
 8006228:	2200      	movs	r2, #0
 800622a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800622e:	4839      	ldr	r0, [pc, #228]	; (8006314 <dac4822AdressSelect+0x178>)
 8006230:	f7fa fd4c 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A1_GPIO_Port, LS138_A1_Pin, GPIO_PIN_SET);
 8006234:	2201      	movs	r2, #1
 8006236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800623a:	4836      	ldr	r0, [pc, #216]	; (8006314 <dac4822AdressSelect+0x178>)
 800623c:	f7fa fd46 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A0_GPIO_Port, LS138_A0_Pin, GPIO_PIN_RESET);
 8006240:	2200      	movs	r2, #0
 8006242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006246:	4833      	ldr	r0, [pc, #204]	; (8006314 <dac4822AdressSelect+0x178>)
 8006248:	f7fa fd40 	bl	8000ccc <HAL_GPIO_WritePin>
		break;
 800624c:	e05e      	b.n	800630c <dac4822AdressSelect+0x170>
	case 3:
		HAL_GPIO_WritePin(LS138_A2_GPIO_Port, LS138_A2_Pin, GPIO_PIN_RESET);
 800624e:	2200      	movs	r2, #0
 8006250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006254:	482f      	ldr	r0, [pc, #188]	; (8006314 <dac4822AdressSelect+0x178>)
 8006256:	f7fa fd39 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A1_GPIO_Port, LS138_A1_Pin, GPIO_PIN_SET);
 800625a:	2201      	movs	r2, #1
 800625c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006260:	482c      	ldr	r0, [pc, #176]	; (8006314 <dac4822AdressSelect+0x178>)
 8006262:	f7fa fd33 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A0_GPIO_Port, LS138_A0_Pin, GPIO_PIN_SET);
 8006266:	2201      	movs	r2, #1
 8006268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800626c:	4829      	ldr	r0, [pc, #164]	; (8006314 <dac4822AdressSelect+0x178>)
 800626e:	f7fa fd2d 	bl	8000ccc <HAL_GPIO_WritePin>
		break;
 8006272:	e04b      	b.n	800630c <dac4822AdressSelect+0x170>
	case 4:
		HAL_GPIO_WritePin(LS138_A2_GPIO_Port, LS138_A2_Pin, GPIO_PIN_SET);
 8006274:	2201      	movs	r2, #1
 8006276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800627a:	4826      	ldr	r0, [pc, #152]	; (8006314 <dac4822AdressSelect+0x178>)
 800627c:	f7fa fd26 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A1_GPIO_Port, LS138_A1_Pin, GPIO_PIN_RESET);
 8006280:	2200      	movs	r2, #0
 8006282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006286:	4823      	ldr	r0, [pc, #140]	; (8006314 <dac4822AdressSelect+0x178>)
 8006288:	f7fa fd20 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A0_GPIO_Port, LS138_A0_Pin, GPIO_PIN_RESET);
 800628c:	2200      	movs	r2, #0
 800628e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006292:	4820      	ldr	r0, [pc, #128]	; (8006314 <dac4822AdressSelect+0x178>)
 8006294:	f7fa fd1a 	bl	8000ccc <HAL_GPIO_WritePin>
		break;
 8006298:	e038      	b.n	800630c <dac4822AdressSelect+0x170>
	case 5:
		HAL_GPIO_WritePin(LS138_A2_GPIO_Port, LS138_A2_Pin, GPIO_PIN_SET);
 800629a:	2201      	movs	r2, #1
 800629c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062a0:	481c      	ldr	r0, [pc, #112]	; (8006314 <dac4822AdressSelect+0x178>)
 80062a2:	f7fa fd13 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A1_GPIO_Port, LS138_A1_Pin, GPIO_PIN_RESET);
 80062a6:	2200      	movs	r2, #0
 80062a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062ac:	4819      	ldr	r0, [pc, #100]	; (8006314 <dac4822AdressSelect+0x178>)
 80062ae:	f7fa fd0d 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A0_GPIO_Port, LS138_A0_Pin, GPIO_PIN_SET);
 80062b2:	2201      	movs	r2, #1
 80062b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062b8:	4816      	ldr	r0, [pc, #88]	; (8006314 <dac4822AdressSelect+0x178>)
 80062ba:	f7fa fd07 	bl	8000ccc <HAL_GPIO_WritePin>
		break;
 80062be:	e025      	b.n	800630c <dac4822AdressSelect+0x170>
	case 6:
		HAL_GPIO_WritePin(LS138_A2_GPIO_Port, LS138_A2_Pin, GPIO_PIN_SET);
 80062c0:	2201      	movs	r2, #1
 80062c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062c6:	4813      	ldr	r0, [pc, #76]	; (8006314 <dac4822AdressSelect+0x178>)
 80062c8:	f7fa fd00 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A1_GPIO_Port, LS138_A1_Pin, GPIO_PIN_SET);
 80062cc:	2201      	movs	r2, #1
 80062ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062d2:	4810      	ldr	r0, [pc, #64]	; (8006314 <dac4822AdressSelect+0x178>)
 80062d4:	f7fa fcfa 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A0_GPIO_Port, LS138_A0_Pin, GPIO_PIN_RESET);
 80062d8:	2200      	movs	r2, #0
 80062da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062de:	480d      	ldr	r0, [pc, #52]	; (8006314 <dac4822AdressSelect+0x178>)
 80062e0:	f7fa fcf4 	bl	8000ccc <HAL_GPIO_WritePin>
		break;
 80062e4:	e012      	b.n	800630c <dac4822AdressSelect+0x170>
	case 7:
		HAL_GPIO_WritePin(LS138_A2_GPIO_Port, LS138_A2_Pin, GPIO_PIN_SET);
 80062e6:	2201      	movs	r2, #1
 80062e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062ec:	4809      	ldr	r0, [pc, #36]	; (8006314 <dac4822AdressSelect+0x178>)
 80062ee:	f7fa fced 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A1_GPIO_Port, LS138_A1_Pin, GPIO_PIN_SET);
 80062f2:	2201      	movs	r2, #1
 80062f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062f8:	4806      	ldr	r0, [pc, #24]	; (8006314 <dac4822AdressSelect+0x178>)
 80062fa:	f7fa fce7 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LS138_A0_GPIO_Port, LS138_A0_Pin, GPIO_PIN_SET);
 80062fe:	2201      	movs	r2, #1
 8006300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006304:	4803      	ldr	r0, [pc, #12]	; (8006314 <dac4822AdressSelect+0x178>)
 8006306:	f7fa fce1 	bl	8000ccc <HAL_GPIO_WritePin>
		break;
 800630a:	bf00      	nop
	}
}
 800630c:	bf00      	nop
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40020800 	.word	0x40020800

08006318 <dac4822ABWrite>:
 * @param word12bits an unsigned 12 bits word
 * @param one of 8 possible physical chips
 * @param 4822 dac channel MCP4822_CHANNEL_A or MCP4822_CHANNEL_B or MCP4822_CHANNEL_A_GAIN2 or MCP4822_CHANNEL_B_GAIN2 if you want a 0-4096mV range
 */

void dac4822ABWrite(int word12bits, int chip, int channelAB){
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]

	if (word12bits < 0) word12bits = 0;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	da01      	bge.n	800632e <dac4822ABWrite+0x16>
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
	word12bits &= 0xFFF;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006334:	60fb      	str	r3, [r7, #12]

	// selection du CNA:
	dac4822AdressSelect(chip);
 8006336:	68b8      	ldr	r0, [r7, #8]
 8006338:	f7ff ff30 	bl	800619c <dac4822AdressSelect>

	txSpiDacsBuff[0]=(((word12bits >> 8) & 0x0F)) | channelAB;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	121b      	asrs	r3, r3, #8
 8006340:	b25b      	sxtb	r3, r3
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	b25a      	sxtb	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	b25b      	sxtb	r3, r3
 800634c:	4313      	orrs	r3, r2
 800634e:	b25b      	sxtb	r3, r3
 8006350:	b2da      	uxtb	r2, r3
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <dac4822ABWrite+0x68>)
 8006354:	701a      	strb	r2, [r3, #0]
	txSpiDacsBuff[1]=(word12bits & 0xFF);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	4b09      	ldr	r3, [pc, #36]	; (8006380 <dac4822ABWrite+0x68>)
 800635c:	705a      	strb	r2, [r3, #1]

	// PB1 = 0 (=input ENABLE of 74LS138, which indirectly selects the corresponding circuit)
	HAL_GPIO_WritePin(DAC_CS_GPIO_Port, DAC_CS_Pin, GPIO_PIN_RESET);
 800635e:	2200      	movs	r2, #0
 8006360:	2101      	movs	r1, #1
 8006362:	4808      	ldr	r0, [pc, #32]	; (8006384 <dac4822ABWrite+0x6c>)
 8006364:	f7fa fcb2 	bl	8000ccc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(hspiDacs, txSpiDacsBuff, 2);
 8006368:	4b07      	ldr	r3, [pc, #28]	; (8006388 <dac4822ABWrite+0x70>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2202      	movs	r2, #2
 800636e:	4904      	ldr	r1, [pc, #16]	; (8006380 <dac4822ABWrite+0x68>)
 8006370:	4618      	mov	r0, r3
 8006372:	f7fc fac7 	bl	8002904 <HAL_SPI_Transmit_IT>

}
 8006376:	bf00      	nop
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000b30 	.word	0x20000b30
 8006384:	40021800 	.word	0x40021800
 8006388:	200009bc 	.word	0x200009bc

0800638c <spiDacs_TxCpltCallback>:

/**
 * Callback implementation for the SPI peripheral "end of transfer" interruption
 */
void spiDacs_TxCpltCallback(){
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0

	// raise CS so as to transfer the latch to the DAC output (coz we have LDAC=0)
	HAL_GPIO_WritePin(DAC_CS_GPIO_Port, DAC_CS_Pin, GPIO_PIN_SET);
 8006390:	2201      	movs	r2, #1
 8006392:	2101      	movs	r1, #1
 8006394:	4802      	ldr	r0, [pc, #8]	; (80063a0 <spiDacs_TxCpltCallback+0x14>)
 8006396:	f7fa fc99 	bl	8000ccc <HAL_GPIO_WritePin>

}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40021800 	.word	0x40021800

080063a4 <dacWrite>:

/**
 * Write the given word to the given DAC
 */
void dacWrite(int word12bits, Dac targetDac){
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]

	if (word12bits > 4095) word12bits = 4095;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	db03      	blt.n	80063c0 <dacWrite+0x1c>
 80063b8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80063bc:	607b      	str	r3, [r7, #4]
 80063be:	e004      	b.n	80063ca <dacWrite+0x26>
	else if (word12bits < 0) word12bits = 0;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	da01      	bge.n	80063ca <dacWrite+0x26>
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]

	switch (targetDac){
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	2b1a      	cmp	r3, #26
 80063ce:	f200 8099 	bhi.w	8006504 <dacWrite+0x160>
 80063d2:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <dacWrite+0x34>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	08006445 	.word	0x08006445
 80063dc:	08006451 	.word	0x08006451
 80063e0:	0800645d 	.word	0x0800645d
 80063e4:	08006469 	.word	0x08006469
 80063e8:	08006475 	.word	0x08006475
 80063ec:	080064ed 	.word	0x080064ed
 80063f0:	080064f9 	.word	0x080064f9
 80063f4:	080064a5 	.word	0x080064a5
 80063f8:	080064b1 	.word	0x080064b1
 80063fc:	0800648d 	.word	0x0800648d
 8006400:	08006499 	.word	0x08006499
 8006404:	080064d5 	.word	0x080064d5
 8006408:	080064e1 	.word	0x080064e1
 800640c:	080064bd 	.word	0x080064bd
 8006410:	080064c9 	.word	0x080064c9
 8006414:	08006481 	.word	0x08006481
 8006418:	080064bd 	.word	0x080064bd
 800641c:	0800648d 	.word	0x0800648d
 8006420:	080064a5 	.word	0x080064a5
 8006424:	080064b1 	.word	0x080064b1
 8006428:	08006505 	.word	0x08006505
 800642c:	08006505 	.word	0x08006505
 8006430:	08006505 	.word	0x08006505
 8006434:	08006505 	.word	0x08006505
 8006438:	08006505 	.word	0x08006505
 800643c:	08006505 	.word	0x08006505
 8006440:	080064c9 	.word	0x080064c9

	// ------- 13700 -------

		case DAC_VCO_13700_FREQ:
			dac4822ABWrite(word12bits, 0,  MCP4822_CHANNEL_A_GAIN2);
 8006444:	2210      	movs	r2, #16
 8006446:	2100      	movs	r1, #0
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff ff65 	bl	8006318 <dac4822ABWrite>
			break;
 800644e:	e05d      	b.n	800650c <dacWrite+0x168>

	// ------- 3340A -------

		case DAC_VCO_3340A_FREQ :
			dac4822ABWrite(word12bits, 3, MCP4822_CHANNEL_A_GAIN2);
 8006450:	2210      	movs	r2, #16
 8006452:	2103      	movs	r1, #3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff ff5f 	bl	8006318 <dac4822ABWrite>
			break;
 800645a:	e057      	b.n	800650c <dacWrite+0x168>

		case DAC_VCO_3340A_PWM_DUTY :
			dac4822ABWrite(word12bits, 3, MCP4822_CHANNEL_B_GAIN2);
 800645c:	2290      	movs	r2, #144	; 0x90
 800645e:	2103      	movs	r1, #3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff ff59 	bl	8006318 <dac4822ABWrite>
			break;
 8006466:	e051      	b.n	800650c <dacWrite+0x168>

	// ------- 3340B ------- (tout a fait a droite, "en rabe")

		case DAC_VCO_3340B_FREQ :
			dac4822ABWrite(word12bits, 7, MCP4822_CHANNEL_A_GAIN2);
 8006468:	2210      	movs	r2, #16
 800646a:	2107      	movs	r1, #7
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ff53 	bl	8006318 <dac4822ABWrite>
			break;
 8006472:	e04b      	b.n	800650c <dacWrite+0x168>

		case DAC_VCO_3340B_PWM_DUTY :
			dac4822ABWrite(word12bits, 7, MCP4822_CHANNEL_B_GAIN2);
 8006474:	2290      	movs	r2, #144	; 0x90
 8006476:	2107      	movs	r1, #7
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ff4d 	bl	8006318 <dac4822ABWrite>
			break;
 800647e:	e045      	b.n	800650c <dacWrite+0x168>

	// ------- Noise -------

		case DAC_NOISE:
			dac4822ABWrite(word12bits, 0, MCP4822_CHANNEL_B);
 8006480:	22b0      	movs	r2, #176	; 0xb0
 8006482:	2100      	movs	r1, #0
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff ff47 	bl	8006318 <dac4822ABWrite>
			break;
 800648a:	e03f      	b.n	800650c <dacWrite+0x168>

	// ------- Mixer 1 2 3 4 -------

		case DAC_V2140D_3340B_PULSE_LVL:
		case DAC_V2140D_IN3 : // 3340 #2 pulse
			dac4822ABWrite(word12bits, 1, MCP4822_CHANNEL_A);
 800648c:	2230      	movs	r2, #48	; 0x30
 800648e:	2101      	movs	r1, #1
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff ff41 	bl	8006318 <dac4822ABWrite>
			break;
 8006496:	e039      	b.n	800650c <dacWrite+0x168>

		case DAC_V2140D_IN4 : // not connected yet
			dac4822ABWrite(word12bits, 1, MCP4822_CHANNEL_B);
 8006498:	22b0      	movs	r2, #176	; 0xb0
 800649a:	2101      	movs	r1, #1
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff ff3b 	bl	8006318 <dac4822ABWrite>
			break;
 80064a2:	e033      	b.n	800650c <dacWrite+0x168>

		case DAC_V2140D_3340B_TRI_LVL:
		case DAC_V2140D_IN1 : // 3340 #2 triangle
			dac4822ABWrite(word12bits, 2, MCP4822_CHANNEL_A);
 80064a4:	2230      	movs	r2, #48	; 0x30
 80064a6:	2102      	movs	r1, #2
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ff35 	bl	8006318 <dac4822ABWrite>
			break;
 80064ae:	e02d      	b.n	800650c <dacWrite+0x168>

		case DAC_V2140D_3340B_SAW_LVL:
		case DAC_V2140D_IN2 : // 3340 #2 saw
			dac4822ABWrite(word12bits, 2, MCP4822_CHANNEL_B);
 80064b0:	22b0      	movs	r2, #176	; 0xb0
 80064b2:	2102      	movs	r1, #2
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff ff2f 	bl	8006318 <dac4822ABWrite>
			break;
 80064ba:	e027      	b.n	800650c <dacWrite+0x168>
	// ------- Mixer 5 6 7 8 -------


		case DAC_V2140D_3340A_LVL:
		case DAC_V2140D_IN7 : // GAIN3_B sur schema EAGLE
			dac4822ABWrite(word12bits, 4, MCP4822_CHANNEL_A);
 80064bc:	2230      	movs	r2, #48	; 0x30
 80064be:	2104      	movs	r1, #4
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff ff29 	bl	8006318 <dac4822ABWrite>
			break;
 80064c6:	e021      	b.n	800650c <dacWrite+0x168>

		case DAC_V2140D_VCA :
		case DAC_V2140D_IN8:  // GAIN4_B sur schema EAGLE
			dac4822ABWrite(word12bits, 4, MCP4822_CHANNEL_B_GAIN2);
 80064c8:	2290      	movs	r2, #144	; 0x90
 80064ca:	2104      	movs	r1, #4
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff ff23 	bl	8006318 <dac4822ABWrite>
			break;
 80064d2:	e01b      	b.n	800650c <dacWrite+0x168>

		case DAC_V2140D_IN5 : // GAIN1_B sur schema EAGLE, not connected yet
			dac4822ABWrite(word12bits, 5, MCP4822_CHANNEL_A);
 80064d4:	2230      	movs	r2, #48	; 0x30
 80064d6:	2105      	movs	r1, #5
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ff1d 	bl	8006318 <dac4822ABWrite>
			break;
 80064de:	e015      	b.n	800650c <dacWrite+0x168>

		case DAC_V2140D_IN6 : // GAIN2_B sur schema EAGLE, not connected yet
			dac4822ABWrite(word12bits, 5, MCP4822_CHANNEL_B);
 80064e0:	22b0      	movs	r2, #176	; 0xb0
 80064e2:	2105      	movs	r1, #5
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff ff17 	bl	8006318 <dac4822ABWrite>
			break;
 80064ea:	e00f      	b.n	800650c <dacWrite+0x168>

	// ------- VCF -------


		case DAC_VCF_CUTOFF:
					dac4822ABWrite(word12bits, 6, MCP4822_CHANNEL_A);
 80064ec:	2230      	movs	r2, #48	; 0x30
 80064ee:	2106      	movs	r1, #6
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff11 	bl	8006318 <dac4822ABWrite>
					break;
 80064f6:	e009      	b.n	800650c <dacWrite+0x168>

		case DAC_VCF_RES :
					dac4822ABWrite(word12bits, 6, MCP4822_CHANNEL_B_GAIN2);
 80064f8:	2290      	movs	r2, #144	; 0x90
 80064fa:	2106      	movs	r1, #6
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff ff0b 	bl	8006318 <dac4822ABWrite>
					break;
 8006502:	e003      	b.n	800650c <dacWrite+0x168>
		case DAC_V2140D_RINGMOD_LVL:
		case DAC_V2140D_13700_SQU_LVL:


		default:
			printf("NOT IMPLEMENTED!\n");
 8006504:	4803      	ldr	r0, [pc, #12]	; (8006514 <dacWrite+0x170>)
 8006506:	f001 fc51 	bl	8007dac <puts>
			break;
 800650a:	bf00      	nop

	}
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	0800987c 	.word	0x0800987c

08006518 <midiNoteOnHandler>:
/* Private function prototypes -----------------------------------------------*/

/**
 *  Prepare the envelope state machines following a MIDI NOTE ONE message
 */
void midiNoteOnHandler(){
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0

	if (dbg_noteOn ==TRUE) return; // debounce button
 800651c:	4b09      	ldr	r3, [pc, #36]	; (8006544 <midiNoteOnHandler+0x2c>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d00c      	beq.n	800653e <midiNoteOnHandler+0x26>

	printf("Note On\n");
 8006524:	4808      	ldr	r0, [pc, #32]	; (8006548 <midiNoteOnHandler+0x30>)
 8006526:	f001 fc41 	bl	8007dac <puts>
	dbg_noteOn = TRUE;
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <midiNoteOnHandler+0x2c>)
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]

	switchRedLEDOn(); 	// switch on LED so that we can monitor enveloppe level TODO : pwm !
 8006530:	f7ff f834 	bl	800559c <switchRedLEDOn>

	// prepare state machines:
	prepareVcaEnvelopeNoteON();
 8006534:	f7fe fc14 	bl	8004d60 <prepareVcaEnvelopeNoteON>
	prepareVcfEnvelopeNoteON();
 8006538:	f7fe fd1a 	bl	8004f70 <prepareVcfEnvelopeNoteON>
 800653c:	e000      	b.n	8006540 <midiNoteOnHandler+0x28>
	if (dbg_noteOn ==TRUE) return; // debounce button
 800653e:	bf00      	nop

}
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000864 	.word	0x20000864
 8006548:	080098a0 	.word	0x080098a0

0800654c <midiNoteOffHandler>:

/**
 *  Prepare the envelopes state machines following a MIDI NOTE ONE message
 */
void midiNoteOffHandler(){
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0

	if (dbg_noteOn == FALSE) return; // debounce button
 8006550:	4b09      	ldr	r3, [pc, #36]	; (8006578 <midiNoteOffHandler+0x2c>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00c      	beq.n	8006572 <midiNoteOffHandler+0x26>

	printf("Note Off\n");
 8006558:	4808      	ldr	r0, [pc, #32]	; (800657c <midiNoteOffHandler+0x30>)
 800655a:	f001 fc27 	bl	8007dac <puts>
	dbg_noteOn = FALSE;
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <midiNoteOffHandler+0x2c>)
 8006560:	2200      	movs	r2, #0
 8006562:	701a      	strb	r2, [r3, #0]

	switchRedLEDOff();
 8006564:	f7ff f826 	bl	80055b4 <switchRedLEDOff>

	// prepare state machines:
	prepareVcaEnvelopeNoteOFF();
 8006568:	f7fe fc3e 	bl	8004de8 <prepareVcaEnvelopeNoteOFF>
	prepareVcfEnvelopeNoteOFF();
 800656c:	f7fe fd64 	bl	8005038 <prepareVcfEnvelopeNoteOFF>
 8006570:	e000      	b.n	8006574 <midiNoteOffHandler+0x28>
	if (dbg_noteOn == FALSE) return; // debounce button
 8006572:	bf00      	nop

}
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000864 	.word	0x20000864
 800657c:	080098a8 	.word	0x080098a8

08006580 <setMidiCCParam>:

/**
 * Updates the appropriate parameter of the ADSR enveloppe
 * @param value b/w 0 and 127
 */
void setMidiCCParam(MidiCCParam param, uint8_t value){
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	460a      	mov	r2, r1
 800658a:	71fb      	strb	r3, [r7, #7]
 800658c:	4613      	mov	r3, r2
 800658e:	71bb      	strb	r3, [r7, #6]


	switch (param){
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	2b20      	cmp	r3, #32
 8006594:	f200 80cc 	bhi.w	8006730 <setMidiCCParam+0x1b0>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <setMidiCCParam+0x20>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	0800672f 	.word	0x0800672f
 80065a4:	080066bb 	.word	0x080066bb
 80065a8:	080066c5 	.word	0x080066c5
 80065ac:	080066d9 	.word	0x080066d9
 80065b0:	080066e3 	.word	0x080066e3
 80065b4:	080066cf 	.word	0x080066cf
 80065b8:	080066ed 	.word	0x080066ed
 80065bc:	080066f7 	.word	0x080066f7
 80065c0:	08006701 	.word	0x08006701
 80065c4:	0800672f 	.word	0x0800672f
 80065c8:	0800670b 	.word	0x0800670b
 80065cc:	08006715 	.word	0x08006715
 80065d0:	0800671f 	.word	0x0800671f
 80065d4:	080066a7 	.word	0x080066a7
 80065d8:	080066b1 	.word	0x080066b1
 80065dc:	0800672f 	.word	0x0800672f
 80065e0:	0800672f 	.word	0x0800672f
 80065e4:	08006689 	.word	0x08006689
 80065e8:	08006693 	.word	0x08006693
 80065ec:	0800669d 	.word	0x0800669d
 80065f0:	0800672f 	.word	0x0800672f
 80065f4:	0800672f 	.word	0x0800672f
 80065f8:	0800667f 	.word	0x0800667f
 80065fc:	0800664d 	.word	0x0800664d
 8006600:	08006657 	.word	0x08006657
 8006604:	08006661 	.word	0x08006661
 8006608:	0800666b 	.word	0x0800666b
 800660c:	08006675 	.word	0x08006675
 8006610:	08006625 	.word	0x08006625
 8006614:	0800662f 	.word	0x0800662f
 8006618:	08006639 	.word	0x08006639
 800661c:	08006643 	.word	0x08006643
 8006620:	08006729 	.word	0x08006729

		// ------------------------------ VCA ------------------------------
	case VCA_ATTACK:
		setVcaAdsrAttack(value);
 8006624:	79bb      	ldrb	r3, [r7, #6]
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe fe4a 	bl	80052c0 <setVcaAdsrAttack>
		break;
 800662c:	e080      	b.n	8006730 <setMidiCCParam+0x1b0>

	case VCA_DECAY:
		setVcaAdsrDecay(value);
 800662e:	79bb      	ldrb	r3, [r7, #6]
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe fe6d 	bl	8005310 <setVcaAdsrDecay>
		break;
 8006636:	e07b      	b.n	8006730 <setMidiCCParam+0x1b0>

	case VCA_SUSTAIN:
		setVcaAdsrSustain(value);
 8006638:	79bb      	ldrb	r3, [r7, #6]
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe fe90 	bl	8005360 <setVcaAdsrSustain>
		break;
 8006640:	e076      	b.n	8006730 <setMidiCCParam+0x1b0>

	case VCA_RELEASE:
		setVcaAdsrRelease(value);
 8006642:	79bb      	ldrb	r3, [r7, #6]
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe feab 	bl	80053a0 <setVcaAdsrRelease>
		break;
 800664a:	e071      	b.n	8006730 <setMidiCCParam+0x1b0>

		// ------------------------------ VCF ------------------------------
	case VCF_ATTACK:
		setVcfAdsrAttack(value);
 800664c:	79bb      	ldrb	r3, [r7, #6]
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe feee 	bl	8005430 <setVcfAdsrAttack>
		break;
 8006654:	e06c      	b.n	8006730 <setMidiCCParam+0x1b0>

	case VCF_DECAY:
		setVcfAdsrDecay(value);
 8006656:	79bb      	ldrb	r3, [r7, #6]
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe ff11 	bl	8005480 <setVcfAdsrDecay>
		break;
 800665e:	e067      	b.n	8006730 <setMidiCCParam+0x1b0>

	case VCF_SUSTAIN:
		setVcfAdsrSustain(value);
 8006660:	79bb      	ldrb	r3, [r7, #6]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe ff34 	bl	80054d0 <setVcfAdsrSustain>
		break;
 8006668:	e062      	b.n	8006730 <setMidiCCParam+0x1b0>

	case VCF_RELEASE:
		setVcfAdsrRelease(value);
 800666a:	79bb      	ldrb	r3, [r7, #6]
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe ff4f 	bl	8005510 <setVcfAdsrRelease>
		break;
 8006672:	e05d      	b.n	8006730 <setMidiCCParam+0x1b0>
		//TODO
		break;

		// ------------------------------ velocity ------------------------------
	case VCA_VELOCITY_SENSITIVITY:
		setVcaVelocitySensitivity(value);
 8006674:	79bb      	ldrb	r3, [r7, #6]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe feba 	bl	80053f0 <setVcaVelocitySensitivity>
		break;
 800667c:	e058      	b.n	8006730 <setMidiCCParam+0x1b0>

	case VCF_VELOCITY_SENSITIVITY:
		setVcfVelocitySensitivity(value);
 800667e:	79bb      	ldrb	r3, [r7, #6]
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe ff6d 	bl	8005560 <setVcfVelocitySensitivity>
		break;
 8006686:	e053      	b.n	8006730 <setMidiCCParam+0x1b0>

		// ------------------------------ filter ------------------------------
	case VCF_CUTOFF:
		setVcfCutoffGlobal(value);
 8006688:	79bb      	ldrb	r3, [r7, #6]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fc28 	bl	8006ee0 <setVcfCutoffGlobal>
		break;
 8006690:	e04e      	b.n	8006730 <setMidiCCParam+0x1b0>

	case VCF_RESONANCE:
		setVcfResonanceGlobal(value);
 8006692:	79bb      	ldrb	r3, [r7, #6]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fc41 	bl	8006f1c <setVcfResonanceGlobal>
		break;
 800669a:	e049      	b.n	8006730 <setMidiCCParam+0x1b0>

	case VCF_ORDER :
		setVcfOrder(value);
 800669c:	79bb      	ldrb	r3, [r7, #6]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fbf2 	bl	8006e88 <setVcfOrder>
		break;
 80066a4:	e044      	b.n	8006730 <setMidiCCParam+0x1b0>


		// ------------------------------ VCO 13700 ------------------------------

	case OCTAVE_13700 :
		setVco13700Octave(value);
 80066a6:	79bb      	ldrb	r3, [r7, #6]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fd0b 	bl	80070c4 <setVco13700Octave>
		break;
 80066ae:	e03f      	b.n	8006730 <setMidiCCParam+0x1b0>

	case DETUNE_13700 :
		setVco13700Detune(value);
 80066b0:	79bb      	ldrb	r3, [r7, #6]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fd1c 	bl	80070f0 <setVco13700Detune>
		break;
 80066b8:	e03a      	b.n	8006730 <setMidiCCParam+0x1b0>
		break;

		// ------------------------------ VCO 3340A------------------------------

	case OCTAVE_3340_A:
		setVco3340AOctave(value);
 80066ba:	79bb      	ldrb	r3, [r7, #6]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fd4b 	bl	8007158 <setVco3340AOctave>
		break;
 80066c2:	e035      	b.n	8006730 <setMidiCCParam+0x1b0>

	case DETUNE_3340_A:
		setVco3340AOctave(value);
 80066c4:	79bb      	ldrb	r3, [r7, #6]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fd46 	bl	8007158 <setVco3340AOctave>
		break;
 80066cc:	e030      	b.n	8006730 <setMidiCCParam+0x1b0>

	case LEVEL_3340_A:
		setVco3340ALevel(value);
 80066ce:	79bb      	ldrb	r3, [r7, #6]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fe1d 	bl	8007310 <setVco3340ALevel>
		break;
 80066d6:	e02b      	b.n	8006730 <setMidiCCParam+0x1b0>

	case WAVE_3340_A:
		setVco3340AWaveType(value);
 80066d8:	79bb      	ldrb	r3, [r7, #6]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fdaa 	bl	8007234 <setVco3340AWaveType>
		break;
 80066e0:	e026      	b.n	8006730 <setMidiCCParam+0x1b0>

	case PWM_3340_A:
		setVco3340APWMDuty(value);
 80066e2:	79bb      	ldrb	r3, [r7, #6]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fd71 	bl	80071cc <setVco3340APWMDuty>
		break;
 80066ea:	e021      	b.n	8006730 <setMidiCCParam+0x1b0>

	case SYNC_3340_A:
		setVco3340ASync(value);
 80066ec:	79bb      	ldrb	r3, [r7, #6]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fdf6 	bl	80072e0 <setVco3340ASync>
		break;
 80066f4:	e01c      	b.n	8006730 <setMidiCCParam+0x1b0>


		// ------------------------------ VCO3340B ------------------------------

	case OCTAVE_3340_B:
		setVco3340AOctave(value);
 80066f6:	79bb      	ldrb	r3, [r7, #6]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fd2d 	bl	8007158 <setVco3340AOctave>
		break;
 80066fe:	e017      	b.n	8006730 <setMidiCCParam+0x1b0>

	case DETUNE_3340_B:
		setVco3340AOctave(value);
 8006700:	79bb      	ldrb	r3, [r7, #6]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fd28 	bl	8007158 <setVco3340AOctave>
		break;
 8006708:	e012      	b.n	8006730 <setMidiCCParam+0x1b0>
	case PWM_3340_B:
		// TODO
		break;

	case LEVEL_TRI_3340_B:
		setVco3340BTriLevel(value);
 800670a:	79bb      	ldrb	r3, [r7, #6]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 ff09 	bl	8007524 <setVco3340BTriLevel>
		break;
 8006712:	e00d      	b.n	8006730 <setMidiCCParam+0x1b0>

	case LEVEL_SAW_3340_B:
		setVco3340BSawLevel(value);
 8006714:	79bb      	ldrb	r3, [r7, #6]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fec8 	bl	80074ac <setVco3340BSawLevel>
		break;
 800671c:	e008      	b.n	8006730 <setMidiCCParam+0x1b0>

	case LEVEL_PULSE_3340_B:
		setVco3340BPulseLevel(value);
 800671e:	79bb      	ldrb	r3, [r7, #6]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fe87 	bl	8007434 <setVco3340BPulseLevel>
		break;
 8006726:	e003      	b.n	8006730 <setMidiCCParam+0x1b0>

		// ------------------------------ MISC ------------------------------

	case CALIBRATE :
		runVcoCalibration();
 8006728:	f000 ff3a 	bl	80075a0 <runVcoCalibration>
		break;
 800672c:	e000      	b.n	8006730 <setMidiCCParam+0x1b0>

	case UNUSED_CC:
		break;
 800672e:	bf00      	nop
	}
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <processIncomingMidiMessage>:

/**
 * Generally called when a MIDI message of three successive bytes has been received on the SPI bus,
 * @param status a MIDI status byte, e.g., MIDI CC or NOTE ON
 */
void processIncomingMidiMessage(uint8_t statusChannel, uint8_t data1, uint8_t data2){
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	71fb      	strb	r3, [r7, #7]
 8006742:	460b      	mov	r3, r1
 8006744:	71bb      	strb	r3, [r7, #6]
 8006746:	4613      	mov	r3, r2
 8006748:	717b      	strb	r3, [r7, #5]

	int channel = statusChannel & 0x0F;
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	60fb      	str	r3, [r7, #12]
	int status = statusChannel & 0xF0;
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006758:	60bb      	str	r3, [r7, #8]

	switch (status){
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b90      	cmp	r3, #144	; 0x90
 800675e:	d004      	beq.n	800676a <processIncomingMidiMessage+0x32>
 8006760:	2bb0      	cmp	r3, #176	; 0xb0
 8006762:	d011      	beq.n	8006788 <processIncomingMidiMessage+0x50>
 8006764:	2b80      	cmp	r3, #128	; 0x80
 8006766:	d00c      	beq.n	8006782 <processIncomingMidiMessage+0x4a>

	case CONTROL_CHANGE:
		setMidiCCParam(midiccCodeToParams[data1], data2);
		break;
	}
}
 8006768:	e018      	b.n	800679c <processIncomingMidiMessage+0x64>
		if (channel == DRUM_CHANNEL){
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b0a      	cmp	r3, #10
 800676e:	d014      	beq.n	800679a <processIncomingMidiMessage+0x62>
			midiNote.note = data1; // TODO SR Dec 3rd 2019: maybe move these two lines into miniNoteOnHandler() for coherence?
 8006770:	79bb      	ldrb	r3, [r7, #6]
 8006772:	4a0c      	ldr	r2, [pc, #48]	; (80067a4 <processIncomingMidiMessage+0x6c>)
 8006774:	6013      	str	r3, [r2, #0]
			midiNote.velocity = data2; // but this implies changing the prototype of midiNoteOnHandler()
 8006776:	797b      	ldrb	r3, [r7, #5]
 8006778:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <processIncomingMidiMessage+0x6c>)
 800677a:	6053      	str	r3, [r2, #4]
			midiNoteOnHandler();
 800677c:	f7ff fecc 	bl	8006518 <midiNoteOnHandler>
		break;
 8006780:	e00b      	b.n	800679a <processIncomingMidiMessage+0x62>
		midiNoteOffHandler();
 8006782:	f7ff fee3 	bl	800654c <midiNoteOffHandler>
		break;
 8006786:	e009      	b.n	800679c <processIncomingMidiMessage+0x64>
		setMidiCCParam(midiccCodeToParams[data1], data2);
 8006788:	79bb      	ldrb	r3, [r7, #6]
 800678a:	4a07      	ldr	r2, [pc, #28]	; (80067a8 <processIncomingMidiMessage+0x70>)
 800678c:	5cd3      	ldrb	r3, [r2, r3]
 800678e:	797a      	ldrb	r2, [r7, #5]
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff fef4 	bl	8006580 <setMidiCCParam>
		break;
 8006798:	e000      	b.n	800679c <processIncomingMidiMessage+0x64>
		break;
 800679a:	bf00      	nop
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20000110 	.word	0x20000110
 80067a8:	20000118 	.word	0x20000118

080067ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80067b2:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <HAL_MspInit+0x44>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	4a0e      	ldr	r2, [pc, #56]	; (80067f0 <HAL_MspInit+0x44>)
 80067b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067bc:	6413      	str	r3, [r2, #64]	; 0x40
 80067be:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <HAL_MspInit+0x44>)
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <HAL_MspInit+0x44>)
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <HAL_MspInit+0x44>)
 80067d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067d4:	6453      	str	r3, [r2, #68]	; 0x44
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_MspInit+0x44>)
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	40023800 	.word	0x40023800

080067f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08a      	sub	sp, #40	; 0x28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067fc:	f107 0314 	add.w	r3, r7, #20
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	609a      	str	r2, [r3, #8]
 8006808:	60da      	str	r2, [r3, #12]
 800680a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a17      	ldr	r2, [pc, #92]	; (8006870 <HAL_I2C_MspInit+0x7c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d128      	bne.n	8006868 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006816:	4b17      	ldr	r3, [pc, #92]	; (8006874 <HAL_I2C_MspInit+0x80>)
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	4a16      	ldr	r2, [pc, #88]	; (8006874 <HAL_I2C_MspInit+0x80>)
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	6313      	str	r3, [r2, #48]	; 0x30
 8006822:	4b14      	ldr	r3, [pc, #80]	; (8006874 <HAL_I2C_MspInit+0x80>)
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800682e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006834:	2312      	movs	r3, #18
 8006836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006838:	2301      	movs	r3, #1
 800683a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800683c:	2303      	movs	r3, #3
 800683e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006840:	2304      	movs	r3, #4
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	4619      	mov	r1, r3
 800684a:	480b      	ldr	r0, [pc, #44]	; (8006878 <HAL_I2C_MspInit+0x84>)
 800684c:	f7fa f87c 	bl	8000948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006850:	4b08      	ldr	r3, [pc, #32]	; (8006874 <HAL_I2C_MspInit+0x80>)
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	4a07      	ldr	r2, [pc, #28]	; (8006874 <HAL_I2C_MspInit+0x80>)
 8006856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800685a:	6413      	str	r3, [r2, #64]	; 0x40
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <HAL_I2C_MspInit+0x80>)
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006868:	bf00      	nop
 800686a:	3728      	adds	r7, #40	; 0x28
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40005400 	.word	0x40005400
 8006874:	40023800 	.word	0x40023800
 8006878:	40020400 	.word	0x40020400

0800687c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08c      	sub	sp, #48	; 0x30
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006884:	f107 031c 	add.w	r3, r7, #28
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	605a      	str	r2, [r3, #4]
 800688e:	609a      	str	r2, [r3, #8]
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a41      	ldr	r2, [pc, #260]	; (80069a0 <HAL_SPI_MspInit+0x124>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d145      	bne.n	800692a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800689e:	4b41      	ldr	r3, [pc, #260]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	4a40      	ldr	r2, [pc, #256]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 80068a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a8:	6413      	str	r3, [r2, #64]	; 0x40
 80068aa:	4b3e      	ldr	r3, [pc, #248]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068b6:	4b3b      	ldr	r3, [pc, #236]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 80068b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ba:	4a3a      	ldr	r2, [pc, #232]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 80068bc:	f043 0302 	orr.w	r3, r3, #2
 80068c0:	6313      	str	r3, [r2, #48]	; 0x30
 80068c2:	4b38      	ldr	r3, [pc, #224]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ce:	4b35      	ldr	r3, [pc, #212]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	4a34      	ldr	r2, [pc, #208]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 80068d4:	f043 0304 	orr.w	r3, r3, #4
 80068d8:	6313      	str	r3, [r2, #48]	; 0x30
 80068da:	4b32      	ldr	r3, [pc, #200]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration    
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068e6:	2304      	movs	r3, #4
 80068e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068ea:	2302      	movs	r3, #2
 80068ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068f2:	2303      	movs	r3, #3
 80068f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80068f6:	2307      	movs	r3, #7
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068fa:	f107 031c 	add.w	r3, r7, #28
 80068fe:	4619      	mov	r1, r3
 8006900:	4829      	ldr	r0, [pc, #164]	; (80069a8 <HAL_SPI_MspInit+0x12c>)
 8006902:	f7fa f821 	bl	8000948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800690a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690c:	2302      	movs	r3, #2
 800690e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006910:	2300      	movs	r3, #0
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006914:	2303      	movs	r3, #3
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006918:	2306      	movs	r3, #6
 800691a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800691c:	f107 031c 	add.w	r3, r7, #28
 8006920:	4619      	mov	r1, r3
 8006922:	4822      	ldr	r0, [pc, #136]	; (80069ac <HAL_SPI_MspInit+0x130>)
 8006924:	f7fa f810 	bl	8000948 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8006928:	e035      	b.n	8006996 <HAL_SPI_MspInit+0x11a>
  else if(hspi->Instance==SPI5)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a20      	ldr	r2, [pc, #128]	; (80069b0 <HAL_SPI_MspInit+0x134>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d130      	bne.n	8006996 <HAL_SPI_MspInit+0x11a>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 8006936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006938:	4a1a      	ldr	r2, [pc, #104]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 800693a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800693e:	6453      	str	r3, [r2, #68]	; 0x44
 8006940:	4b18      	ldr	r3, [pc, #96]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 8006942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800694c:	4b15      	ldr	r3, [pc, #84]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	4a14      	ldr	r2, [pc, #80]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 8006952:	f043 0320 	orr.w	r3, r3, #32
 8006956:	6313      	str	r3, [r2, #48]	; 0x30
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <HAL_SPI_MspInit+0x128>)
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8006964:	f44f 7320 	mov.w	r3, #640	; 0x280
 8006968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800696a:	2302      	movs	r3, #2
 800696c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006972:	2303      	movs	r3, #3
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006976:	2305      	movs	r3, #5
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800697a:	f107 031c 	add.w	r3, r7, #28
 800697e:	4619      	mov	r1, r3
 8006980:	480c      	ldr	r0, [pc, #48]	; (80069b4 <HAL_SPI_MspInit+0x138>)
 8006982:	f7f9 ffe1 	bl	8000948 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 8006986:	2200      	movs	r2, #0
 8006988:	2100      	movs	r1, #0
 800698a:	2055      	movs	r0, #85	; 0x55
 800698c:	f7f9 ff83 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8006990:	2055      	movs	r0, #85	; 0x55
 8006992:	f7f9 ff9c 	bl	80008ce <HAL_NVIC_EnableIRQ>
}
 8006996:	bf00      	nop
 8006998:	3730      	adds	r7, #48	; 0x30
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40003c00 	.word	0x40003c00
 80069a4:	40023800 	.word	0x40023800
 80069a8:	40020400 	.word	0x40020400
 80069ac:	40020800 	.word	0x40020800
 80069b0:	40015000 	.word	0x40015000
 80069b4:	40021400 	.word	0x40021400

080069b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08c      	sub	sp, #48	; 0x30
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069c0:	f107 031c 	add.w	r3, r7, #28
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	609a      	str	r2, [r3, #8]
 80069cc:	60da      	str	r2, [r3, #12]
 80069ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a36      	ldr	r2, [pc, #216]	; (8006ab0 <HAL_TIM_Base_MspInit+0xf8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d114      	bne.n	8006a04 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80069da:	4b36      	ldr	r3, [pc, #216]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 80069dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069de:	4a35      	ldr	r2, [pc, #212]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	6453      	str	r3, [r2, #68]	; 0x44
 80069e6:	4b33      	ldr	r3, [pc, #204]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	61bb      	str	r3, [r7, #24]
 80069f0:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80069f2:	2200      	movs	r2, #0
 80069f4:	2100      	movs	r1, #0
 80069f6:	2019      	movs	r0, #25
 80069f8:	f7f9 ff4d 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80069fc:	2019      	movs	r0, #25
 80069fe:	f7f9 ff66 	bl	80008ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006a02:	e051      	b.n	8006aa8 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM2)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0c:	d14c      	bne.n	8006aa8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006a0e:	4b29      	ldr	r3, [pc, #164]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	4a28      	ldr	r2, [pc, #160]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	6413      	str	r3, [r2, #64]	; 0x40
 8006a1a:	4b26      	ldr	r3, [pc, #152]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a26:	4b23      	ldr	r3, [pc, #140]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	4a22      	ldr	r2, [pc, #136]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6313      	str	r3, [r2, #48]	; 0x30
 8006a32:	4b20      	ldr	r3, [pc, #128]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a3e:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	4a1c      	ldr	r2, [pc, #112]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8006a44:	f043 0302 	orr.w	r3, r3, #2
 8006a48:	6313      	str	r3, [r2, #48]	; 0x30
 8006a4a:	4b1a      	ldr	r3, [pc, #104]	; (8006ab4 <HAL_TIM_Base_MspInit+0xfc>)
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8006a56:	2309      	movs	r3, #9
 8006a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a62:	2300      	movs	r3, #0
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a66:	2301      	movs	r3, #1
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a6a:	f107 031c 	add.w	r3, r7, #28
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4811      	ldr	r0, [pc, #68]	; (8006ab8 <HAL_TIM_Base_MspInit+0x100>)
 8006a72:	f7f9 ff69 	bl	8000948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a84:	2300      	movs	r3, #0
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a8c:	f107 031c 	add.w	r3, r7, #28
 8006a90:	4619      	mov	r1, r3
 8006a92:	480a      	ldr	r0, [pc, #40]	; (8006abc <HAL_TIM_Base_MspInit+0x104>)
 8006a94:	f7f9 ff58 	bl	8000948 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	201c      	movs	r0, #28
 8006a9e:	f7f9 fefa 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006aa2:	201c      	movs	r0, #28
 8006aa4:	f7f9 ff13 	bl	80008ce <HAL_NVIC_EnableIRQ>
}
 8006aa8:	bf00      	nop
 8006aaa:	3730      	adds	r7, #48	; 0x30
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	40020000 	.word	0x40020000
 8006abc:	40020400 	.word	0x40020400

08006ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08c      	sub	sp, #48	; 0x30
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ac8:	f107 031c 	add.w	r3, r7, #28
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a45      	ldr	r2, [pc, #276]	; (8006bf4 <HAL_UART_MspInit+0x134>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d14e      	bne.n	8006b80 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006ae2:	4b45      	ldr	r3, [pc, #276]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	4a44      	ldr	r2, [pc, #272]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aec:	6413      	str	r3, [r2, #64]	; 0x40
 8006aee:	4b42      	ldr	r3, [pc, #264]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006afa:	4b3f      	ldr	r3, [pc, #252]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	4a3e      	ldr	r2, [pc, #248]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	6313      	str	r3, [r2, #48]	; 0x30
 8006b06:	4b3c      	ldr	r3, [pc, #240]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b12:	4b39      	ldr	r3, [pc, #228]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	4a38      	ldr	r2, [pc, #224]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006b18:	f043 0304 	orr.w	r3, r3, #4
 8006b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b1e:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b30:	2302      	movs	r3, #2
 8006b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b40:	f107 031c 	add.w	r3, r7, #28
 8006b44:	4619      	mov	r1, r3
 8006b46:	482d      	ldr	r0, [pc, #180]	; (8006bfc <HAL_UART_MspInit+0x13c>)
 8006b48:	f7f9 fefe 	bl	8000948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b52:	2302      	movs	r3, #2
 8006b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006b5e:	2308      	movs	r3, #8
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b62:	f107 031c 	add.w	r3, r7, #28
 8006b66:	4619      	mov	r1, r3
 8006b68:	4825      	ldr	r0, [pc, #148]	; (8006c00 <HAL_UART_MspInit+0x140>)
 8006b6a:	f7f9 feed 	bl	8000948 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2100      	movs	r1, #0
 8006b72:	2035      	movs	r0, #53	; 0x35
 8006b74:	f7f9 fe8f 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006b78:	2035      	movs	r0, #53	; 0x35
 8006b7a:	f7f9 fea8 	bl	80008ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006b7e:	e035      	b.n	8006bec <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <HAL_UART_MspInit+0x144>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d130      	bne.n	8006bec <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	4a1a      	ldr	r2, [pc, #104]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b94:	6413      	str	r3, [r2, #64]	; 0x40
 8006b96:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	4a14      	ldr	r2, [pc, #80]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006ba8:	f043 0308 	orr.w	r3, r3, #8
 8006bac:	6313      	str	r3, [r2, #48]	; 0x30
 8006bae:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <HAL_UART_MspInit+0x138>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	60bb      	str	r3, [r7, #8]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006bcc:	2307      	movs	r3, #7
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bd0:	f107 031c 	add.w	r3, r7, #28
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	480c      	ldr	r0, [pc, #48]	; (8006c08 <HAL_UART_MspInit+0x148>)
 8006bd8:	f7f9 feb6 	bl	8000948 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2100      	movs	r1, #0
 8006be0:	2027      	movs	r0, #39	; 0x27
 8006be2:	f7f9 fe58 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006be6:	2027      	movs	r0, #39	; 0x27
 8006be8:	f7f9 fe71 	bl	80008ce <HAL_NVIC_EnableIRQ>
}
 8006bec:	bf00      	nop
 8006bee:	3730      	adds	r7, #48	; 0x30
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40005000 	.word	0x40005000
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	40020400 	.word	0x40020400
 8006c00:	40020800 	.word	0x40020800
 8006c04:	40004800 	.word	0x40004800
 8006c08:	40020c00 	.word	0x40020c00

08006c0c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c10:	f7f9 fd24 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c14:	bf00      	nop
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8006c1c:	2040      	movs	r0, #64	; 0x40
 8006c1e:	f7fa f889 	bl	8000d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006c22:	bf00      	nop
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006c2c:	4802      	ldr	r0, [pc, #8]	; (8006c38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006c2e:	f7fc fb9b 	bl	8003368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006c32:	bf00      	nop
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000aac 	.word	0x20000aac

08006c3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006c40:	4802      	ldr	r0, [pc, #8]	; (8006c4c <TIM2_IRQHandler+0x10>)
 8006c42:	f7fc fb91 	bl	8003368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000af0 	.word	0x20000af0

08006c50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006c54:	4802      	ldr	r0, [pc, #8]	; (8006c60 <USART3_IRQHandler+0x10>)
 8006c56:	f7fd faa1 	bl	800419c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006c5a:	bf00      	nop
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	200008e4 	.word	0x200008e4

08006c64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006c68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006c6c:	f7fa f862 	bl	8000d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006c70:	bf00      	nop
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006c78:	4802      	ldr	r0, [pc, #8]	; (8006c84 <UART5_IRQHandler+0x10>)
 8006c7a:	f7fd fa8f 	bl	800419c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006c7e:	bf00      	nop
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000a24 	.word	0x20000a24

08006c88 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8006c8c:	4802      	ldr	r0, [pc, #8]	; (8006c98 <SPI5_IRQHandler+0x10>)
 8006c8e:	f7fb febf 	bl	8002a10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8006c92:	bf00      	nop
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000880 	.word	0x20000880

08006c9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e00a      	b.n	8006cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006cae:	f3af 8000 	nop.w
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	60ba      	str	r2, [r7, #8]
 8006cba:	b2ca      	uxtb	r2, r1
 8006cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	dbf0      	blt.n	8006cae <_read+0x12>
	}

return len;
 8006ccc:	687b      	ldr	r3, [r7, #4]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e009      	b.n	8006cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	60ba      	str	r2, [r7, #8]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff f99b 	bl	800602c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	dbf1      	blt.n	8006ce8 <_write+0x12>
	}
	return len;
 8006d04:	687b      	ldr	r3, [r7, #4]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <_close>:

int _close(int file)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
	return -1;
 8006d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d36:	605a      	str	r2, [r3, #4]
	return 0;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <_isatty>:

int _isatty(int file)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8006d4e:	2301      	movs	r3, #1
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
	return 0;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
	...

08006d78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006d80:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <_sbrk+0x50>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <_sbrk+0x16>
		heap_end = &end;
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <_sbrk+0x50>)
 8006d8a:	4a10      	ldr	r2, [pc, #64]	; (8006dcc <_sbrk+0x54>)
 8006d8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <_sbrk+0x50>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006d94:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <_sbrk+0x50>)
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	466a      	mov	r2, sp
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d907      	bls.n	8006db2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006da2:	f000 ff49 	bl	8007c38 <__errno>
 8006da6:	4602      	mov	r2, r0
 8006da8:	230c      	movs	r3, #12
 8006daa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006db0:	e006      	b.n	8006dc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <_sbrk+0x50>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	4a03      	ldr	r2, [pc, #12]	; (8006dc8 <_sbrk+0x50>)
 8006dbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20000868 	.word	0x20000868
 8006dcc:	20000b50 	.word	0x20000b50

08006dd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006dd4:	4b15      	ldr	r3, [pc, #84]	; (8006e2c <SystemInit+0x5c>)
 8006dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dda:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <SystemInit+0x5c>)
 8006ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006de4:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <SystemInit+0x60>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a11      	ldr	r2, [pc, #68]	; (8006e30 <SystemInit+0x60>)
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006df0:	4b0f      	ldr	r3, [pc, #60]	; (8006e30 <SystemInit+0x60>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006df6:	4b0e      	ldr	r3, [pc, #56]	; (8006e30 <SystemInit+0x60>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	490d      	ldr	r1, [pc, #52]	; (8006e30 <SystemInit+0x60>)
 8006dfc:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <SystemInit+0x64>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006e02:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <SystemInit+0x60>)
 8006e04:	4a0c      	ldr	r2, [pc, #48]	; (8006e38 <SystemInit+0x68>)
 8006e06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006e08:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <SystemInit+0x60>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a08      	ldr	r2, [pc, #32]	; (8006e30 <SystemInit+0x60>)
 8006e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <SystemInit+0x60>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e1a:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <SystemInit+0x5c>)
 8006e1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e20:	609a      	str	r2, [r3, #8]
#endif
}
 8006e22:	bf00      	nop
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	e000ed00 	.word	0xe000ed00
 8006e30:	40023800 	.word	0x40023800
 8006e34:	fef6ffff 	.word	0xfef6ffff
 8006e38:	24003010 	.word	0x24003010
 8006e3c:	00000000 	.word	0x00000000

08006e40 <dacVcaWrite>:

/**
 *  write the given amplitude to the VCA control voltage through the appropriate DAC
 *  @param amplitude must be b/w 0 and 1
 */
void dacVcaWrite(double amplitude){
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	ed87 0b00 	vstr	d0, [r7]

	amplitude = 1.0 - amplitude; // attenuation by the V2140D VCA is proportional to Control Voltage
 8006e4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006e4e:	ed97 7b00 	vldr	d7, [r7]
 8006e52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e56:	ed87 7b00 	vstr	d7, [r7]
	int i = (int)(amplitude * 4095);
 8006e5a:	ed97 7b00 	vldr	d7, [r7]
 8006e5e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8006e80 <dacVcaWrite+0x40>
 8006e62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e66:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006e6a:	ee17 3a90 	vmov	r3, s15
 8006e6e:	60fb      	str	r3, [r7, #12]
	dacWrite(i, DAC_V2140D_VCA);
 8006e70:	211a      	movs	r1, #26
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff fa96 	bl	80063a4 <dacWrite>
}
 8006e78:	bf00      	nop
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	00000000 	.word	0x00000000
 8006e84:	40affe00 	.word	0x40affe00

08006e88 <setVcfOrder>:
		.vcfResonance = MAX_RESONANCE * DEF_MIDICC_RESONANCE / 127.0
};

/* Private function prototypes -----------------------------------------------*/

void setVcfOrder(uint8_t value){
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	71fb      	strb	r3, [r7, #7]
	value = value % 2;
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	71fb      	strb	r3, [r7, #7]
	if (value == 0){ // 2nd order
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <setVcfOrder+0x2e>
		HAL_GPIO_WritePin(VCF_4THORDER_GPIO_Port, VCF_4THORDER_Pin, GPIO_PIN_RESET);
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2104      	movs	r1, #4
 8006ea4:	480c      	ldr	r0, [pc, #48]	; (8006ed8 <setVcfOrder+0x50>)
 8006ea6:	f7f9 ff11 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VCF_2NDORDER_GPIO_Port, VCF_2NDORDER_Pin, GPIO_PIN_SET);
 8006eaa:	2201      	movs	r2, #1
 8006eac:	2110      	movs	r1, #16
 8006eae:	480a      	ldr	r0, [pc, #40]	; (8006ed8 <setVcfOrder+0x50>)
 8006eb0:	f7f9 ff0c 	bl	8000ccc <HAL_GPIO_WritePin>
	}
	else if (value ==1){ // 4th order
		HAL_GPIO_WritePin(VCF_2NDORDER_GPIO_Port, VCF_2NDORDER_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(VCF_4THORDER_GPIO_Port, VCF_4THORDER_Pin, GPIO_PIN_SET);
	}
}
 8006eb4:	e00c      	b.n	8006ed0 <setVcfOrder+0x48>
	else if (value ==1){ // 4th order
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d109      	bne.n	8006ed0 <setVcfOrder+0x48>
		HAL_GPIO_WritePin(VCF_2NDORDER_GPIO_Port, VCF_2NDORDER_Pin, GPIO_PIN_RESET);
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2110      	movs	r1, #16
 8006ec0:	4805      	ldr	r0, [pc, #20]	; (8006ed8 <setVcfOrder+0x50>)
 8006ec2:	f7f9 ff03 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VCF_4THORDER_GPIO_Port, VCF_4THORDER_Pin, GPIO_PIN_SET);
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	2104      	movs	r1, #4
 8006eca:	4803      	ldr	r0, [pc, #12]	; (8006ed8 <setVcfOrder+0x50>)
 8006ecc:	f7f9 fefe 	bl	8000ccc <HAL_GPIO_WritePin>
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	00000000 	.word	0x00000000

08006ee0 <setVcfCutoffGlobal>:

void setVcfCutoffGlobal(uint8_t value){
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	71fb      	strb	r3, [r7, #7]
	globalFilterParams.vcfCutoff = value/127.0;
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	ee07 3a90 	vmov	s15, r3
 8006ef0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006ef4:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8006f10 <setVcfCutoffGlobal+0x30>
 8006ef8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <setVcfCutoffGlobal+0x38>)
 8006efe:	ed83 7b00 	vstr	d7, [r3]
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	00000000 	.word	0x00000000
 8006f14:	405fc000 	.word	0x405fc000
 8006f18:	200001a0 	.word	0x200001a0

08006f1c <setVcfResonanceGlobal>:


void setVcfResonanceGlobal(uint8_t value){
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	71fb      	strb	r3, [r7, #7]
	globalFilterParams.vcfResonance = value;
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	ee07 3a90 	vmov	s15, r3
 8006f2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <setVcfResonanceGlobal+0x28>)
 8006f32:	ed83 7b02 	vstr	d7, [r3, #8]

}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	200001a0 	.word	0x200001a0

08006f48 <updateVcfResonance>:

void updateVcfResonance(){
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
	dacWrite((int) (MAX_RESONANCE * globalFilterParams.vcfResonance/127.), DAC_VCF_RES);
 8006f4c:	4b0e      	ldr	r3, [pc, #56]	; (8006f88 <updateVcfResonance+0x40>)
 8006f4e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006f52:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8006f78 <updateVcfResonance+0x30>
 8006f56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f5a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8006f80 <updateVcfResonance+0x38>
 8006f5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f62:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006f66:	2106      	movs	r1, #6
 8006f68:	ee17 0a90 	vmov	r0, s15
 8006f6c:	f7ff fa1a 	bl	80063a4 <dacWrite>
}
 8006f70:	bf00      	nop
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	f3af 8000 	nop.w
 8006f78:	00000000 	.word	0x00000000
 8006f7c:	40affe00 	.word	0x40affe00
 8006f80:	00000000 	.word	0x00000000
 8006f84:	405fc000 	.word	0x405fc000
 8006f88:	200001a0 	.word	0x200001a0

08006f8c <initVcf>:


void initVcf(){
 8006f8c:	b598      	push	{r3, r4, r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
	stateMachineVcf.cutoffFrequency = globalFilterParams.vcfCutoff;
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <initVcf+0x1c>)
 8006f92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f96:	4a05      	ldr	r2, [pc, #20]	; (8006fac <initVcf+0x20>)
 8006f98:	e9c2 3404 	strd	r3, r4, [r2, #16]
	setVcfOrder(0);
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	f7ff ff73 	bl	8006e88 <setVcfOrder>
}
 8006fa2:	bf00      	nop
 8006fa4:	bd98      	pop	{r3, r4, r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200001a0 	.word	0x200001a0
 8006fac:	20000070 	.word	0x20000070

08006fb0 <updateVcfCutoff>:

void updateVcfCutoff(){
 8006fb0:	b590      	push	{r4, r7, lr}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0

	// cutoff frequency varies as opposed to control voltage:
	double cutoff = stateMachineVcf.cutoffFrequency; // +stateMachineVcf.tmpKbdtrackingShiftFactor; // TODO : + dbg_modulation
 8006fb6:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <updateVcfCutoff+0x48>)
 8006fb8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006fbc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	int dacLvl = (int)(4095.0 * (1.0-cutoff));
 8006fc0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006fc4:	ed97 7b02 	vldr	d7, [r7, #8]
 8006fc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fcc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8006ff0 <updateVcfCutoff+0x40>
 8006fd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fd4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006fd8:	ee17 3a90 	vmov	r3, s15
 8006fdc:	607b      	str	r3, [r7, #4]
	dacWrite(dacLvl, DAC_VCF_CUTOFF);
 8006fde:	2105      	movs	r1, #5
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff f9df 	bl	80063a4 <dacWrite>
}
 8006fe6:	bf00      	nop
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd90      	pop	{r4, r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	00000000 	.word	0x00000000
 8006ff4:	40affe00 	.word	0x40affe00
 8006ff8:	20000070 	.word	0x20000070

08006ffc <initVco>:
0, 0, 0, 0, 0, 0, 0 };


/* Private function prototypes -----------------------------------------------*/

void initVco(){
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0

	setVco3340AWaveType(DEF_MIDICC_VCO3340A_WAVE);
 8007000:	2000      	movs	r0, #0
 8007002:	f000 f917 	bl	8007234 <setVco3340AWaveType>
	setVco3340ASync(0);
 8007006:	2000      	movs	r0, #0
 8007008:	f000 f96a 	bl	80072e0 <setVco3340ASync>

	midiNote.note = DEF_MIDI_NOTE;
 800700c:	4b17      	ldr	r3, [pc, #92]	; (800706c <initVco+0x70>)
 800700e:	2230      	movs	r2, #48	; 0x30
 8007010:	601a      	str	r2, [r3, #0]

	setVco3340APWMDuty(DEF_MIDICC_VCO3340A_PWM_DUTY);
 8007012:	207f      	movs	r0, #127	; 0x7f
 8007014:	f000 f8da 	bl	80071cc <setVco3340APWMDuty>
	setVco3340BPWMDuty(DEF_MIDICC_VCO3340B_PWM_DUTY);
 8007018:	207f      	movs	r0, #127	; 0x7f
 800701a:	f000 f9d7 	bl	80073cc <setVco3340BPWMDuty>

	// mute unused mixers:
	dacWrite(4095, DAC_V2140D_IN4); HAL_Delay(1); // not connected yet
 800701e:	210a      	movs	r1, #10
 8007020:	f640 70ff 	movw	r0, #4095	; 0xfff
 8007024:	f7ff f9be 	bl	80063a4 <dacWrite>
 8007028:	2001      	movs	r0, #1
 800702a:	f7f9 fb37 	bl	800069c <HAL_Delay>
	dacWrite(4095,DAC_V2140D_IN5); HAL_Delay(1);  // not connected yet
 800702e:	210b      	movs	r1, #11
 8007030:	f640 70ff 	movw	r0, #4095	; 0xfff
 8007034:	f7ff f9b6 	bl	80063a4 <dacWrite>
 8007038:	2001      	movs	r0, #1
 800703a:	f7f9 fb2f 	bl	800069c <HAL_Delay>
	dacWrite(4095,DAC_V2140D_IN6); HAL_Delay(1);  // not connected yet
 800703e:	210c      	movs	r1, #12
 8007040:	f640 70ff 	movw	r0, #4095	; 0xfff
 8007044:	f7ff f9ae 	bl	80063a4 <dacWrite>
 8007048:	2001      	movs	r0, #1
 800704a:	f7f9 fb27 	bl	800069c <HAL_Delay>

	setVco3340ALevel(DEF_MIDICC_VCO3340A_LEVEL);
 800704e:	207f      	movs	r0, #127	; 0x7f
 8007050:	f000 f95e 	bl	8007310 <setVco3340ALevel>
	setVco3340BPulseLevel(DEF_MIDICC_VCO3340B_PULSE_LEVEL);
 8007054:	207f      	movs	r0, #127	; 0x7f
 8007056:	f000 f9ed 	bl	8007434 <setVco3340BPulseLevel>
	setVco3340BSawLevel(DEF_MIDICC_VCO3340B_SAW_LEVEL);
 800705a:	2000      	movs	r0, #0
 800705c:	f000 fa26 	bl	80074ac <setVco3340BSawLevel>
	setVco3340BTriLevel(DEF_MIDICC_VCO3340B_TRI_LEVEL);
 8007060:	2000      	movs	r0, #0
 8007062:	f000 fa5f 	bl	8007524 <setVco3340BTriLevel>


}
 8007066:	bf00      	nop
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000110 	.word	0x20000110

08007070 <prepareVCOForCalibration>:

// used during calibration:
void prepareVCOForCalibration(){
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRI_3340_GPIO_Port, TRI_3340_Pin, GPIO_PIN_RESET);
 8007074:	2200      	movs	r2, #0
 8007076:	2140      	movs	r1, #64	; 0x40
 8007078:	480f      	ldr	r0, [pc, #60]	; (80070b8 <prepareVCOForCalibration+0x48>)
 800707a:	f7f9 fe27 	bl	8000ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SAW_3340_GPIO_Port, SAW_3340_Pin, GPIO_PIN_RESET);
 800707e:	2200      	movs	r2, #0
 8007080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007084:	480d      	ldr	r0, [pc, #52]	; (80070bc <prepareVCOForCalibration+0x4c>)
 8007086:	f7f9 fe21 	bl	8000ccc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PULSE_3340_GPIO_Port, PULSE_3340_Pin, GPIO_PIN_RESET);
 800708a:	2200      	movs	r2, #0
 800708c:	2101      	movs	r1, #1
 800708e:	480c      	ldr	r0, [pc, #48]	; (80070c0 <prepareVCOForCalibration+0x50>)
 8007090:	f7f9 fe1c 	bl	8000ccc <HAL_GPIO_WritePin>
	dacWrite(MAX_VCO3340A_PWM_DUTY, DAC_VCO_3340A_PWM_DUTY); HAL_Delay(1);
 8007094:	2102      	movs	r1, #2
 8007096:	f640 1092 	movw	r0, #2450	; 0x992
 800709a:	f7ff f983 	bl	80063a4 <dacWrite>
 800709e:	2001      	movs	r0, #1
 80070a0:	f7f9 fafc 	bl	800069c <HAL_Delay>
	dacWrite(MAX_VCO3340B_PWM_DUTY, DAC_VCO_3340B_PWM_DUTY); HAL_Delay(1);
 80070a4:	2104      	movs	r1, #4
 80070a6:	f640 1092 	movw	r0, #2450	; 0x992
 80070aa:	f7ff f97b 	bl	80063a4 <dacWrite>
 80070ae:	2001      	movs	r0, #1
 80070b0:	f7f9 faf4 	bl	800069c <HAL_Delay>

}
 80070b4:	bf00      	nop
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	40021000 	.word	0x40021000
 80070bc:	40021800 	.word	0x40021800
 80070c0:	40020c00 	.word	0x40020c00

080070c4 <setVco13700Octave>:

// ---------------------------------------------------------------------------------------------------
//                      vco 13700
// ---------------------------------------------------------------------------------------------------

void setVco13700Octave(uint8_t midiValue){
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	71fb      	strb	r3, [r7, #7]
	if (midiValue > 4 || midiValue < 0) midiValue = CENTER_OCTAVE;
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d901      	bls.n	80070d8 <setVco13700Octave+0x14>
 80070d4:	2302      	movs	r3, #2
 80070d6:	71fb      	strb	r3, [r7, #7]
	vco13700.octave = midiValue;
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	4a04      	ldr	r2, [pc, #16]	; (80070ec <setVco13700Octave+0x28>)
 80070dc:	6053      	str	r3, [r2, #4]
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	200001b0 	.word	0x200001b0

080070f0 <setVco13700Detune>:

void setVco13700Detune(uint8_t value){
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	71fb      	strb	r3, [r7, #7]
	vco13700.detune = value;
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	4a03      	ldr	r2, [pc, #12]	; (800710c <setVco13700Detune+0x1c>)
 80070fe:	6013      	str	r3, [r2, #0]
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	200001b0 	.word	0x200001b0

08007110 <updateVco13700Freq>:

void updateVco13700Freq(){
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0

	int dacLvl = midiToVCO13700CV[midiNote.note + 12 * (vco13700.octave-CENTER_OCTAVE)] + vco13700.detune - NO_DETUNE;
 8007116:	4b0d      	ldr	r3, [pc, #52]	; (800714c <updateVco13700Freq+0x3c>)
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	4b0d      	ldr	r3, [pc, #52]	; (8007150 <updateVco13700Freq+0x40>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	1e9a      	subs	r2, r3, #2
 8007120:	4613      	mov	r3, r2
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <updateVco13700Freq+0x44>)
 800712c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <updateVco13700Freq+0x40>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4413      	add	r3, r2
 8007136:	3b40      	subs	r3, #64	; 0x40
 8007138:	607b      	str	r3, [r7, #4]
	dacWrite(dacLvl, DAC_VCO_13700_FREQ);
 800713a:	2100      	movs	r1, #0
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff f931 	bl	80063a4 <dacWrite>

}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000110 	.word	0x20000110
 8007150:	200001b0 	.word	0x200001b0
 8007154:	200005d0 	.word	0x200005d0

08007158 <setVco3340AOctave>:
// ---------------------------------------------------------------------------------------------------
//                       vco 3340A (the one with the analog switch IC plugged in)
// ---------------------------------------------------------------------------------------------------

// a midi value of 2 yields the center octave ; a value of 0 leads to -2 octaves ; a value of 4 leads to +2 octaves
void setVco3340AOctave(uint8_t midiValue){
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	71fb      	strb	r3, [r7, #7]
	if (midiValue > 4 || midiValue < 0) midiValue = CENTER_OCTAVE;
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	2b04      	cmp	r3, #4
 8007166:	d901      	bls.n	800716c <setVco3340AOctave+0x14>
 8007168:	2302      	movs	r3, #2
 800716a:	71fb      	strb	r3, [r7, #7]
	vco3340A.octave = midiValue;
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	4a04      	ldr	r2, [pc, #16]	; (8007180 <setVco3340AOctave+0x28>)
 8007170:	6053      	str	r3, [r2, #4]
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	200001b8 	.word	0x200001b8

08007184 <updateVco3340AFreq>:

void setVco3340ADetune(uint8_t value){
	vco3340A.detune = value;
}

void updateVco3340AFreq(){
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
	int dacLvl = midiToVCO3340ACV[midiNote.note + 12 * (vco3340A.octave-CENTER_OCTAVE)] + vco3340A.detune - NO_DETUNE;
 800718a:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <updateVco3340AFreq+0x3c>)
 800718c:	6819      	ldr	r1, [r3, #0]
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <updateVco3340AFreq+0x40>)
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	1e9a      	subs	r2, r3, #2
 8007194:	4613      	mov	r3, r2
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <updateVco3340AFreq+0x44>)
 80071a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80071a4:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <updateVco3340AFreq+0x40>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4413      	add	r3, r2
 80071aa:	3b40      	subs	r3, #64	; 0x40
 80071ac:	607b      	str	r3, [r7, #4]
	dacWrite(dacLvl, DAC_VCO_3340A_FREQ);
 80071ae:	2101      	movs	r1, #1
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff f8f7 	bl	80063a4 <dacWrite>

}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000110 	.word	0x20000110
 80071c4:	200001b8 	.word	0x200001b8
 80071c8:	200001d0 	.word	0x200001d0

080071cc <setVco3340APWMDuty>:

void setVco3340APWMDuty(uint8_t midiValue){
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
	vco3340A.pwm = midiValue;
 80071d6:	4a04      	ldr	r2, [pc, #16]	; (80071e8 <setVco3340APWMDuty+0x1c>)
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	7253      	strb	r3, [r2, #9]
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	200001b8 	.word	0x200001b8
 80071ec:	00000000 	.word	0x00000000

080071f0 <updateVco3340APWMDuty>:

void updateVco3340APWMDuty(){
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
	dacWrite((int) (MAX_VCO3340A_PWM_DUTY * vco3340A.pwm/127.), DAC_VCO_3340A_PWM_DUTY);
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <updateVco3340APWMDuty+0x40>)
 80071f6:	7a5b      	ldrb	r3, [r3, #9]
 80071f8:	461a      	mov	r2, r3
 80071fa:	f640 1392 	movw	r3, #2450	; 0x992
 80071fe:	fb03 f302 	mul.w	r3, r3, r2
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800720a:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8007228 <updateVco3340APWMDuty+0x38>
 800720e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007212:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007216:	2102      	movs	r1, #2
 8007218:	ee17 0a90 	vmov	r0, s15
 800721c:	f7ff f8c2 	bl	80063a4 <dacWrite>
}
 8007220:	bf00      	nop
 8007222:	bd80      	pop	{r7, pc}
 8007224:	f3af 8000 	nop.w
 8007228:	00000000 	.word	0x00000000
 800722c:	405fc000 	.word	0x405fc000
 8007230:	200001b8 	.word	0x200001b8

08007234 <setVco3340AWaveType>:

void setVco3340AWaveType(uint8_t midiValue){
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	71fb      	strb	r3, [r7, #7]
	midiValue = midiValue % 3;
 800723e:	79fa      	ldrb	r2, [r7, #7]
 8007240:	4b23      	ldr	r3, [pc, #140]	; (80072d0 <setVco3340AWaveType+0x9c>)
 8007242:	fba3 1302 	umull	r1, r3, r3, r2
 8007246:	0859      	lsrs	r1, r3, #1
 8007248:	460b      	mov	r3, r1
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	440b      	add	r3, r1
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	71fb      	strb	r3, [r7, #7]
	if (midiValue == 0){ // pulse
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d110      	bne.n	800727a <setVco3340AWaveType+0x46>
		HAL_GPIO_WritePin(TRI_3340_GPIO_Port, TRI_3340_Pin, GPIO_PIN_RESET);
 8007258:	2200      	movs	r2, #0
 800725a:	2140      	movs	r1, #64	; 0x40
 800725c:	481d      	ldr	r0, [pc, #116]	; (80072d4 <setVco3340AWaveType+0xa0>)
 800725e:	f7f9 fd35 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SAW_3340_GPIO_Port, SAW_3340_Pin, GPIO_PIN_RESET);
 8007262:	2200      	movs	r2, #0
 8007264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007268:	481b      	ldr	r0, [pc, #108]	; (80072d8 <setVco3340AWaveType+0xa4>)
 800726a:	f7f9 fd2f 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PULSE_3340_GPIO_Port, PULSE_3340_Pin, GPIO_PIN_SET);
 800726e:	2201      	movs	r2, #1
 8007270:	2101      	movs	r1, #1
 8007272:	481a      	ldr	r0, [pc, #104]	; (80072dc <setVco3340AWaveType+0xa8>)
 8007274:	f7f9 fd2a 	bl	8000ccc <HAL_GPIO_WritePin>
	else if (midiValue == 2){ // triangle
		HAL_GPIO_WritePin(SAW_3340_GPIO_Port, SAW_3340_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(PULSE_3340_GPIO_Port, PULSE_3340_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(TRI_3340_GPIO_Port, TRI_3340_Pin, GPIO_PIN_SET);
	}
}
 8007278:	e026      	b.n	80072c8 <setVco3340AWaveType+0x94>
	else if (midiValue == 1){ // sawtooth
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d110      	bne.n	80072a2 <setVco3340AWaveType+0x6e>
		HAL_GPIO_WritePin(TRI_3340_GPIO_Port, TRI_3340_Pin, GPIO_PIN_RESET);
 8007280:	2200      	movs	r2, #0
 8007282:	2140      	movs	r1, #64	; 0x40
 8007284:	4813      	ldr	r0, [pc, #76]	; (80072d4 <setVco3340AWaveType+0xa0>)
 8007286:	f7f9 fd21 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PULSE_3340_GPIO_Port, PULSE_3340_Pin, GPIO_PIN_RESET);
 800728a:	2200      	movs	r2, #0
 800728c:	2101      	movs	r1, #1
 800728e:	4813      	ldr	r0, [pc, #76]	; (80072dc <setVco3340AWaveType+0xa8>)
 8007290:	f7f9 fd1c 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SAW_3340_GPIO_Port, SAW_3340_Pin, GPIO_PIN_SET);
 8007294:	2201      	movs	r2, #1
 8007296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800729a:	480f      	ldr	r0, [pc, #60]	; (80072d8 <setVco3340AWaveType+0xa4>)
 800729c:	f7f9 fd16 	bl	8000ccc <HAL_GPIO_WritePin>
}
 80072a0:	e012      	b.n	80072c8 <setVco3340AWaveType+0x94>
	else if (midiValue == 2){ // triangle
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d10f      	bne.n	80072c8 <setVco3340AWaveType+0x94>
		HAL_GPIO_WritePin(SAW_3340_GPIO_Port, SAW_3340_Pin, GPIO_PIN_RESET);
 80072a8:	2200      	movs	r2, #0
 80072aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072ae:	480a      	ldr	r0, [pc, #40]	; (80072d8 <setVco3340AWaveType+0xa4>)
 80072b0:	f7f9 fd0c 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PULSE_3340_GPIO_Port, PULSE_3340_Pin, GPIO_PIN_RESET);
 80072b4:	2200      	movs	r2, #0
 80072b6:	2101      	movs	r1, #1
 80072b8:	4808      	ldr	r0, [pc, #32]	; (80072dc <setVco3340AWaveType+0xa8>)
 80072ba:	f7f9 fd07 	bl	8000ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TRI_3340_GPIO_Port, TRI_3340_Pin, GPIO_PIN_SET);
 80072be:	2201      	movs	r2, #1
 80072c0:	2140      	movs	r1, #64	; 0x40
 80072c2:	4804      	ldr	r0, [pc, #16]	; (80072d4 <setVco3340AWaveType+0xa0>)
 80072c4:	f7f9 fd02 	bl	8000ccc <HAL_GPIO_WritePin>
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	aaaaaaab 	.word	0xaaaaaaab
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40021800 	.word	0x40021800
 80072dc:	40020c00 	.word	0x40020c00

080072e0 <setVco3340ASync>:

void setVco3340ASync(uint8_t midiValue){
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SYNC_3340_GPIO_Port, SYNC_3340_Pin, midiValue>=64 ? GPIO_PIN_SET:GPIO_PIN_RESET);
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	2b3f      	cmp	r3, #63	; 0x3f
 80072ee:	bf8c      	ite	hi
 80072f0:	2301      	movhi	r3, #1
 80072f2:	2300      	movls	r3, #0
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	461a      	mov	r2, r3
 80072f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80072fc:	4803      	ldr	r0, [pc, #12]	; (800730c <setVco3340ASync+0x2c>)
 80072fe:	f7f9 fce5 	bl	8000ccc <HAL_GPIO_WritePin>
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40021800 	.word	0x40021800

08007310 <setVco3340ALevel>:

void setVco3340ALevel(uint8_t midiValue){
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	71fb      	strb	r3, [r7, #7]
	vco3340A.level = midiValue;
 800731a:	4a04      	ldr	r2, [pc, #16]	; (800732c <setVco3340ALevel+0x1c>)
 800731c:	79fb      	ldrb	r3, [r7, #7]
 800731e:	7213      	strb	r3, [r2, #8]
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	200001b8 	.word	0x200001b8

08007330 <updateVco3340ALevel>:

void updateVco3340ALevel(){
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
	dacWrite((int) (MAX_VCO3340A_LEVEL * (127.0-vco3340A.level)/127.), DAC_V2140D_3340A_LVL);
 8007334:	4b12      	ldr	r3, [pc, #72]	; (8007380 <updateVco3340ALevel+0x50>)
 8007336:	7a1b      	ldrb	r3, [r3, #8]
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007340:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8007370 <updateVco3340ALevel+0x40>
 8007344:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007348:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8007378 <updateVco3340ALevel+0x48>
 800734c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007350:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8007370 <updateVco3340ALevel+0x40>
 8007354:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007358:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800735c:	2110      	movs	r1, #16
 800735e:	ee17 0a90 	vmov	r0, s15
 8007362:	f7ff f81f 	bl	80063a4 <dacWrite>
}
 8007366:	bf00      	nop
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	f3af 8000 	nop.w
 8007370:	00000000 	.word	0x00000000
 8007374:	405fc000 	.word	0x405fc000
 8007378:	00000000 	.word	0x00000000
 800737c:	40affe00 	.word	0x40affe00
 8007380:	200001b8 	.word	0x200001b8

08007384 <updateVco3340BFreq>:

/**
 *  write the current midi note to the VCO control voltage through the appropriate DAC
 *  using the current calibration table.
 */
void updateVco3340BFreq(){
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
	int dacLvl = midiToVCO3340BCV[midiNote.note + 12 * (vco3340B.octave-CENTER_OCTAVE)] + vco3340B.detune - NO_DETUNE;
 800738a:	4b0d      	ldr	r3, [pc, #52]	; (80073c0 <updateVco3340BFreq+0x3c>)
 800738c:	6819      	ldr	r1, [r3, #0]
 800738e:	4b0d      	ldr	r3, [pc, #52]	; (80073c4 <updateVco3340BFreq+0x40>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	1e9a      	subs	r2, r3, #2
 8007394:	4613      	mov	r3, r2
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	4a0a      	ldr	r2, [pc, #40]	; (80073c8 <updateVco3340BFreq+0x44>)
 80073a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073a4:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <updateVco3340BFreq+0x40>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4413      	add	r3, r2
 80073aa:	3b40      	subs	r3, #64	; 0x40
 80073ac:	607b      	str	r3, [r7, #4]
	dacWrite(dacLvl, DAC_VCO_3340B_FREQ);
 80073ae:	2103      	movs	r1, #3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7fe fff7 	bl	80063a4 <dacWrite>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000110 	.word	0x20000110
 80073c4:	200001c4 	.word	0x200001c4
 80073c8:	200003d0 	.word	0x200003d0

080073cc <setVco3340BPWMDuty>:

void setVco3340BPWMDuty(uint8_t midiValue){
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	71fb      	strb	r3, [r7, #7]
	vco3340B.pwm = midiValue;
 80073d6:	4a04      	ldr	r2, [pc, #16]	; (80073e8 <setVco3340BPWMDuty+0x1c>)
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	72d3      	strb	r3, [r2, #11]
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	200001c4 	.word	0x200001c4
 80073ec:	00000000 	.word	0x00000000

080073f0 <updateVco3340BPWMDuty>:

void updateVco3340BPWMDuty(){
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
	dacWrite((int) (MAX_VCO3340B_PWM_DUTY * vco3340B.pwm/127.), DAC_VCO_3340B_PWM_DUTY);
 80073f4:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <updateVco3340BPWMDuty+0x40>)
 80073f6:	7adb      	ldrb	r3, [r3, #11]
 80073f8:	461a      	mov	r2, r3
 80073fa:	f640 1392 	movw	r3, #2450	; 0x992
 80073fe:	fb03 f302 	mul.w	r3, r3, r2
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800740a:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8007428 <updateVco3340BPWMDuty+0x38>
 800740e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007412:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007416:	2104      	movs	r1, #4
 8007418:	ee17 0a90 	vmov	r0, s15
 800741c:	f7fe ffc2 	bl	80063a4 <dacWrite>
}
 8007420:	bf00      	nop
 8007422:	bd80      	pop	{r7, pc}
 8007424:	f3af 8000 	nop.w
 8007428:	00000000 	.word	0x00000000
 800742c:	405fc000 	.word	0x405fc000
 8007430:	200001c4 	.word	0x200001c4

08007434 <setVco3340BPulseLevel>:

void setVco3340BPulseLevel(uint8_t midiValue){
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	71fb      	strb	r3, [r7, #7]
	vco3340B.pulse_level = midiValue;
 800743e:	4a04      	ldr	r2, [pc, #16]	; (8007450 <setVco3340BPulseLevel+0x1c>)
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	7293      	strb	r3, [r2, #10]
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	200001c4 	.word	0x200001c4
 8007454:	00000000 	.word	0x00000000

08007458 <updateVco3340BPulseLevel>:

void updateVco3340BPulseLevel(){
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
	dacWrite((int)(MAX_VCO3340B_PULSE_LEVEL * (127.0-vco3340B.pulse_level)/127.0), DAC_V2140D_3340B_PULSE_LVL);
 800745c:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <updateVco3340BPulseLevel+0x50>)
 800745e:	7a9b      	ldrb	r3, [r3, #10]
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007468:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8007498 <updateVco3340BPulseLevel+0x40>
 800746c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007470:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80074a0 <updateVco3340BPulseLevel+0x48>
 8007474:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007478:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8007498 <updateVco3340BPulseLevel+0x40>
 800747c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007480:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007484:	2111      	movs	r1, #17
 8007486:	ee17 0a90 	vmov	r0, s15
 800748a:	f7fe ff8b 	bl	80063a4 <dacWrite>
}
 800748e:	bf00      	nop
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	f3af 8000 	nop.w
 8007498:	00000000 	.word	0x00000000
 800749c:	405fc000 	.word	0x405fc000
 80074a0:	00000000 	.word	0x00000000
 80074a4:	40affe00 	.word	0x40affe00
 80074a8:	200001c4 	.word	0x200001c4

080074ac <setVco3340BSawLevel>:


void setVco3340BSawLevel(uint8_t midiValue){
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	71fb      	strb	r3, [r7, #7]
	vco3340B.saw_level = midiValue;
 80074b6:	4a04      	ldr	r2, [pc, #16]	; (80074c8 <setVco3340BSawLevel+0x1c>)
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	7253      	strb	r3, [r2, #9]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	200001c4 	.word	0x200001c4
 80074cc:	00000000 	.word	0x00000000

080074d0 <updateVco3340BSawLevel>:

void updateVco3340BSawLevel(){
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
	dacWrite((int)(MAX_VCO3340B_SAW_LEVEL * (127.0-vco3340B.saw_level) /127.0), DAC_V2140D_3340B_SAW_LVL);
 80074d4:	4b12      	ldr	r3, [pc, #72]	; (8007520 <updateVco3340BSawLevel+0x50>)
 80074d6:	7a5b      	ldrb	r3, [r3, #9]
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80074e0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8007510 <updateVco3340BSawLevel+0x40>
 80074e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80074e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8007518 <updateVco3340BSawLevel+0x48>
 80074ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80074f0:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8007510 <updateVco3340BSawLevel+0x40>
 80074f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80074f8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80074fc:	2113      	movs	r1, #19
 80074fe:	ee17 0a90 	vmov	r0, s15
 8007502:	f7fe ff4f 	bl	80063a4 <dacWrite>
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	f3af 8000 	nop.w
 8007510:	00000000 	.word	0x00000000
 8007514:	405fc000 	.word	0x405fc000
 8007518:	00000000 	.word	0x00000000
 800751c:	40affe00 	.word	0x40affe00
 8007520:	200001c4 	.word	0x200001c4

08007524 <setVco3340BTriLevel>:

void setVco3340BTriLevel(uint8_t midiValue){
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]
	vco3340B.tri_level = midiValue;
 800752e:	4a04      	ldr	r2, [pc, #16]	; (8007540 <setVco3340BTriLevel+0x1c>)
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	7213      	strb	r3, [r2, #8]
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	200001c4 	.word	0x200001c4
 8007544:	00000000 	.word	0x00000000

08007548 <updateVco3340BTriLevel>:

void updateVco3340BTriLevel(){
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
	dacWrite((int)(MAX_VCO3340B_TRI_LEVEL * (127.0-vco3340B.tri_level) /127.0), DAC_V2140D_3340B_TRI_LVL);
 800754c:	4b12      	ldr	r3, [pc, #72]	; (8007598 <updateVco3340BTriLevel+0x50>)
 800754e:	7a1b      	ldrb	r3, [r3, #8]
 8007550:	ee07 3a90 	vmov	s15, r3
 8007554:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007558:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8007588 <updateVco3340BTriLevel+0x40>
 800755c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007560:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8007590 <updateVco3340BTriLevel+0x48>
 8007564:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007568:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8007588 <updateVco3340BTriLevel+0x40>
 800756c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007570:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007574:	2112      	movs	r1, #18
 8007576:	ee17 0a90 	vmov	r0, s15
 800757a:	f7fe ff13 	bl	80063a4 <dacWrite>
}
 800757e:	bf00      	nop
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	f3af 8000 	nop.w
 8007588:	00000000 	.word	0x00000000
 800758c:	405fc000 	.word	0x405fc000
 8007590:	00000000 	.word	0x00000000
 8007594:	40affe00 	.word	0x40affe00
 8007598:	200001c4 	.word	0x200001c4
 800759c:	00000000 	.word	0x00000000

080075a0 <runVcoCalibration>:
 * Launch the calibration process
 * 
 * First, we start the calibration process with VCO 3340.
 * So, we set the configuration of the device and we launch the calibration process.
 */
void runVcoCalibration(){
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0

	resetMidiToVCOCVTables(); // optional, could be commented out if we want to refine only a part of the calibration table
 80075a4:	f000 f9a6 	bl	80078f4 <resetMidiToVCOCVTables>

	stopAdsrTIM(); // stop timer responsible for updating ADSR enveloppes
 80075a8:	f7fe fd60 	bl	800606c <stopAdsrTIM>

	captureTimerConversionFactor = (int)(8.0 * 54.0e6 / (htimCalib->Init.Prescaler+1.0));
 80075ac:	4b16      	ldr	r3, [pc, #88]	; (8007608 <runVcoCalibration+0x68>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80075ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80075be:	ee37 6b06 	vadd.f64	d6, d7, d6
 80075c2:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8007600 <runVcoCalibration+0x60>
 80075c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80075ca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80075ce:	ee17 2a90 	vmov	r2, s15
 80075d2:	4b0e      	ldr	r3, [pc, #56]	; (800760c <runVcoCalibration+0x6c>)
 80075d4:	601a      	str	r2, [r3, #0]

	prepareVCOForCalibration();
 80075d6:	f7ff fd4b 	bl	8007070 <prepareVCOForCalibration>

	// first start with VCO3340:
	startCalib3340A();
 80075da:	f000 f81b 	bl	8007614 <startCalib3340A>
	//startCalib3340B();
	//startCalib13700();

	while(calibrationCurrentVco != CALIB_COMPLETED){
 80075de:	e004      	b.n	80075ea <runVcoCalibration+0x4a>
		  HAL_Delay(50); // LED blinks faster so we know we're calibrating!
 80075e0:	2032      	movs	r0, #50	; 0x32
 80075e2:	f7f9 f85b 	bl	800069c <HAL_Delay>
		  toggleBlueLED();
 80075e6:	f7fd fffd 	bl	80055e4 <toggleBlueLED>
	while(calibrationCurrentVco != CALIB_COMPLETED){
 80075ea:	4b09      	ldr	r3, [pc, #36]	; (8007610 <runVcoCalibration+0x70>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f6      	bne.n	80075e0 <runVcoCalibration+0x40>
	}

	// proceeds with main() code
	//printf("Calibration terminated!\n");
	printMidiToVCOCVTables();
 80075f2:	f000 f8db 	bl	80077ac <printMidiToVCOCVTables>

	startAdsrTIM(); // restart timer responsible for updating ADSR enveloppes
 80075f6:	f7fe fd2d 	bl	8006054 <startAdsrTIM>


}
 80075fa:	bf00      	nop
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	00000000 	.word	0x00000000
 8007604:	41b9bfcc 	.word	0x41b9bfcc
 8007608:	20000aec 	.word	0x20000aec
 800760c:	20000b40 	.word	0x20000b40
 8007610:	20000b48 	.word	0x20000b48

08007614 <startCalib3340A>:


void startCalib3340A(){
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0

	printf("Starting 3340 A calibration...\n");
 8007618:	4818      	ldr	r0, [pc, #96]	; (800767c <startCalib3340A+0x68>)
 800761a:	f000 fbc7 	bl	8007dac <puts>

	currentMidiNote = -1;
 800761e:	4b18      	ldr	r3, [pc, #96]	; (8007680 <startCalib3340A+0x6c>)
 8007620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007624:	601a      	str	r2, [r3, #0]
	calibrationLastCapture = -1;
 8007626:	4b17      	ldr	r3, [pc, #92]	; (8007684 <startCalib3340A+0x70>)
 8007628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800762c:	601a      	str	r2, [r3, #0]
	calibrationTimerInterval = 0;
 800762e:	4b16      	ldr	r3, [pc, #88]	; (8007688 <startCalib3340A+0x74>)
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
	calibrationCurrentVco = CALIB_VCO_3340A;
 8007634:	4b15      	ldr	r3, [pc, #84]	; (800768c <startCalib3340A+0x78>)
 8007636:	2201      	movs	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]
	midiToVCOCV = midiToVCO3340ACV;
 800763a:	4b15      	ldr	r3, [pc, #84]	; (8007690 <startCalib3340A+0x7c>)
 800763c:	4a15      	ldr	r2, [pc, #84]	; (8007694 <startCalib3340A+0x80>)
 800763e:	601a      	str	r2, [r3, #0]
	maxVcoDAC = VCO3340A_MAX_INPUT_CV;
 8007640:	4b15      	ldr	r3, [pc, #84]	; (8007698 <startCalib3340A+0x84>)
 8007642:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007646:	601a      	str	r2, [r3, #0]
	calibrationVcoDACLvl = minVcoDAC = VCO3340A_MIN_INPUT_CV;
 8007648:	4b14      	ldr	r3, [pc, #80]	; (800769c <startCalib3340A+0x88>)
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	4b13      	ldr	r3, [pc, #76]	; (800769c <startCalib3340A+0x88>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a13      	ldr	r2, [pc, #76]	; (80076a0 <startCalib3340A+0x8c>)
 8007654:	6013      	str	r3, [r2, #0]
	dacWrite(calibrationVcoDACLvl, DAC_VCO_3340A_FREQ);
 8007656:	4b12      	ldr	r3, [pc, #72]	; (80076a0 <startCalib3340A+0x8c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2101      	movs	r1, #1
 800765c:	4618      	mov	r0, r3
 800765e:	f7fe fea1 	bl	80063a4 <dacWrite>
	__HAL_TIM_SetCounter(htimCalib, 0); // avoid overshoots
 8007662:	4b10      	ldr	r3, [pc, #64]	; (80076a4 <startCalib3340A+0x90>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2200      	movs	r2, #0
 800766a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_IC_Start_IT(htimCalib, TIM_CHANNEL_CALIB_VCO3340A);
 800766c:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <startCalib3340A+0x90>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2100      	movs	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f7fb fd9a 	bl	80031ac <HAL_TIM_IC_Start_IT>
}
 8007678:	bf00      	nop
 800767a:	bd80      	pop	{r7, pc}
 800767c:	080098b4 	.word	0x080098b4
 8007680:	200007d8 	.word	0x200007d8
 8007684:	200007d0 	.word	0x200007d0
 8007688:	20000b3c 	.word	0x20000b3c
 800768c:	20000b48 	.word	0x20000b48
 8007690:	20000b34 	.word	0x20000b34
 8007694:	200001d0 	.word	0x200001d0
 8007698:	200007d4 	.word	0x200007d4
 800769c:	2000086c 	.word	0x2000086c
 80076a0:	20000b44 	.word	0x20000b44
 80076a4:	20000aec 	.word	0x20000aec

080076a8 <startCalib3340B>:

void startCalib3340B(){
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0

	printf("Starting 3340 B calibration...\n");
 80076ac:	4818      	ldr	r0, [pc, #96]	; (8007710 <startCalib3340B+0x68>)
 80076ae:	f000 fb7d 	bl	8007dac <puts>

	currentMidiNote = -1;
 80076b2:	4b18      	ldr	r3, [pc, #96]	; (8007714 <startCalib3340B+0x6c>)
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076b8:	601a      	str	r2, [r3, #0]
	calibrationLastCapture = -1;
 80076ba:	4b17      	ldr	r3, [pc, #92]	; (8007718 <startCalib3340B+0x70>)
 80076bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076c0:	601a      	str	r2, [r3, #0]
	calibrationTimerInterval = 0;
 80076c2:	4b16      	ldr	r3, [pc, #88]	; (800771c <startCalib3340B+0x74>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	601a      	str	r2, [r3, #0]
	calibrationCurrentVco = CALIB_VCO_3340B;
 80076c8:	4b15      	ldr	r3, [pc, #84]	; (8007720 <startCalib3340B+0x78>)
 80076ca:	2202      	movs	r2, #2
 80076cc:	701a      	strb	r2, [r3, #0]
	midiToVCOCV = midiToVCO3340BCV;
 80076ce:	4b15      	ldr	r3, [pc, #84]	; (8007724 <startCalib3340B+0x7c>)
 80076d0:	4a15      	ldr	r2, [pc, #84]	; (8007728 <startCalib3340B+0x80>)
 80076d2:	601a      	str	r2, [r3, #0]
	maxVcoDAC = VCO3340B_MAX_INPUT_CV;
 80076d4:	4b15      	ldr	r3, [pc, #84]	; (800772c <startCalib3340B+0x84>)
 80076d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80076da:	601a      	str	r2, [r3, #0]
	calibrationVcoDACLvl = minVcoDAC = VCO3340B_MIN_INPUT_CV;
 80076dc:	4b14      	ldr	r3, [pc, #80]	; (8007730 <startCalib3340B+0x88>)
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <startCalib3340B+0x88>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a13      	ldr	r2, [pc, #76]	; (8007734 <startCalib3340B+0x8c>)
 80076e8:	6013      	str	r3, [r2, #0]
	dacWrite(calibrationVcoDACLvl, DAC_VCO_3340B_FREQ);
 80076ea:	4b12      	ldr	r3, [pc, #72]	; (8007734 <startCalib3340B+0x8c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2103      	movs	r1, #3
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe fe57 	bl	80063a4 <dacWrite>
	__HAL_TIM_SetCounter(htimCalib, 0); // avoid overshoots
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <startCalib3340B+0x90>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2200      	movs	r2, #0
 80076fe:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_IC_Start_IT(htimCalib, TIM_CHANNEL_CALIB_VCO3340B);
 8007700:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <startCalib3340B+0x90>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2108      	movs	r1, #8
 8007706:	4618      	mov	r0, r3
 8007708:	f7fb fd50 	bl	80031ac <HAL_TIM_IC_Start_IT>
}
 800770c:	bf00      	nop
 800770e:	bd80      	pop	{r7, pc}
 8007710:	080098d4 	.word	0x080098d4
 8007714:	200007d8 	.word	0x200007d8
 8007718:	200007d0 	.word	0x200007d0
 800771c:	20000b3c 	.word	0x20000b3c
 8007720:	20000b48 	.word	0x20000b48
 8007724:	20000b34 	.word	0x20000b34
 8007728:	200003d0 	.word	0x200003d0
 800772c:	200007d4 	.word	0x200007d4
 8007730:	2000086c 	.word	0x2000086c
 8007734:	20000b44 	.word	0x20000b44
 8007738:	20000aec 	.word	0x20000aec
 800773c:	00000000 	.word	0x00000000

08007740 <getTimerIntervalFromMidiNote>:
 * Returns the counting interval of the capture timer that yields a signal period
 * matching the given midiNote parameter. Computation are based on the equal tempered scale.
 *
 * For example, midiNote = 69 => f = 440Hz => T = 1/440 => counting_interval = T * captureTimerConversionFactor
 */
int getTimerIntervalFromMidiNote(int midiNote){
 8007740:	b580      	push	{r7, lr}
 8007742:	ed2d 8b02 	vpush	{d8}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

	return (int)(captureTimerConversionFactor * A4_PERIOD * pow(2.0, (A4_MIDI_NOTE - midiNote)/12.0));
 800774c:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <getTimerIntervalFromMidiNote+0x68>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	ee07 3a90 	vmov	s15, r3
 8007754:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007758:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80077a0 <getTimerIntervalFromMidiNote+0x60>
 800775c:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f1c3 0345 	rsb	r3, r3, #69	; 0x45
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800776e:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8007772:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007776:	eeb0 1b45 	vmov.f64	d1, d5
 800777a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800777e:	f001 fa5b 	bl	8008c38 <pow>
 8007782:	eeb0 7b40 	vmov.f64	d7, d0
 8007786:	ee28 7b07 	vmul.f64	d7, d8, d7
 800778a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800778e:	ee17 3a90 	vmov	r3, s15

}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	ecbd 8b02 	vpop	{d8}
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	00000000 	.word	0x00000000
 80077a4:	407b8000 	.word	0x407b8000
 80077a8:	20000b40 	.word	0x20000b40

080077ac <printMidiToVCOCVTables>:
		 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095, // 108-119
		 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095
		 };
 *
 */
void printMidiToVCOCVTables(){
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0

	printf("\n---- calib data ----\n\n");
 80077b2:	4845      	ldr	r0, [pc, #276]	; (80078c8 <printMidiToVCOCVTables+0x11c>)
 80077b4:	f000 fafa 	bl	8007dac <puts>
	printf("int midiToVCO3340ACV[128] = {\n");
 80077b8:	4844      	ldr	r0, [pc, #272]	; (80078cc <printMidiToVCOCVTables+0x120>)
 80077ba:	f000 faf7 	bl	8007dac <puts>
	for (int midiNote = 0; midiNote < 126 ; midiNote++){
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	e01b      	b.n	80077fc <printMidiToVCOCVTables+0x50>
		printf("%d, ", midiToVCO3340ACV[midiNote]);
 80077c4:	4a42      	ldr	r2, [pc, #264]	; (80078d0 <printMidiToVCOCVTables+0x124>)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077cc:	4619      	mov	r1, r3
 80077ce:	4841      	ldr	r0, [pc, #260]	; (80078d4 <printMidiToVCOCVTables+0x128>)
 80077d0:	f000 fa64 	bl	8007c9c <iprintf>
		if (midiNote % 12 ==11 ) printf("\n");
 80077d4:	68f9      	ldr	r1, [r7, #12]
 80077d6:	4b40      	ldr	r3, [pc, #256]	; (80078d8 <printMidiToVCOCVTables+0x12c>)
 80077d8:	fb83 2301 	smull	r2, r3, r3, r1
 80077dc:	105a      	asrs	r2, r3, #1
 80077de:	17cb      	asrs	r3, r1, #31
 80077e0:	1ad2      	subs	r2, r2, r3
 80077e2:	4613      	mov	r3, r2
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	1aca      	subs	r2, r1, r3
 80077ec:	2a0b      	cmp	r2, #11
 80077ee:	d102      	bne.n	80077f6 <printMidiToVCOCVTables+0x4a>
 80077f0:	200a      	movs	r0, #10
 80077f2:	f000 fa6b 	bl	8007ccc <putchar>
	for (int midiNote = 0; midiNote < 126 ; midiNote++){
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b7d      	cmp	r3, #125	; 0x7d
 8007800:	dde0      	ble.n	80077c4 <printMidiToVCOCVTables+0x18>
	}
	printf("%d };\n\n", midiToVCO3340ACV[126]);
 8007802:	4b33      	ldr	r3, [pc, #204]	; (80078d0 <printMidiToVCOCVTables+0x124>)
 8007804:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8007808:	4619      	mov	r1, r3
 800780a:	4834      	ldr	r0, [pc, #208]	; (80078dc <printMidiToVCOCVTables+0x130>)
 800780c:	f000 fa46 	bl	8007c9c <iprintf>

	printf("int midiToVCO3340BCV[128] = {\n");
 8007810:	4833      	ldr	r0, [pc, #204]	; (80078e0 <printMidiToVCOCVTables+0x134>)
 8007812:	f000 facb 	bl	8007dac <puts>
	for (int midiNote = 0; midiNote < 126 ; midiNote++){
 8007816:	2300      	movs	r3, #0
 8007818:	60bb      	str	r3, [r7, #8]
 800781a:	e01b      	b.n	8007854 <printMidiToVCOCVTables+0xa8>
		printf("%d, ", midiToVCO3340BCV[midiNote]);
 800781c:	4a31      	ldr	r2, [pc, #196]	; (80078e4 <printMidiToVCOCVTables+0x138>)
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007824:	4619      	mov	r1, r3
 8007826:	482b      	ldr	r0, [pc, #172]	; (80078d4 <printMidiToVCOCVTables+0x128>)
 8007828:	f000 fa38 	bl	8007c9c <iprintf>
		if (midiNote % 12 ==11 ) printf("\n");
 800782c:	68b9      	ldr	r1, [r7, #8]
 800782e:	4b2a      	ldr	r3, [pc, #168]	; (80078d8 <printMidiToVCOCVTables+0x12c>)
 8007830:	fb83 2301 	smull	r2, r3, r3, r1
 8007834:	105a      	asrs	r2, r3, #1
 8007836:	17cb      	asrs	r3, r1, #31
 8007838:	1ad2      	subs	r2, r2, r3
 800783a:	4613      	mov	r3, r2
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	1aca      	subs	r2, r1, r3
 8007844:	2a0b      	cmp	r2, #11
 8007846:	d102      	bne.n	800784e <printMidiToVCOCVTables+0xa2>
 8007848:	200a      	movs	r0, #10
 800784a:	f000 fa3f 	bl	8007ccc <putchar>
	for (int midiNote = 0; midiNote < 126 ; midiNote++){
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	3301      	adds	r3, #1
 8007852:	60bb      	str	r3, [r7, #8]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b7d      	cmp	r3, #125	; 0x7d
 8007858:	dde0      	ble.n	800781c <printMidiToVCOCVTables+0x70>
	}
	printf("%d };\n\n", midiToVCO3340BCV[126]);
 800785a:	4b22      	ldr	r3, [pc, #136]	; (80078e4 <printMidiToVCOCVTables+0x138>)
 800785c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8007860:	4619      	mov	r1, r3
 8007862:	481e      	ldr	r0, [pc, #120]	; (80078dc <printMidiToVCOCVTables+0x130>)
 8007864:	f000 fa1a 	bl	8007c9c <iprintf>

	printf("int midiToVCO13700CV[128] = {\n");
 8007868:	481f      	ldr	r0, [pc, #124]	; (80078e8 <printMidiToVCOCVTables+0x13c>)
 800786a:	f000 fa9f 	bl	8007dac <puts>
	for (int midiNote = 0; midiNote < 126 ; midiNote++){
 800786e:	2300      	movs	r3, #0
 8007870:	607b      	str	r3, [r7, #4]
 8007872:	e01b      	b.n	80078ac <printMidiToVCOCVTables+0x100>
		printf("%d, ", midiToVCO13700CV[midiNote]);
 8007874:	4a1d      	ldr	r2, [pc, #116]	; (80078ec <printMidiToVCOCVTables+0x140>)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800787c:	4619      	mov	r1, r3
 800787e:	4815      	ldr	r0, [pc, #84]	; (80078d4 <printMidiToVCOCVTables+0x128>)
 8007880:	f000 fa0c 	bl	8007c9c <iprintf>
		if (midiNote % 12 ==11 ) printf("\n");
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <printMidiToVCOCVTables+0x12c>)
 8007888:	fb83 2301 	smull	r2, r3, r3, r1
 800788c:	105a      	asrs	r2, r3, #1
 800788e:	17cb      	asrs	r3, r1, #31
 8007890:	1ad2      	subs	r2, r2, r3
 8007892:	4613      	mov	r3, r2
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	1aca      	subs	r2, r1, r3
 800789c:	2a0b      	cmp	r2, #11
 800789e:	d102      	bne.n	80078a6 <printMidiToVCOCVTables+0xfa>
 80078a0:	200a      	movs	r0, #10
 80078a2:	f000 fa13 	bl	8007ccc <putchar>
	for (int midiNote = 0; midiNote < 126 ; midiNote++){
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3301      	adds	r3, #1
 80078aa:	607b      	str	r3, [r7, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b7d      	cmp	r3, #125	; 0x7d
 80078b0:	dde0      	ble.n	8007874 <printMidiToVCOCVTables+0xc8>
	}
	printf("%d };\n", midiToVCO13700CV[126]);
 80078b2:	4b0e      	ldr	r3, [pc, #56]	; (80078ec <printMidiToVCOCVTables+0x140>)
 80078b4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80078b8:	4619      	mov	r1, r3
 80078ba:	480d      	ldr	r0, [pc, #52]	; (80078f0 <printMidiToVCOCVTables+0x144>)
 80078bc:	f000 f9ee 	bl	8007c9c <iprintf>
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	08009914 	.word	0x08009914
 80078cc:	0800992c 	.word	0x0800992c
 80078d0:	200001d0 	.word	0x200001d0
 80078d4:	0800994c 	.word	0x0800994c
 80078d8:	2aaaaaab 	.word	0x2aaaaaab
 80078dc:	08009954 	.word	0x08009954
 80078e0:	0800995c 	.word	0x0800995c
 80078e4:	200003d0 	.word	0x200003d0
 80078e8:	0800997c 	.word	0x0800997c
 80078ec:	200005d0 	.word	0x200005d0
 80078f0:	0800999c 	.word	0x0800999c

080078f4 <resetMidiToVCOCVTables>:

/**
 * reset content of Midi Note to CV arrays
 */
void resetMidiToVCOCVTables(){
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0

	for (int midiNote = 0; midiNote < 127 ; midiNote++){
 80078fa:	2300      	movs	r3, #0
 80078fc:	607b      	str	r3, [r7, #4]
 80078fe:	e011      	b.n	8007924 <resetMidiToVCOCVTables+0x30>
		midiToVCO3340ACV[midiNote] = 0;
 8007900:	4a0d      	ldr	r2, [pc, #52]	; (8007938 <resetMidiToVCOCVTables+0x44>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2100      	movs	r1, #0
 8007906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		midiToVCO3340BCV[midiNote] = 0;
 800790a:	4a0c      	ldr	r2, [pc, #48]	; (800793c <resetMidiToVCOCVTables+0x48>)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2100      	movs	r1, #0
 8007910:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		midiToVCO13700CV[midiNote] = 0;
 8007914:	4a0a      	ldr	r2, [pc, #40]	; (8007940 <resetMidiToVCOCVTables+0x4c>)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2100      	movs	r1, #0
 800791a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int midiNote = 0; midiNote < 127 ; midiNote++){
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3301      	adds	r3, #1
 8007922:	607b      	str	r3, [r7, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b7e      	cmp	r3, #126	; 0x7e
 8007928:	ddea      	ble.n	8007900 <resetMidiToVCOCVTables+0xc>
	}

}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	200001d0 	.word	0x200001d0
 800793c:	200003d0 	.word	0x200003d0
 8007940:	200005d0 	.word	0x200005d0

08007944 <VCO_Calib_CaptureCallback>:

/**
 * interrupt callback that gets triggered whenever a rising edge is detected on the current VCO calibration pin
 * the global var calibrationTimerInterval is updated after each call
 */
void VCO_Calib_CaptureCallback(){
 8007944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af02      	add	r7, sp, #8

	// compute timer interval b/w subsequent edges for input signal and store the result in global var "calibrationTimerInterval":
	int x=0;
 800794c:	2300      	movs	r3, #0
 800794e:	607b      	str	r3, [r7, #4]

	if (calibrationCurrentVco == CALIB_VCO_3340A) x = htimCalib->Instance->CCR1; // ch 1
 8007950:	4b99      	ldr	r3, [pc, #612]	; (8007bb8 <VCO_Calib_CaptureCallback+0x274>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d105      	bne.n	8007964 <VCO_Calib_CaptureCallback+0x20>
 8007958:	4b98      	ldr	r3, [pc, #608]	; (8007bbc <VCO_Calib_CaptureCallback+0x278>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	607b      	str	r3, [r7, #4]
 8007962:	e013      	b.n	800798c <VCO_Calib_CaptureCallback+0x48>
	else if (calibrationCurrentVco == CALIB_VCO_3340B) x = htimCalib->Instance->CCR3; // ch 3
 8007964:	4b94      	ldr	r3, [pc, #592]	; (8007bb8 <VCO_Calib_CaptureCallback+0x274>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d105      	bne.n	8007978 <VCO_Calib_CaptureCallback+0x34>
 800796c:	4b93      	ldr	r3, [pc, #588]	; (8007bbc <VCO_Calib_CaptureCallback+0x278>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007974:	607b      	str	r3, [r7, #4]
 8007976:	e009      	b.n	800798c <VCO_Calib_CaptureCallback+0x48>
	else if (calibrationCurrentVco == CALIB_VCO_13700) x = htimCalib->Instance->CCR4; // ch 2
 8007978:	4b8f      	ldr	r3, [pc, #572]	; (8007bb8 <VCO_Calib_CaptureCallback+0x274>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b03      	cmp	r3, #3
 800797e:	f040 8114 	bne.w	8007baa <VCO_Calib_CaptureCallback+0x266>
 8007982:	4b8e      	ldr	r3, [pc, #568]	; (8007bbc <VCO_Calib_CaptureCallback+0x278>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	607b      	str	r3, [r7, #4]
	else return; // CALIB_COMPLETED !!!

	if (calibrationLastCapture == -1) { // init calibrationLastCapture variable
 800798c:	4b8c      	ldr	r3, [pc, #560]	; (8007bc0 <VCO_Calib_CaptureCallback+0x27c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007994:	d103      	bne.n	800799e <VCO_Calib_CaptureCallback+0x5a>
		calibrationLastCapture = x;
 8007996:	4a8a      	ldr	r2, [pc, #552]	; (8007bc0 <VCO_Calib_CaptureCallback+0x27c>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6013      	str	r3, [r2, #0]
		return;
 800799c:	e108      	b.n	8007bb0 <VCO_Calib_CaptureCallback+0x26c>
	}

	previousCalibrationTimerInterval = calibrationTimerInterval;
 800799e:	4b89      	ldr	r3, [pc, #548]	; (8007bc4 <VCO_Calib_CaptureCallback+0x280>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a89      	ldr	r2, [pc, #548]	; (8007bc8 <VCO_Calib_CaptureCallback+0x284>)
 80079a4:	6013      	str	r3, [r2, #0]
	calibrationTimerInterval = x - calibrationLastCapture;
 80079a6:	4b86      	ldr	r3, [pc, #536]	; (8007bc0 <VCO_Calib_CaptureCallback+0x27c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	4a85      	ldr	r2, [pc, #532]	; (8007bc4 <VCO_Calib_CaptureCallback+0x280>)
 80079b0:	6013      	str	r3, [r2, #0]
	calibrationLastCapture = x;
 80079b2:	4a83      	ldr	r2, [pc, #524]	; (8007bc0 <VCO_Calib_CaptureCallback+0x27c>)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6013      	str	r3, [r2, #0]

	// compute initial (lowest) currentMidiNote: we assume that the DAC level is at its minimum, so that the VCO outputs a signal with
	// the largest possible period and then we'll look for the closest midi note which we'll be the one we start the calibration process with:
	if (currentMidiNote == -1){
 80079b8:	4b84      	ldr	r3, [pc, #528]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079c0:	d116      	bne.n	80079f0 <VCO_Calib_CaptureCallback+0xac>

		currentMidiNote = 0;
 80079c2:	4b82      	ldr	r3, [pc, #520]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
		// increment currentMidiNote from 0 until the corresponding timer interval is lower or equal to the period of the current VCO signal:
		while (currentMidiNote < 127 && getTimerIntervalFromMidiNote(currentMidiNote) > calibrationTimerInterval){
 80079c8:	e004      	b.n	80079d4 <VCO_Calib_CaptureCallback+0x90>
			currentMidiNote++;
 80079ca:	4b80      	ldr	r3, [pc, #512]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	4a7e      	ldr	r2, [pc, #504]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 80079d2:	6013      	str	r3, [r2, #0]
		while (currentMidiNote < 127 && getTimerIntervalFromMidiNote(currentMidiNote) > calibrationTimerInterval){
 80079d4:	4b7d      	ldr	r3, [pc, #500]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b7e      	cmp	r3, #126	; 0x7e
 80079da:	dc09      	bgt.n	80079f0 <VCO_Calib_CaptureCallback+0xac>
 80079dc:	4b7b      	ldr	r3, [pc, #492]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff fead 	bl	8007740 <getTimerIntervalFromMidiNote>
 80079e6:	4602      	mov	r2, r0
 80079e8:	4b76      	ldr	r3, [pc, #472]	; (8007bc4 <VCO_Calib_CaptureCallback+0x280>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	dcec      	bgt.n	80079ca <VCO_Calib_CaptureCallback+0x86>
		}

	}

	// look for next DAC level for which the VCO signal has the closest possible period to getTimerIntervalFromMidiNote(currentMidiNote):
	if (calibrationTimerInterval > getTimerIntervalFromMidiNote(currentMidiNote)) {
 80079f0:	4b76      	ldr	r3, [pc, #472]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7ff fea3 	bl	8007740 <getTimerIntervalFromMidiNote>
 80079fa:	4602      	mov	r2, r0
 80079fc:	4b71      	ldr	r3, [pc, #452]	; (8007bc4 <VCO_Calib_CaptureCallback+0x280>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	da2d      	bge.n	8007a60 <VCO_Calib_CaptureCallback+0x11c>
		calibrationVcoDACLvl ++; // try to decrease signal period until there's a match
 8007a04:	4b72      	ldr	r3, [pc, #456]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	4a71      	ldr	r2, [pc, #452]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007a0c:	6013      	str	r3, [r2, #0]
		if (calibrationVcoDACLvl <= maxVcoDAC) { // else see below
 8007a0e:	4b70      	ldr	r3, [pc, #448]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b70      	ldr	r3, [pc, #448]	; (8007bd4 <VCO_Calib_CaptureCallback+0x290>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	f300 8084 	bgt.w	8007b24 <VCO_Calib_CaptureCallback+0x1e0>
			if (calibrationCurrentVco == CALIB_VCO_3340A) dacWrite(calibrationVcoDACLvl, DAC_VCO_3340A_FREQ);
 8007a1c:	4b66      	ldr	r3, [pc, #408]	; (8007bb8 <VCO_Calib_CaptureCallback+0x274>)
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d106      	bne.n	8007a32 <VCO_Calib_CaptureCallback+0xee>
 8007a24:	4b6a      	ldr	r3, [pc, #424]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2101      	movs	r1, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe fcba 	bl	80063a4 <dacWrite>
 8007a30:	e078      	b.n	8007b24 <VCO_Calib_CaptureCallback+0x1e0>
			else if (calibrationCurrentVco == CALIB_VCO_3340B) dacWrite(calibrationVcoDACLvl, DAC_VCO_3340B_FREQ);
 8007a32:	4b61      	ldr	r3, [pc, #388]	; (8007bb8 <VCO_Calib_CaptureCallback+0x274>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d106      	bne.n	8007a48 <VCO_Calib_CaptureCallback+0x104>
 8007a3a:	4b65      	ldr	r3, [pc, #404]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2103      	movs	r1, #3
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe fcaf 	bl	80063a4 <dacWrite>
 8007a46:	e06d      	b.n	8007b24 <VCO_Calib_CaptureCallback+0x1e0>
			else if (calibrationCurrentVco == CALIB_VCO_13700) dacWrite(calibrationVcoDACLvl, DAC_VCO_13700_FREQ);
 8007a48:	4b5b      	ldr	r3, [pc, #364]	; (8007bb8 <VCO_Calib_CaptureCallback+0x274>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	f040 80ae 	bne.w	8007bae <VCO_Calib_CaptureCallback+0x26a>
 8007a52:	4b5f      	ldr	r3, [pc, #380]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2100      	movs	r1, #0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fca3 	bl	80063a4 <dacWrite>
 8007a5e:	e061      	b.n	8007b24 <VCO_Calib_CaptureCallback+0x1e0>
			else return; // calib completed
		}
	}
	else { // validate current midi note and switch to next note:
		toggleRedLED();
 8007a60:	f7fd fdb4 	bl	80055cc <toggleRedLED>
		printf("d(%d)=%d and d(%d)=%d\n", calibrationVcoDACLvl, calibrationTimerInterval-getTimerIntervalFromMidiNote(currentMidiNote),
 8007a64:	4b5a      	ldr	r3, [pc, #360]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007a66:	681d      	ldr	r5, [r3, #0]
 8007a68:	4b56      	ldr	r3, [pc, #344]	; (8007bc4 <VCO_Calib_CaptureCallback+0x280>)
 8007a6a:	681c      	ldr	r4, [r3, #0]
 8007a6c:	4b57      	ldr	r3, [pc, #348]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff fe65 	bl	8007740 <getTimerIntervalFromMidiNote>
 8007a76:	4603      	mov	r3, r0
 8007a78:	1ae6      	subs	r6, r4, r3
 8007a7a:	4b55      	ldr	r3, [pc, #340]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007a82:	4b51      	ldr	r3, [pc, #324]	; (8007bc8 <VCO_Calib_CaptureCallback+0x284>)
 8007a84:	681c      	ldr	r4, [r3, #0]
				calibrationVcoDACLvl-1, previousCalibrationTimerInterval-getTimerIntervalFromMidiNote(currentMidiNote));
 8007a86:	4b51      	ldr	r3, [pc, #324]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff fe58 	bl	8007740 <getTimerIntervalFromMidiNote>
 8007a90:	4603      	mov	r3, r0
		printf("d(%d)=%d and d(%d)=%d\n", calibrationVcoDACLvl, calibrationTimerInterval-getTimerIntervalFromMidiNote(currentMidiNote),
 8007a92:	1ae3      	subs	r3, r4, r3
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	4643      	mov	r3, r8
 8007a98:	4632      	mov	r2, r6
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	484e      	ldr	r0, [pc, #312]	; (8007bd8 <VCO_Calib_CaptureCallback+0x294>)
 8007a9e:	f000 f8fd 	bl	8007c9c <iprintf>

		// check if previous DAC level doesn't match better:
		if (abs(calibrationTimerInterval-getTimerIntervalFromMidiNote(currentMidiNote)) > abs(previousCalibrationTimerInterval-getTimerIntervalFromMidiNote(currentMidiNote))){
 8007aa2:	4b48      	ldr	r3, [pc, #288]	; (8007bc4 <VCO_Calib_CaptureCallback+0x280>)
 8007aa4:	681c      	ldr	r4, [r3, #0]
 8007aa6:	4b49      	ldr	r3, [pc, #292]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff fe48 	bl	8007740 <getTimerIntervalFromMidiNote>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	1ae3      	subs	r3, r4, r3
 8007ab4:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8007ab8:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8007abc:	4b42      	ldr	r3, [pc, #264]	; (8007bc8 <VCO_Calib_CaptureCallback+0x284>)
 8007abe:	681d      	ldr	r5, [r3, #0]
 8007ac0:	4b42      	ldr	r3, [pc, #264]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff fe3b 	bl	8007740 <getTimerIntervalFromMidiNote>
 8007aca:	4603      	mov	r3, r0
 8007acc:	1aeb      	subs	r3, r5, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfb8      	it	lt
 8007ad2:	425b      	neglt	r3, r3
 8007ad4:	429c      	cmp	r4, r3
 8007ad6:	dd0a      	ble.n	8007aee <VCO_Calib_CaptureCallback+0x1aa>
			midiToVCOCV[currentMidiNote] = calibrationVcoDACLvl-1;
 8007ad8:	4b3d      	ldr	r3, [pc, #244]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	4b3f      	ldr	r3, [pc, #252]	; (8007bdc <VCO_Calib_CaptureCallback+0x298>)
 8007ade:	6819      	ldr	r1, [r3, #0]
 8007ae0:	4b3a      	ldr	r3, [pc, #232]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	3a01      	subs	r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	e008      	b.n	8007b00 <VCO_Calib_CaptureCallback+0x1bc>
		}
		else midiToVCOCV[currentMidiNote] = calibrationVcoDACLvl;
 8007aee:	4b3b      	ldr	r3, [pc, #236]	; (8007bdc <VCO_Calib_CaptureCallback+0x298>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b36      	ldr	r3, [pc, #216]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	4a35      	ldr	r2, [pc, #212]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007afc:	6812      	ldr	r2, [r2, #0]
 8007afe:	601a      	str	r2, [r3, #0]
		printf("note=%d -> dac=%d\n", currentMidiNote, midiToVCOCV[currentMidiNote]);
 8007b00:	4b32      	ldr	r3, [pc, #200]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007b02:	6819      	ldr	r1, [r3, #0]
 8007b04:	4b35      	ldr	r3, [pc, #212]	; (8007bdc <VCO_Calib_CaptureCallback+0x298>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	4b30      	ldr	r3, [pc, #192]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	4832      	ldr	r0, [pc, #200]	; (8007be0 <VCO_Calib_CaptureCallback+0x29c>)
 8007b16:	f000 f8c1 	bl	8007c9c <iprintf>
		currentMidiNote++;
 8007b1a:	4b2c      	ldr	r3, [pc, #176]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	4a2a      	ldr	r2, [pc, #168]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007b22:	6013      	str	r3, [r2, #0]
	}

	// finish and switch to next VCO or terminate calib process:
	if (currentMidiNote > 127 || calibrationVcoDACLvl > maxVcoDAC){
 8007b24:	4b29      	ldr	r3, [pc, #164]	; (8007bcc <VCO_Calib_CaptureCallback+0x288>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b7f      	cmp	r3, #127	; 0x7f
 8007b2a:	dc05      	bgt.n	8007b38 <VCO_Calib_CaptureCallback+0x1f4>
 8007b2c:	4b28      	ldr	r3, [pc, #160]	; (8007bd0 <VCO_Calib_CaptureCallback+0x28c>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <VCO_Calib_CaptureCallback+0x290>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	dd3b      	ble.n	8007bb0 <VCO_Calib_CaptureCallback+0x26c>

		switch (calibrationCurrentVco) {
 8007b38:	4b1f      	ldr	r3, [pc, #124]	; (8007bb8 <VCO_Calib_CaptureCallback+0x274>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d837      	bhi.n	8007bb0 <VCO_Calib_CaptureCallback+0x26c>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <VCO_Calib_CaptureCallback+0x204>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007bb1 	.word	0x08007bb1
 8007b4c:	08007b59 	.word	0x08007b59
 8007b50:	08007b73 	.word	0x08007b73
 8007b54:	08007b8f 	.word	0x08007b8f
			case CALIB_VCO_3340A:
				HAL_TIM_IC_Stop_IT(htimCalib, TIM_CHANNEL_CALIB_VCO3340A);
 8007b58:	4b18      	ldr	r3, [pc, #96]	; (8007bbc <VCO_Calib_CaptureCallback+0x278>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fb fb92 	bl	8003288 <HAL_TIM_IC_Stop_IT>
				dacWrite(0, DAC_VCO_3340A_FREQ);
 8007b64:	2101      	movs	r1, #1
 8007b66:	2000      	movs	r0, #0
 8007b68:	f7fe fc1c 	bl	80063a4 <dacWrite>
				//calibrationCurrentVco=CALIB_COMPLETED; // debug
				//startCalib13700();
				startCalib3340B();
 8007b6c:	f7ff fd9c 	bl	80076a8 <startCalib3340B>
				break;
 8007b70:	e01e      	b.n	8007bb0 <VCO_Calib_CaptureCallback+0x26c>
			case CALIB_VCO_3340B:
				HAL_TIM_IC_Stop_IT(htimCalib, TIM_CHANNEL_CALIB_VCO3340B);
 8007b72:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <VCO_Calib_CaptureCallback+0x278>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2108      	movs	r1, #8
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fb fb85 	bl	8003288 <HAL_TIM_IC_Stop_IT>
				dacWrite(0, DAC_VCO_3340B_FREQ);
 8007b7e:	2103      	movs	r1, #3
 8007b80:	2000      	movs	r0, #0
 8007b82:	f7fe fc0f 	bl	80063a4 <dacWrite>
				calibrationCurrentVco=CALIB_COMPLETED; // debug
 8007b86:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <VCO_Calib_CaptureCallback+0x274>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
				//startCalib3340B();
				break;
 8007b8c:	e010      	b.n	8007bb0 <VCO_Calib_CaptureCallback+0x26c>
			case CALIB_VCO_13700:
				HAL_TIM_IC_Stop_IT(htimCalib, TIM_CHANNEL_CALIB_VCO13700);
 8007b8e:	4b0b      	ldr	r3, [pc, #44]	; (8007bbc <VCO_Calib_CaptureCallback+0x278>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	210c      	movs	r1, #12
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fb fb77 	bl	8003288 <HAL_TIM_IC_Stop_IT>
				calibrationCurrentVco=CALIB_COMPLETED; // ok over
 8007b9a:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <VCO_Calib_CaptureCallback+0x274>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
				dacWrite(0, DAC_VCO_13700_FREQ);
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f7fe fbfe 	bl	80063a4 <dacWrite>
				break;
 8007ba8:	e002      	b.n	8007bb0 <VCO_Calib_CaptureCallback+0x26c>
	else return; // CALIB_COMPLETED !!!
 8007baa:	bf00      	nop
 8007bac:	e000      	b.n	8007bb0 <VCO_Calib_CaptureCallback+0x26c>
			else return; // calib completed
 8007bae:	bf00      	nop
			case CALIB_COMPLETED:
				return;
		}
	}
}
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb8:	20000b48 	.word	0x20000b48
 8007bbc:	20000aec 	.word	0x20000aec
 8007bc0:	200007d0 	.word	0x200007d0
 8007bc4:	20000b3c 	.word	0x20000b3c
 8007bc8:	20000b38 	.word	0x20000b38
 8007bcc:	200007d8 	.word	0x200007d8
 8007bd0:	20000b44 	.word	0x20000b44
 8007bd4:	200007d4 	.word	0x200007d4
 8007bd8:	080099a4 	.word	0x080099a4
 8007bdc:	20000b34 	.word	0x20000b34
 8007be0:	080099bc 	.word	0x080099bc

08007be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007be8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007bea:	e003      	b.n	8007bf4 <LoopCopyDataInit>

08007bec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007bec:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007bee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007bf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007bf2:	3104      	adds	r1, #4

08007bf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007bf4:	480b      	ldr	r0, [pc, #44]	; (8007c24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007bf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007bfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007bfc:	d3f6      	bcc.n	8007bec <CopyDataInit>
  ldr  r2, =_sbss
 8007bfe:	4a0b      	ldr	r2, [pc, #44]	; (8007c2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007c00:	e002      	b.n	8007c08 <LoopFillZerobss>

08007c02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007c02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007c04:	f842 3b04 	str.w	r3, [r2], #4

08007c08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007c08:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007c0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007c0c:	d3f9      	bcc.n	8007c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007c0e:	f7ff f8df 	bl	8006dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c12:	f000 f817 	bl	8007c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c16:	f7fd fd65 	bl	80056e4 <main>
  bx  lr    
 8007c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c1c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007c20:	08009ad8 	.word	0x08009ad8
  ldr  r0, =_sdata
 8007c24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007c28:	20000844 	.word	0x20000844
  ldr  r2, =_sbss
 8007c2c:	20000844 	.word	0x20000844
  ldr  r3, = _ebss
 8007c30:	20000b50 	.word	0x20000b50

08007c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c34:	e7fe      	b.n	8007c34 <ADC_IRQHandler>
	...

08007c38 <__errno>:
 8007c38:	4b01      	ldr	r3, [pc, #4]	; (8007c40 <__errno+0x8>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	200007dc 	.word	0x200007dc

08007c44 <__libc_init_array>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4e0d      	ldr	r6, [pc, #52]	; (8007c7c <__libc_init_array+0x38>)
 8007c48:	4c0d      	ldr	r4, [pc, #52]	; (8007c80 <__libc_init_array+0x3c>)
 8007c4a:	1ba4      	subs	r4, r4, r6
 8007c4c:	10a4      	asrs	r4, r4, #2
 8007c4e:	2500      	movs	r5, #0
 8007c50:	42a5      	cmp	r5, r4
 8007c52:	d109      	bne.n	8007c68 <__libc_init_array+0x24>
 8007c54:	4e0b      	ldr	r6, [pc, #44]	; (8007c84 <__libc_init_array+0x40>)
 8007c56:	4c0c      	ldr	r4, [pc, #48]	; (8007c88 <__libc_init_array+0x44>)
 8007c58:	f001 fddc 	bl	8009814 <_init>
 8007c5c:	1ba4      	subs	r4, r4, r6
 8007c5e:	10a4      	asrs	r4, r4, #2
 8007c60:	2500      	movs	r5, #0
 8007c62:	42a5      	cmp	r5, r4
 8007c64:	d105      	bne.n	8007c72 <__libc_init_array+0x2e>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c6c:	4798      	blx	r3
 8007c6e:	3501      	adds	r5, #1
 8007c70:	e7ee      	b.n	8007c50 <__libc_init_array+0xc>
 8007c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c76:	4798      	blx	r3
 8007c78:	3501      	adds	r5, #1
 8007c7a:	e7f2      	b.n	8007c62 <__libc_init_array+0x1e>
 8007c7c:	08009ad0 	.word	0x08009ad0
 8007c80:	08009ad0 	.word	0x08009ad0
 8007c84:	08009ad0 	.word	0x08009ad0
 8007c88:	08009ad4 	.word	0x08009ad4

08007c8c <memset>:
 8007c8c:	4402      	add	r2, r0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d100      	bne.n	8007c96 <memset+0xa>
 8007c94:	4770      	bx	lr
 8007c96:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9a:	e7f9      	b.n	8007c90 <memset+0x4>

08007c9c <iprintf>:
 8007c9c:	b40f      	push	{r0, r1, r2, r3}
 8007c9e:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <iprintf+0x2c>)
 8007ca0:	b513      	push	{r0, r1, r4, lr}
 8007ca2:	681c      	ldr	r4, [r3, #0]
 8007ca4:	b124      	cbz	r4, 8007cb0 <iprintf+0x14>
 8007ca6:	69a3      	ldr	r3, [r4, #24]
 8007ca8:	b913      	cbnz	r3, 8007cb0 <iprintf+0x14>
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 fa6a 	bl	8008184 <__sinit>
 8007cb0:	ab05      	add	r3, sp, #20
 8007cb2:	9a04      	ldr	r2, [sp, #16]
 8007cb4:	68a1      	ldr	r1, [r4, #8]
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fc2b 	bl	8008514 <_vfiprintf_r>
 8007cbe:	b002      	add	sp, #8
 8007cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc4:	b004      	add	sp, #16
 8007cc6:	4770      	bx	lr
 8007cc8:	200007dc 	.word	0x200007dc

08007ccc <putchar>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <putchar+0x24>)
 8007cd0:	681c      	ldr	r4, [r3, #0]
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	b124      	cbz	r4, 8007ce0 <putchar+0x14>
 8007cd6:	69a3      	ldr	r3, [r4, #24]
 8007cd8:	b913      	cbnz	r3, 8007ce0 <putchar+0x14>
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 fa52 	bl	8008184 <__sinit>
 8007ce0:	68a2      	ldr	r2, [r4, #8]
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cea:	f000 beb1 	b.w	8008a50 <_putc_r>
 8007cee:	bf00      	nop
 8007cf0:	200007dc 	.word	0x200007dc

08007cf4 <_puts_r>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	460e      	mov	r6, r1
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	b118      	cbz	r0, 8007d04 <_puts_r+0x10>
 8007cfc:	6983      	ldr	r3, [r0, #24]
 8007cfe:	b90b      	cbnz	r3, 8007d04 <_puts_r+0x10>
 8007d00:	f000 fa40 	bl	8008184 <__sinit>
 8007d04:	69ab      	ldr	r3, [r5, #24]
 8007d06:	68ac      	ldr	r4, [r5, #8]
 8007d08:	b913      	cbnz	r3, 8007d10 <_puts_r+0x1c>
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f000 fa3a 	bl	8008184 <__sinit>
 8007d10:	4b23      	ldr	r3, [pc, #140]	; (8007da0 <_puts_r+0xac>)
 8007d12:	429c      	cmp	r4, r3
 8007d14:	d117      	bne.n	8007d46 <_puts_r+0x52>
 8007d16:	686c      	ldr	r4, [r5, #4]
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	071b      	lsls	r3, r3, #28
 8007d1c:	d51d      	bpl.n	8007d5a <_puts_r+0x66>
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	b1db      	cbz	r3, 8007d5a <_puts_r+0x66>
 8007d22:	3e01      	subs	r6, #1
 8007d24:	68a3      	ldr	r3, [r4, #8]
 8007d26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	60a3      	str	r3, [r4, #8]
 8007d2e:	b9e9      	cbnz	r1, 8007d6c <_puts_r+0x78>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	da2e      	bge.n	8007d92 <_puts_r+0x9e>
 8007d34:	4622      	mov	r2, r4
 8007d36:	210a      	movs	r1, #10
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f000 f873 	bl	8007e24 <__swbuf_r>
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d011      	beq.n	8007d66 <_puts_r+0x72>
 8007d42:	200a      	movs	r0, #10
 8007d44:	e011      	b.n	8007d6a <_puts_r+0x76>
 8007d46:	4b17      	ldr	r3, [pc, #92]	; (8007da4 <_puts_r+0xb0>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	d101      	bne.n	8007d50 <_puts_r+0x5c>
 8007d4c:	68ac      	ldr	r4, [r5, #8]
 8007d4e:	e7e3      	b.n	8007d18 <_puts_r+0x24>
 8007d50:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <_puts_r+0xb4>)
 8007d52:	429c      	cmp	r4, r3
 8007d54:	bf08      	it	eq
 8007d56:	68ec      	ldreq	r4, [r5, #12]
 8007d58:	e7de      	b.n	8007d18 <_puts_r+0x24>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f000 f8b3 	bl	8007ec8 <__swsetup_r>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d0dd      	beq.n	8007d22 <_puts_r+0x2e>
 8007d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da04      	bge.n	8007d7a <_puts_r+0x86>
 8007d70:	69a2      	ldr	r2, [r4, #24]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	dc06      	bgt.n	8007d84 <_puts_r+0x90>
 8007d76:	290a      	cmp	r1, #10
 8007d78:	d004      	beq.n	8007d84 <_puts_r+0x90>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	6022      	str	r2, [r4, #0]
 8007d80:	7019      	strb	r1, [r3, #0]
 8007d82:	e7cf      	b.n	8007d24 <_puts_r+0x30>
 8007d84:	4622      	mov	r2, r4
 8007d86:	4628      	mov	r0, r5
 8007d88:	f000 f84c 	bl	8007e24 <__swbuf_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d1c9      	bne.n	8007d24 <_puts_r+0x30>
 8007d90:	e7e9      	b.n	8007d66 <_puts_r+0x72>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	200a      	movs	r0, #10
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	6022      	str	r2, [r4, #0]
 8007d9a:	7018      	strb	r0, [r3, #0]
 8007d9c:	e7e5      	b.n	8007d6a <_puts_r+0x76>
 8007d9e:	bf00      	nop
 8007da0:	08009a0c 	.word	0x08009a0c
 8007da4:	08009a2c 	.word	0x08009a2c
 8007da8:	080099ec 	.word	0x080099ec

08007dac <puts>:
 8007dac:	4b02      	ldr	r3, [pc, #8]	; (8007db8 <puts+0xc>)
 8007dae:	4601      	mov	r1, r0
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	f7ff bf9f 	b.w	8007cf4 <_puts_r>
 8007db6:	bf00      	nop
 8007db8:	200007dc 	.word	0x200007dc

08007dbc <rand>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <rand+0x50>)
 8007dc0:	681c      	ldr	r4, [r3, #0]
 8007dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007dc4:	b97b      	cbnz	r3, 8007de6 <rand+0x2a>
 8007dc6:	2018      	movs	r0, #24
 8007dc8:	f000 faca 	bl	8008360 <malloc>
 8007dcc:	4a10      	ldr	r2, [pc, #64]	; (8007e10 <rand+0x54>)
 8007dce:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <rand+0x58>)
 8007dd0:	63a0      	str	r0, [r4, #56]	; 0x38
 8007dd2:	e9c0 2300 	strd	r2, r3, [r0]
 8007dd6:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <rand+0x5c>)
 8007dd8:	6083      	str	r3, [r0, #8]
 8007dda:	230b      	movs	r3, #11
 8007ddc:	8183      	strh	r3, [r0, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	2300      	movs	r3, #0
 8007de2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007de6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007de8:	480c      	ldr	r0, [pc, #48]	; (8007e1c <rand+0x60>)
 8007dea:	690a      	ldr	r2, [r1, #16]
 8007dec:	694b      	ldr	r3, [r1, #20]
 8007dee:	4c0c      	ldr	r4, [pc, #48]	; (8007e20 <rand+0x64>)
 8007df0:	4350      	muls	r0, r2
 8007df2:	fb04 0003 	mla	r0, r4, r3, r0
 8007df6:	fba2 2304 	umull	r2, r3, r2, r4
 8007dfa:	4403      	add	r3, r0
 8007dfc:	1c54      	adds	r4, r2, #1
 8007dfe:	f143 0500 	adc.w	r5, r3, #0
 8007e02:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8007e06:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	200007dc 	.word	0x200007dc
 8007e10:	abcd330e 	.word	0xabcd330e
 8007e14:	e66d1234 	.word	0xe66d1234
 8007e18:	0005deec 	.word	0x0005deec
 8007e1c:	5851f42d 	.word	0x5851f42d
 8007e20:	4c957f2d 	.word	0x4c957f2d

08007e24 <__swbuf_r>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	460e      	mov	r6, r1
 8007e28:	4614      	mov	r4, r2
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	b118      	cbz	r0, 8007e36 <__swbuf_r+0x12>
 8007e2e:	6983      	ldr	r3, [r0, #24]
 8007e30:	b90b      	cbnz	r3, 8007e36 <__swbuf_r+0x12>
 8007e32:	f000 f9a7 	bl	8008184 <__sinit>
 8007e36:	4b21      	ldr	r3, [pc, #132]	; (8007ebc <__swbuf_r+0x98>)
 8007e38:	429c      	cmp	r4, r3
 8007e3a:	d12a      	bne.n	8007e92 <__swbuf_r+0x6e>
 8007e3c:	686c      	ldr	r4, [r5, #4]
 8007e3e:	69a3      	ldr	r3, [r4, #24]
 8007e40:	60a3      	str	r3, [r4, #8]
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	071a      	lsls	r2, r3, #28
 8007e46:	d52e      	bpl.n	8007ea6 <__swbuf_r+0x82>
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	b363      	cbz	r3, 8007ea6 <__swbuf_r+0x82>
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	6820      	ldr	r0, [r4, #0]
 8007e50:	1ac0      	subs	r0, r0, r3
 8007e52:	6963      	ldr	r3, [r4, #20]
 8007e54:	b2f6      	uxtb	r6, r6
 8007e56:	4283      	cmp	r3, r0
 8007e58:	4637      	mov	r7, r6
 8007e5a:	dc04      	bgt.n	8007e66 <__swbuf_r+0x42>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f000 f926 	bl	80080b0 <_fflush_r>
 8007e64:	bb28      	cbnz	r0, 8007eb2 <__swbuf_r+0x8e>
 8007e66:	68a3      	ldr	r3, [r4, #8]
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	60a3      	str	r3, [r4, #8]
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	6022      	str	r2, [r4, #0]
 8007e72:	701e      	strb	r6, [r3, #0]
 8007e74:	6963      	ldr	r3, [r4, #20]
 8007e76:	3001      	adds	r0, #1
 8007e78:	4283      	cmp	r3, r0
 8007e7a:	d004      	beq.n	8007e86 <__swbuf_r+0x62>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	07db      	lsls	r3, r3, #31
 8007e80:	d519      	bpl.n	8007eb6 <__swbuf_r+0x92>
 8007e82:	2e0a      	cmp	r6, #10
 8007e84:	d117      	bne.n	8007eb6 <__swbuf_r+0x92>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 f911 	bl	80080b0 <_fflush_r>
 8007e8e:	b190      	cbz	r0, 8007eb6 <__swbuf_r+0x92>
 8007e90:	e00f      	b.n	8007eb2 <__swbuf_r+0x8e>
 8007e92:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <__swbuf_r+0x9c>)
 8007e94:	429c      	cmp	r4, r3
 8007e96:	d101      	bne.n	8007e9c <__swbuf_r+0x78>
 8007e98:	68ac      	ldr	r4, [r5, #8]
 8007e9a:	e7d0      	b.n	8007e3e <__swbuf_r+0x1a>
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <__swbuf_r+0xa0>)
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	bf08      	it	eq
 8007ea2:	68ec      	ldreq	r4, [r5, #12]
 8007ea4:	e7cb      	b.n	8007e3e <__swbuf_r+0x1a>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f000 f80d 	bl	8007ec8 <__swsetup_r>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d0cc      	beq.n	8007e4c <__swbuf_r+0x28>
 8007eb2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	08009a0c 	.word	0x08009a0c
 8007ec0:	08009a2c 	.word	0x08009a2c
 8007ec4:	080099ec 	.word	0x080099ec

08007ec8 <__swsetup_r>:
 8007ec8:	4b32      	ldr	r3, [pc, #200]	; (8007f94 <__swsetup_r+0xcc>)
 8007eca:	b570      	push	{r4, r5, r6, lr}
 8007ecc:	681d      	ldr	r5, [r3, #0]
 8007ece:	4606      	mov	r6, r0
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	b125      	cbz	r5, 8007ede <__swsetup_r+0x16>
 8007ed4:	69ab      	ldr	r3, [r5, #24]
 8007ed6:	b913      	cbnz	r3, 8007ede <__swsetup_r+0x16>
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f000 f953 	bl	8008184 <__sinit>
 8007ede:	4b2e      	ldr	r3, [pc, #184]	; (8007f98 <__swsetup_r+0xd0>)
 8007ee0:	429c      	cmp	r4, r3
 8007ee2:	d10f      	bne.n	8007f04 <__swsetup_r+0x3c>
 8007ee4:	686c      	ldr	r4, [r5, #4]
 8007ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	0715      	lsls	r5, r2, #28
 8007eee:	d42c      	bmi.n	8007f4a <__swsetup_r+0x82>
 8007ef0:	06d0      	lsls	r0, r2, #27
 8007ef2:	d411      	bmi.n	8007f18 <__swsetup_r+0x50>
 8007ef4:	2209      	movs	r2, #9
 8007ef6:	6032      	str	r2, [r6, #0]
 8007ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007efc:	81a3      	strh	r3, [r4, #12]
 8007efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f02:	e03e      	b.n	8007f82 <__swsetup_r+0xba>
 8007f04:	4b25      	ldr	r3, [pc, #148]	; (8007f9c <__swsetup_r+0xd4>)
 8007f06:	429c      	cmp	r4, r3
 8007f08:	d101      	bne.n	8007f0e <__swsetup_r+0x46>
 8007f0a:	68ac      	ldr	r4, [r5, #8]
 8007f0c:	e7eb      	b.n	8007ee6 <__swsetup_r+0x1e>
 8007f0e:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <__swsetup_r+0xd8>)
 8007f10:	429c      	cmp	r4, r3
 8007f12:	bf08      	it	eq
 8007f14:	68ec      	ldreq	r4, [r5, #12]
 8007f16:	e7e6      	b.n	8007ee6 <__swsetup_r+0x1e>
 8007f18:	0751      	lsls	r1, r2, #29
 8007f1a:	d512      	bpl.n	8007f42 <__swsetup_r+0x7a>
 8007f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f1e:	b141      	cbz	r1, 8007f32 <__swsetup_r+0x6a>
 8007f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f24:	4299      	cmp	r1, r3
 8007f26:	d002      	beq.n	8007f2e <__swsetup_r+0x66>
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f000 fa21 	bl	8008370 <_free_r>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	6363      	str	r3, [r4, #52]	; 0x34
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f38:	81a3      	strh	r3, [r4, #12]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6063      	str	r3, [r4, #4]
 8007f3e:	6923      	ldr	r3, [r4, #16]
 8007f40:	6023      	str	r3, [r4, #0]
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f043 0308 	orr.w	r3, r3, #8
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	b94b      	cbnz	r3, 8007f62 <__swsetup_r+0x9a>
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f58:	d003      	beq.n	8007f62 <__swsetup_r+0x9a>
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f000 f9bf 	bl	80082e0 <__smakebuf_r>
 8007f62:	89a2      	ldrh	r2, [r4, #12]
 8007f64:	f012 0301 	ands.w	r3, r2, #1
 8007f68:	d00c      	beq.n	8007f84 <__swsetup_r+0xbc>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	6963      	ldr	r3, [r4, #20]
 8007f70:	425b      	negs	r3, r3
 8007f72:	61a3      	str	r3, [r4, #24]
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	b953      	cbnz	r3, 8007f8e <__swsetup_r+0xc6>
 8007f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007f80:	d1ba      	bne.n	8007ef8 <__swsetup_r+0x30>
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	0792      	lsls	r2, r2, #30
 8007f86:	bf58      	it	pl
 8007f88:	6963      	ldrpl	r3, [r4, #20]
 8007f8a:	60a3      	str	r3, [r4, #8]
 8007f8c:	e7f2      	b.n	8007f74 <__swsetup_r+0xac>
 8007f8e:	2000      	movs	r0, #0
 8007f90:	e7f7      	b.n	8007f82 <__swsetup_r+0xba>
 8007f92:	bf00      	nop
 8007f94:	200007dc 	.word	0x200007dc
 8007f98:	08009a0c 	.word	0x08009a0c
 8007f9c:	08009a2c 	.word	0x08009a2c
 8007fa0:	080099ec 	.word	0x080099ec

08007fa4 <__sflush_r>:
 8007fa4:	898a      	ldrh	r2, [r1, #12]
 8007fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007faa:	4605      	mov	r5, r0
 8007fac:	0710      	lsls	r0, r2, #28
 8007fae:	460c      	mov	r4, r1
 8007fb0:	d458      	bmi.n	8008064 <__sflush_r+0xc0>
 8007fb2:	684b      	ldr	r3, [r1, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	dc05      	bgt.n	8007fc4 <__sflush_r+0x20>
 8007fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dc02      	bgt.n	8007fc4 <__sflush_r+0x20>
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	d0f9      	beq.n	8007fbe <__sflush_r+0x1a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fd0:	682f      	ldr	r7, [r5, #0]
 8007fd2:	6a21      	ldr	r1, [r4, #32]
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	d032      	beq.n	800803e <__sflush_r+0x9a>
 8007fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	075a      	lsls	r2, r3, #29
 8007fde:	d505      	bpl.n	8007fec <__sflush_r+0x48>
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	1ac0      	subs	r0, r0, r3
 8007fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fe6:	b10b      	cbz	r3, 8007fec <__sflush_r+0x48>
 8007fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fea:	1ac0      	subs	r0, r0, r3
 8007fec:	2300      	movs	r3, #0
 8007fee:	4602      	mov	r2, r0
 8007ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff2:	6a21      	ldr	r1, [r4, #32]
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b0      	blx	r6
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	d106      	bne.n	800800c <__sflush_r+0x68>
 8007ffe:	6829      	ldr	r1, [r5, #0]
 8008000:	291d      	cmp	r1, #29
 8008002:	d848      	bhi.n	8008096 <__sflush_r+0xf2>
 8008004:	4a29      	ldr	r2, [pc, #164]	; (80080ac <__sflush_r+0x108>)
 8008006:	40ca      	lsrs	r2, r1
 8008008:	07d6      	lsls	r6, r2, #31
 800800a:	d544      	bpl.n	8008096 <__sflush_r+0xf2>
 800800c:	2200      	movs	r2, #0
 800800e:	6062      	str	r2, [r4, #4]
 8008010:	04d9      	lsls	r1, r3, #19
 8008012:	6922      	ldr	r2, [r4, #16]
 8008014:	6022      	str	r2, [r4, #0]
 8008016:	d504      	bpl.n	8008022 <__sflush_r+0x7e>
 8008018:	1c42      	adds	r2, r0, #1
 800801a:	d101      	bne.n	8008020 <__sflush_r+0x7c>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b903      	cbnz	r3, 8008022 <__sflush_r+0x7e>
 8008020:	6560      	str	r0, [r4, #84]	; 0x54
 8008022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008024:	602f      	str	r7, [r5, #0]
 8008026:	2900      	cmp	r1, #0
 8008028:	d0c9      	beq.n	8007fbe <__sflush_r+0x1a>
 800802a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800802e:	4299      	cmp	r1, r3
 8008030:	d002      	beq.n	8008038 <__sflush_r+0x94>
 8008032:	4628      	mov	r0, r5
 8008034:	f000 f99c 	bl	8008370 <_free_r>
 8008038:	2000      	movs	r0, #0
 800803a:	6360      	str	r0, [r4, #52]	; 0x34
 800803c:	e7c0      	b.n	8007fc0 <__sflush_r+0x1c>
 800803e:	2301      	movs	r3, #1
 8008040:	4628      	mov	r0, r5
 8008042:	47b0      	blx	r6
 8008044:	1c41      	adds	r1, r0, #1
 8008046:	d1c8      	bne.n	8007fda <__sflush_r+0x36>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0c5      	beq.n	8007fda <__sflush_r+0x36>
 800804e:	2b1d      	cmp	r3, #29
 8008050:	d001      	beq.n	8008056 <__sflush_r+0xb2>
 8008052:	2b16      	cmp	r3, #22
 8008054:	d101      	bne.n	800805a <__sflush_r+0xb6>
 8008056:	602f      	str	r7, [r5, #0]
 8008058:	e7b1      	b.n	8007fbe <__sflush_r+0x1a>
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	e7ad      	b.n	8007fc0 <__sflush_r+0x1c>
 8008064:	690f      	ldr	r7, [r1, #16]
 8008066:	2f00      	cmp	r7, #0
 8008068:	d0a9      	beq.n	8007fbe <__sflush_r+0x1a>
 800806a:	0793      	lsls	r3, r2, #30
 800806c:	680e      	ldr	r6, [r1, #0]
 800806e:	bf08      	it	eq
 8008070:	694b      	ldreq	r3, [r1, #20]
 8008072:	600f      	str	r7, [r1, #0]
 8008074:	bf18      	it	ne
 8008076:	2300      	movne	r3, #0
 8008078:	eba6 0807 	sub.w	r8, r6, r7
 800807c:	608b      	str	r3, [r1, #8]
 800807e:	f1b8 0f00 	cmp.w	r8, #0
 8008082:	dd9c      	ble.n	8007fbe <__sflush_r+0x1a>
 8008084:	4643      	mov	r3, r8
 8008086:	463a      	mov	r2, r7
 8008088:	6a21      	ldr	r1, [r4, #32]
 800808a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800808c:	4628      	mov	r0, r5
 800808e:	47b0      	blx	r6
 8008090:	2800      	cmp	r0, #0
 8008092:	dc06      	bgt.n	80080a2 <__sflush_r+0xfe>
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809a:	81a3      	strh	r3, [r4, #12]
 800809c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a0:	e78e      	b.n	8007fc0 <__sflush_r+0x1c>
 80080a2:	4407      	add	r7, r0
 80080a4:	eba8 0800 	sub.w	r8, r8, r0
 80080a8:	e7e9      	b.n	800807e <__sflush_r+0xda>
 80080aa:	bf00      	nop
 80080ac:	20400001 	.word	0x20400001

080080b0 <_fflush_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	690b      	ldr	r3, [r1, #16]
 80080b4:	4605      	mov	r5, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	b1db      	cbz	r3, 80080f2 <_fflush_r+0x42>
 80080ba:	b118      	cbz	r0, 80080c4 <_fflush_r+0x14>
 80080bc:	6983      	ldr	r3, [r0, #24]
 80080be:	b90b      	cbnz	r3, 80080c4 <_fflush_r+0x14>
 80080c0:	f000 f860 	bl	8008184 <__sinit>
 80080c4:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <_fflush_r+0x48>)
 80080c6:	429c      	cmp	r4, r3
 80080c8:	d109      	bne.n	80080de <_fflush_r+0x2e>
 80080ca:	686c      	ldr	r4, [r5, #4]
 80080cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d0:	b17b      	cbz	r3, 80080f2 <_fflush_r+0x42>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4628      	mov	r0, r5
 80080d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080da:	f7ff bf63 	b.w	8007fa4 <__sflush_r>
 80080de:	4b07      	ldr	r3, [pc, #28]	; (80080fc <_fflush_r+0x4c>)
 80080e0:	429c      	cmp	r4, r3
 80080e2:	d101      	bne.n	80080e8 <_fflush_r+0x38>
 80080e4:	68ac      	ldr	r4, [r5, #8]
 80080e6:	e7f1      	b.n	80080cc <_fflush_r+0x1c>
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <_fflush_r+0x50>)
 80080ea:	429c      	cmp	r4, r3
 80080ec:	bf08      	it	eq
 80080ee:	68ec      	ldreq	r4, [r5, #12]
 80080f0:	e7ec      	b.n	80080cc <_fflush_r+0x1c>
 80080f2:	2000      	movs	r0, #0
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	bf00      	nop
 80080f8:	08009a0c 	.word	0x08009a0c
 80080fc:	08009a2c 	.word	0x08009a2c
 8008100:	080099ec 	.word	0x080099ec

08008104 <std>:
 8008104:	2300      	movs	r3, #0
 8008106:	b510      	push	{r4, lr}
 8008108:	4604      	mov	r4, r0
 800810a:	e9c0 3300 	strd	r3, r3, [r0]
 800810e:	6083      	str	r3, [r0, #8]
 8008110:	8181      	strh	r1, [r0, #12]
 8008112:	6643      	str	r3, [r0, #100]	; 0x64
 8008114:	81c2      	strh	r2, [r0, #14]
 8008116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800811a:	6183      	str	r3, [r0, #24]
 800811c:	4619      	mov	r1, r3
 800811e:	2208      	movs	r2, #8
 8008120:	305c      	adds	r0, #92	; 0x5c
 8008122:	f7ff fdb3 	bl	8007c8c <memset>
 8008126:	4b05      	ldr	r3, [pc, #20]	; (800813c <std+0x38>)
 8008128:	6263      	str	r3, [r4, #36]	; 0x24
 800812a:	4b05      	ldr	r3, [pc, #20]	; (8008140 <std+0x3c>)
 800812c:	62a3      	str	r3, [r4, #40]	; 0x28
 800812e:	4b05      	ldr	r3, [pc, #20]	; (8008144 <std+0x40>)
 8008130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <std+0x44>)
 8008134:	6224      	str	r4, [r4, #32]
 8008136:	6323      	str	r3, [r4, #48]	; 0x30
 8008138:	bd10      	pop	{r4, pc}
 800813a:	bf00      	nop
 800813c:	08008add 	.word	0x08008add
 8008140:	08008aff 	.word	0x08008aff
 8008144:	08008b37 	.word	0x08008b37
 8008148:	08008b5b 	.word	0x08008b5b

0800814c <_cleanup_r>:
 800814c:	4901      	ldr	r1, [pc, #4]	; (8008154 <_cleanup_r+0x8>)
 800814e:	f000 b885 	b.w	800825c <_fwalk_reent>
 8008152:	bf00      	nop
 8008154:	080080b1 	.word	0x080080b1

08008158 <__sfmoreglue>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	1e4a      	subs	r2, r1, #1
 800815c:	2568      	movs	r5, #104	; 0x68
 800815e:	4355      	muls	r5, r2
 8008160:	460e      	mov	r6, r1
 8008162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008166:	f000 f951 	bl	800840c <_malloc_r>
 800816a:	4604      	mov	r4, r0
 800816c:	b140      	cbz	r0, 8008180 <__sfmoreglue+0x28>
 800816e:	2100      	movs	r1, #0
 8008170:	e9c0 1600 	strd	r1, r6, [r0]
 8008174:	300c      	adds	r0, #12
 8008176:	60a0      	str	r0, [r4, #8]
 8008178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800817c:	f7ff fd86 	bl	8007c8c <memset>
 8008180:	4620      	mov	r0, r4
 8008182:	bd70      	pop	{r4, r5, r6, pc}

08008184 <__sinit>:
 8008184:	6983      	ldr	r3, [r0, #24]
 8008186:	b510      	push	{r4, lr}
 8008188:	4604      	mov	r4, r0
 800818a:	bb33      	cbnz	r3, 80081da <__sinit+0x56>
 800818c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008190:	6503      	str	r3, [r0, #80]	; 0x50
 8008192:	4b12      	ldr	r3, [pc, #72]	; (80081dc <__sinit+0x58>)
 8008194:	4a12      	ldr	r2, [pc, #72]	; (80081e0 <__sinit+0x5c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6282      	str	r2, [r0, #40]	; 0x28
 800819a:	4298      	cmp	r0, r3
 800819c:	bf04      	itt	eq
 800819e:	2301      	moveq	r3, #1
 80081a0:	6183      	streq	r3, [r0, #24]
 80081a2:	f000 f81f 	bl	80081e4 <__sfp>
 80081a6:	6060      	str	r0, [r4, #4]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 f81b 	bl	80081e4 <__sfp>
 80081ae:	60a0      	str	r0, [r4, #8]
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 f817 	bl	80081e4 <__sfp>
 80081b6:	2200      	movs	r2, #0
 80081b8:	60e0      	str	r0, [r4, #12]
 80081ba:	2104      	movs	r1, #4
 80081bc:	6860      	ldr	r0, [r4, #4]
 80081be:	f7ff ffa1 	bl	8008104 <std>
 80081c2:	2201      	movs	r2, #1
 80081c4:	2109      	movs	r1, #9
 80081c6:	68a0      	ldr	r0, [r4, #8]
 80081c8:	f7ff ff9c 	bl	8008104 <std>
 80081cc:	2202      	movs	r2, #2
 80081ce:	2112      	movs	r1, #18
 80081d0:	68e0      	ldr	r0, [r4, #12]
 80081d2:	f7ff ff97 	bl	8008104 <std>
 80081d6:	2301      	movs	r3, #1
 80081d8:	61a3      	str	r3, [r4, #24]
 80081da:	bd10      	pop	{r4, pc}
 80081dc:	080099e8 	.word	0x080099e8
 80081e0:	0800814d 	.word	0x0800814d

080081e4 <__sfp>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <__sfp+0x70>)
 80081e8:	681e      	ldr	r6, [r3, #0]
 80081ea:	69b3      	ldr	r3, [r6, #24]
 80081ec:	4607      	mov	r7, r0
 80081ee:	b913      	cbnz	r3, 80081f6 <__sfp+0x12>
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7ff ffc7 	bl	8008184 <__sinit>
 80081f6:	3648      	adds	r6, #72	; 0x48
 80081f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	d503      	bpl.n	8008208 <__sfp+0x24>
 8008200:	6833      	ldr	r3, [r6, #0]
 8008202:	b133      	cbz	r3, 8008212 <__sfp+0x2e>
 8008204:	6836      	ldr	r6, [r6, #0]
 8008206:	e7f7      	b.n	80081f8 <__sfp+0x14>
 8008208:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800820c:	b16d      	cbz	r5, 800822a <__sfp+0x46>
 800820e:	3468      	adds	r4, #104	; 0x68
 8008210:	e7f4      	b.n	80081fc <__sfp+0x18>
 8008212:	2104      	movs	r1, #4
 8008214:	4638      	mov	r0, r7
 8008216:	f7ff ff9f 	bl	8008158 <__sfmoreglue>
 800821a:	6030      	str	r0, [r6, #0]
 800821c:	2800      	cmp	r0, #0
 800821e:	d1f1      	bne.n	8008204 <__sfp+0x20>
 8008220:	230c      	movs	r3, #12
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	4604      	mov	r4, r0
 8008226:	4620      	mov	r0, r4
 8008228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800822a:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <__sfp+0x74>)
 800822c:	6665      	str	r5, [r4, #100]	; 0x64
 800822e:	e9c4 5500 	strd	r5, r5, [r4]
 8008232:	60a5      	str	r5, [r4, #8]
 8008234:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008238:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800823c:	2208      	movs	r2, #8
 800823e:	4629      	mov	r1, r5
 8008240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008244:	f7ff fd22 	bl	8007c8c <memset>
 8008248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800824c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008250:	e7e9      	b.n	8008226 <__sfp+0x42>
 8008252:	bf00      	nop
 8008254:	080099e8 	.word	0x080099e8
 8008258:	ffff0001 	.word	0xffff0001

0800825c <_fwalk_reent>:
 800825c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008260:	4680      	mov	r8, r0
 8008262:	4689      	mov	r9, r1
 8008264:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008268:	2600      	movs	r6, #0
 800826a:	b914      	cbnz	r4, 8008272 <_fwalk_reent+0x16>
 800826c:	4630      	mov	r0, r6
 800826e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008272:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008276:	3f01      	subs	r7, #1
 8008278:	d501      	bpl.n	800827e <_fwalk_reent+0x22>
 800827a:	6824      	ldr	r4, [r4, #0]
 800827c:	e7f5      	b.n	800826a <_fwalk_reent+0xe>
 800827e:	89ab      	ldrh	r3, [r5, #12]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d907      	bls.n	8008294 <_fwalk_reent+0x38>
 8008284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008288:	3301      	adds	r3, #1
 800828a:	d003      	beq.n	8008294 <_fwalk_reent+0x38>
 800828c:	4629      	mov	r1, r5
 800828e:	4640      	mov	r0, r8
 8008290:	47c8      	blx	r9
 8008292:	4306      	orrs	r6, r0
 8008294:	3568      	adds	r5, #104	; 0x68
 8008296:	e7ee      	b.n	8008276 <_fwalk_reent+0x1a>

08008298 <__swhatbuf_r>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	460e      	mov	r6, r1
 800829c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a0:	2900      	cmp	r1, #0
 80082a2:	b096      	sub	sp, #88	; 0x58
 80082a4:	4614      	mov	r4, r2
 80082a6:	461d      	mov	r5, r3
 80082a8:	da07      	bge.n	80082ba <__swhatbuf_r+0x22>
 80082aa:	2300      	movs	r3, #0
 80082ac:	602b      	str	r3, [r5, #0]
 80082ae:	89b3      	ldrh	r3, [r6, #12]
 80082b0:	061a      	lsls	r2, r3, #24
 80082b2:	d410      	bmi.n	80082d6 <__swhatbuf_r+0x3e>
 80082b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082b8:	e00e      	b.n	80082d8 <__swhatbuf_r+0x40>
 80082ba:	466a      	mov	r2, sp
 80082bc:	f000 fc74 	bl	8008ba8 <_fstat_r>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	dbf2      	blt.n	80082aa <__swhatbuf_r+0x12>
 80082c4:	9a01      	ldr	r2, [sp, #4]
 80082c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082ce:	425a      	negs	r2, r3
 80082d0:	415a      	adcs	r2, r3
 80082d2:	602a      	str	r2, [r5, #0]
 80082d4:	e7ee      	b.n	80082b4 <__swhatbuf_r+0x1c>
 80082d6:	2340      	movs	r3, #64	; 0x40
 80082d8:	2000      	movs	r0, #0
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	b016      	add	sp, #88	; 0x58
 80082de:	bd70      	pop	{r4, r5, r6, pc}

080082e0 <__smakebuf_r>:
 80082e0:	898b      	ldrh	r3, [r1, #12]
 80082e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082e4:	079d      	lsls	r5, r3, #30
 80082e6:	4606      	mov	r6, r0
 80082e8:	460c      	mov	r4, r1
 80082ea:	d507      	bpl.n	80082fc <__smakebuf_r+0x1c>
 80082ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	6123      	str	r3, [r4, #16]
 80082f4:	2301      	movs	r3, #1
 80082f6:	6163      	str	r3, [r4, #20]
 80082f8:	b002      	add	sp, #8
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	ab01      	add	r3, sp, #4
 80082fe:	466a      	mov	r2, sp
 8008300:	f7ff ffca 	bl	8008298 <__swhatbuf_r>
 8008304:	9900      	ldr	r1, [sp, #0]
 8008306:	4605      	mov	r5, r0
 8008308:	4630      	mov	r0, r6
 800830a:	f000 f87f 	bl	800840c <_malloc_r>
 800830e:	b948      	cbnz	r0, 8008324 <__smakebuf_r+0x44>
 8008310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008314:	059a      	lsls	r2, r3, #22
 8008316:	d4ef      	bmi.n	80082f8 <__smakebuf_r+0x18>
 8008318:	f023 0303 	bic.w	r3, r3, #3
 800831c:	f043 0302 	orr.w	r3, r3, #2
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	e7e3      	b.n	80082ec <__smakebuf_r+0xc>
 8008324:	4b0d      	ldr	r3, [pc, #52]	; (800835c <__smakebuf_r+0x7c>)
 8008326:	62b3      	str	r3, [r6, #40]	; 0x28
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	6020      	str	r0, [r4, #0]
 800832c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	9b00      	ldr	r3, [sp, #0]
 8008334:	6163      	str	r3, [r4, #20]
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	6120      	str	r0, [r4, #16]
 800833a:	b15b      	cbz	r3, 8008354 <__smakebuf_r+0x74>
 800833c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008340:	4630      	mov	r0, r6
 8008342:	f000 fc43 	bl	8008bcc <_isatty_r>
 8008346:	b128      	cbz	r0, 8008354 <__smakebuf_r+0x74>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	431d      	orrs	r5, r3
 8008358:	81a5      	strh	r5, [r4, #12]
 800835a:	e7cd      	b.n	80082f8 <__smakebuf_r+0x18>
 800835c:	0800814d 	.word	0x0800814d

08008360 <malloc>:
 8008360:	4b02      	ldr	r3, [pc, #8]	; (800836c <malloc+0xc>)
 8008362:	4601      	mov	r1, r0
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	f000 b851 	b.w	800840c <_malloc_r>
 800836a:	bf00      	nop
 800836c:	200007dc 	.word	0x200007dc

08008370 <_free_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4605      	mov	r5, r0
 8008374:	2900      	cmp	r1, #0
 8008376:	d045      	beq.n	8008404 <_free_r+0x94>
 8008378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800837c:	1f0c      	subs	r4, r1, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	bfb8      	it	lt
 8008382:	18e4      	addlt	r4, r4, r3
 8008384:	f000 fc44 	bl	8008c10 <__malloc_lock>
 8008388:	4a1f      	ldr	r2, [pc, #124]	; (8008408 <_free_r+0x98>)
 800838a:	6813      	ldr	r3, [r2, #0]
 800838c:	4610      	mov	r0, r2
 800838e:	b933      	cbnz	r3, 800839e <_free_r+0x2e>
 8008390:	6063      	str	r3, [r4, #4]
 8008392:	6014      	str	r4, [r2, #0]
 8008394:	4628      	mov	r0, r5
 8008396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800839a:	f000 bc3a 	b.w	8008c12 <__malloc_unlock>
 800839e:	42a3      	cmp	r3, r4
 80083a0:	d90c      	bls.n	80083bc <_free_r+0x4c>
 80083a2:	6821      	ldr	r1, [r4, #0]
 80083a4:	1862      	adds	r2, r4, r1
 80083a6:	4293      	cmp	r3, r2
 80083a8:	bf04      	itt	eq
 80083aa:	681a      	ldreq	r2, [r3, #0]
 80083ac:	685b      	ldreq	r3, [r3, #4]
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	bf04      	itt	eq
 80083b2:	1852      	addeq	r2, r2, r1
 80083b4:	6022      	streq	r2, [r4, #0]
 80083b6:	6004      	str	r4, [r0, #0]
 80083b8:	e7ec      	b.n	8008394 <_free_r+0x24>
 80083ba:	4613      	mov	r3, r2
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	b10a      	cbz	r2, 80083c4 <_free_r+0x54>
 80083c0:	42a2      	cmp	r2, r4
 80083c2:	d9fa      	bls.n	80083ba <_free_r+0x4a>
 80083c4:	6819      	ldr	r1, [r3, #0]
 80083c6:	1858      	adds	r0, r3, r1
 80083c8:	42a0      	cmp	r0, r4
 80083ca:	d10b      	bne.n	80083e4 <_free_r+0x74>
 80083cc:	6820      	ldr	r0, [r4, #0]
 80083ce:	4401      	add	r1, r0
 80083d0:	1858      	adds	r0, r3, r1
 80083d2:	4282      	cmp	r2, r0
 80083d4:	6019      	str	r1, [r3, #0]
 80083d6:	d1dd      	bne.n	8008394 <_free_r+0x24>
 80083d8:	6810      	ldr	r0, [r2, #0]
 80083da:	6852      	ldr	r2, [r2, #4]
 80083dc:	605a      	str	r2, [r3, #4]
 80083de:	4401      	add	r1, r0
 80083e0:	6019      	str	r1, [r3, #0]
 80083e2:	e7d7      	b.n	8008394 <_free_r+0x24>
 80083e4:	d902      	bls.n	80083ec <_free_r+0x7c>
 80083e6:	230c      	movs	r3, #12
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	e7d3      	b.n	8008394 <_free_r+0x24>
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	1821      	adds	r1, r4, r0
 80083f0:	428a      	cmp	r2, r1
 80083f2:	bf04      	itt	eq
 80083f4:	6811      	ldreq	r1, [r2, #0]
 80083f6:	6852      	ldreq	r2, [r2, #4]
 80083f8:	6062      	str	r2, [r4, #4]
 80083fa:	bf04      	itt	eq
 80083fc:	1809      	addeq	r1, r1, r0
 80083fe:	6021      	streq	r1, [r4, #0]
 8008400:	605c      	str	r4, [r3, #4]
 8008402:	e7c7      	b.n	8008394 <_free_r+0x24>
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	20000870 	.word	0x20000870

0800840c <_malloc_r>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	1ccd      	adds	r5, r1, #3
 8008410:	f025 0503 	bic.w	r5, r5, #3
 8008414:	3508      	adds	r5, #8
 8008416:	2d0c      	cmp	r5, #12
 8008418:	bf38      	it	cc
 800841a:	250c      	movcc	r5, #12
 800841c:	2d00      	cmp	r5, #0
 800841e:	4606      	mov	r6, r0
 8008420:	db01      	blt.n	8008426 <_malloc_r+0x1a>
 8008422:	42a9      	cmp	r1, r5
 8008424:	d903      	bls.n	800842e <_malloc_r+0x22>
 8008426:	230c      	movs	r3, #12
 8008428:	6033      	str	r3, [r6, #0]
 800842a:	2000      	movs	r0, #0
 800842c:	bd70      	pop	{r4, r5, r6, pc}
 800842e:	f000 fbef 	bl	8008c10 <__malloc_lock>
 8008432:	4a21      	ldr	r2, [pc, #132]	; (80084b8 <_malloc_r+0xac>)
 8008434:	6814      	ldr	r4, [r2, #0]
 8008436:	4621      	mov	r1, r4
 8008438:	b991      	cbnz	r1, 8008460 <_malloc_r+0x54>
 800843a:	4c20      	ldr	r4, [pc, #128]	; (80084bc <_malloc_r+0xb0>)
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	b91b      	cbnz	r3, 8008448 <_malloc_r+0x3c>
 8008440:	4630      	mov	r0, r6
 8008442:	f000 fb3b 	bl	8008abc <_sbrk_r>
 8008446:	6020      	str	r0, [r4, #0]
 8008448:	4629      	mov	r1, r5
 800844a:	4630      	mov	r0, r6
 800844c:	f000 fb36 	bl	8008abc <_sbrk_r>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d124      	bne.n	800849e <_malloc_r+0x92>
 8008454:	230c      	movs	r3, #12
 8008456:	6033      	str	r3, [r6, #0]
 8008458:	4630      	mov	r0, r6
 800845a:	f000 fbda 	bl	8008c12 <__malloc_unlock>
 800845e:	e7e4      	b.n	800842a <_malloc_r+0x1e>
 8008460:	680b      	ldr	r3, [r1, #0]
 8008462:	1b5b      	subs	r3, r3, r5
 8008464:	d418      	bmi.n	8008498 <_malloc_r+0x8c>
 8008466:	2b0b      	cmp	r3, #11
 8008468:	d90f      	bls.n	800848a <_malloc_r+0x7e>
 800846a:	600b      	str	r3, [r1, #0]
 800846c:	50cd      	str	r5, [r1, r3]
 800846e:	18cc      	adds	r4, r1, r3
 8008470:	4630      	mov	r0, r6
 8008472:	f000 fbce 	bl	8008c12 <__malloc_unlock>
 8008476:	f104 000b 	add.w	r0, r4, #11
 800847a:	1d23      	adds	r3, r4, #4
 800847c:	f020 0007 	bic.w	r0, r0, #7
 8008480:	1ac3      	subs	r3, r0, r3
 8008482:	d0d3      	beq.n	800842c <_malloc_r+0x20>
 8008484:	425a      	negs	r2, r3
 8008486:	50e2      	str	r2, [r4, r3]
 8008488:	e7d0      	b.n	800842c <_malloc_r+0x20>
 800848a:	428c      	cmp	r4, r1
 800848c:	684b      	ldr	r3, [r1, #4]
 800848e:	bf16      	itet	ne
 8008490:	6063      	strne	r3, [r4, #4]
 8008492:	6013      	streq	r3, [r2, #0]
 8008494:	460c      	movne	r4, r1
 8008496:	e7eb      	b.n	8008470 <_malloc_r+0x64>
 8008498:	460c      	mov	r4, r1
 800849a:	6849      	ldr	r1, [r1, #4]
 800849c:	e7cc      	b.n	8008438 <_malloc_r+0x2c>
 800849e:	1cc4      	adds	r4, r0, #3
 80084a0:	f024 0403 	bic.w	r4, r4, #3
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d005      	beq.n	80084b4 <_malloc_r+0xa8>
 80084a8:	1a21      	subs	r1, r4, r0
 80084aa:	4630      	mov	r0, r6
 80084ac:	f000 fb06 	bl	8008abc <_sbrk_r>
 80084b0:	3001      	adds	r0, #1
 80084b2:	d0cf      	beq.n	8008454 <_malloc_r+0x48>
 80084b4:	6025      	str	r5, [r4, #0]
 80084b6:	e7db      	b.n	8008470 <_malloc_r+0x64>
 80084b8:	20000870 	.word	0x20000870
 80084bc:	20000874 	.word	0x20000874

080084c0 <__sfputc_r>:
 80084c0:	6893      	ldr	r3, [r2, #8]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	b410      	push	{r4}
 80084c8:	6093      	str	r3, [r2, #8]
 80084ca:	da08      	bge.n	80084de <__sfputc_r+0x1e>
 80084cc:	6994      	ldr	r4, [r2, #24]
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	db01      	blt.n	80084d6 <__sfputc_r+0x16>
 80084d2:	290a      	cmp	r1, #10
 80084d4:	d103      	bne.n	80084de <__sfputc_r+0x1e>
 80084d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084da:	f7ff bca3 	b.w	8007e24 <__swbuf_r>
 80084de:	6813      	ldr	r3, [r2, #0]
 80084e0:	1c58      	adds	r0, r3, #1
 80084e2:	6010      	str	r0, [r2, #0]
 80084e4:	7019      	strb	r1, [r3, #0]
 80084e6:	4608      	mov	r0, r1
 80084e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <__sfputs_r>:
 80084ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f0:	4606      	mov	r6, r0
 80084f2:	460f      	mov	r7, r1
 80084f4:	4614      	mov	r4, r2
 80084f6:	18d5      	adds	r5, r2, r3
 80084f8:	42ac      	cmp	r4, r5
 80084fa:	d101      	bne.n	8008500 <__sfputs_r+0x12>
 80084fc:	2000      	movs	r0, #0
 80084fe:	e007      	b.n	8008510 <__sfputs_r+0x22>
 8008500:	463a      	mov	r2, r7
 8008502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ffda 	bl	80084c0 <__sfputc_r>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d1f3      	bne.n	80084f8 <__sfputs_r+0xa>
 8008510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008514 <_vfiprintf_r>:
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	460c      	mov	r4, r1
 800851a:	b09d      	sub	sp, #116	; 0x74
 800851c:	4617      	mov	r7, r2
 800851e:	461d      	mov	r5, r3
 8008520:	4606      	mov	r6, r0
 8008522:	b118      	cbz	r0, 800852c <_vfiprintf_r+0x18>
 8008524:	6983      	ldr	r3, [r0, #24]
 8008526:	b90b      	cbnz	r3, 800852c <_vfiprintf_r+0x18>
 8008528:	f7ff fe2c 	bl	8008184 <__sinit>
 800852c:	4b7c      	ldr	r3, [pc, #496]	; (8008720 <_vfiprintf_r+0x20c>)
 800852e:	429c      	cmp	r4, r3
 8008530:	d158      	bne.n	80085e4 <_vfiprintf_r+0xd0>
 8008532:	6874      	ldr	r4, [r6, #4]
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	0718      	lsls	r0, r3, #28
 8008538:	d55e      	bpl.n	80085f8 <_vfiprintf_r+0xe4>
 800853a:	6923      	ldr	r3, [r4, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d05b      	beq.n	80085f8 <_vfiprintf_r+0xe4>
 8008540:	2300      	movs	r3, #0
 8008542:	9309      	str	r3, [sp, #36]	; 0x24
 8008544:	2320      	movs	r3, #32
 8008546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800854a:	2330      	movs	r3, #48	; 0x30
 800854c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008550:	9503      	str	r5, [sp, #12]
 8008552:	f04f 0b01 	mov.w	fp, #1
 8008556:	46b8      	mov	r8, r7
 8008558:	4645      	mov	r5, r8
 800855a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800855e:	b10b      	cbz	r3, 8008564 <_vfiprintf_r+0x50>
 8008560:	2b25      	cmp	r3, #37	; 0x25
 8008562:	d154      	bne.n	800860e <_vfiprintf_r+0xfa>
 8008564:	ebb8 0a07 	subs.w	sl, r8, r7
 8008568:	d00b      	beq.n	8008582 <_vfiprintf_r+0x6e>
 800856a:	4653      	mov	r3, sl
 800856c:	463a      	mov	r2, r7
 800856e:	4621      	mov	r1, r4
 8008570:	4630      	mov	r0, r6
 8008572:	f7ff ffbc 	bl	80084ee <__sfputs_r>
 8008576:	3001      	adds	r0, #1
 8008578:	f000 80c2 	beq.w	8008700 <_vfiprintf_r+0x1ec>
 800857c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857e:	4453      	add	r3, sl
 8008580:	9309      	str	r3, [sp, #36]	; 0x24
 8008582:	f898 3000 	ldrb.w	r3, [r8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80ba 	beq.w	8008700 <_vfiprintf_r+0x1ec>
 800858c:	2300      	movs	r3, #0
 800858e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	9307      	str	r3, [sp, #28]
 800859a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800859e:	931a      	str	r3, [sp, #104]	; 0x68
 80085a0:	46a8      	mov	r8, r5
 80085a2:	2205      	movs	r2, #5
 80085a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80085a8:	485e      	ldr	r0, [pc, #376]	; (8008724 <_vfiprintf_r+0x210>)
 80085aa:	f7f7 fe49 	bl	8000240 <memchr>
 80085ae:	9b04      	ldr	r3, [sp, #16]
 80085b0:	bb78      	cbnz	r0, 8008612 <_vfiprintf_r+0xfe>
 80085b2:	06d9      	lsls	r1, r3, #27
 80085b4:	bf44      	itt	mi
 80085b6:	2220      	movmi	r2, #32
 80085b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085bc:	071a      	lsls	r2, r3, #28
 80085be:	bf44      	itt	mi
 80085c0:	222b      	movmi	r2, #43	; 0x2b
 80085c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085c6:	782a      	ldrb	r2, [r5, #0]
 80085c8:	2a2a      	cmp	r2, #42	; 0x2a
 80085ca:	d02a      	beq.n	8008622 <_vfiprintf_r+0x10e>
 80085cc:	9a07      	ldr	r2, [sp, #28]
 80085ce:	46a8      	mov	r8, r5
 80085d0:	2000      	movs	r0, #0
 80085d2:	250a      	movs	r5, #10
 80085d4:	4641      	mov	r1, r8
 80085d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085da:	3b30      	subs	r3, #48	; 0x30
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d969      	bls.n	80086b4 <_vfiprintf_r+0x1a0>
 80085e0:	b360      	cbz	r0, 800863c <_vfiprintf_r+0x128>
 80085e2:	e024      	b.n	800862e <_vfiprintf_r+0x11a>
 80085e4:	4b50      	ldr	r3, [pc, #320]	; (8008728 <_vfiprintf_r+0x214>)
 80085e6:	429c      	cmp	r4, r3
 80085e8:	d101      	bne.n	80085ee <_vfiprintf_r+0xda>
 80085ea:	68b4      	ldr	r4, [r6, #8]
 80085ec:	e7a2      	b.n	8008534 <_vfiprintf_r+0x20>
 80085ee:	4b4f      	ldr	r3, [pc, #316]	; (800872c <_vfiprintf_r+0x218>)
 80085f0:	429c      	cmp	r4, r3
 80085f2:	bf08      	it	eq
 80085f4:	68f4      	ldreq	r4, [r6, #12]
 80085f6:	e79d      	b.n	8008534 <_vfiprintf_r+0x20>
 80085f8:	4621      	mov	r1, r4
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7ff fc64 	bl	8007ec8 <__swsetup_r>
 8008600:	2800      	cmp	r0, #0
 8008602:	d09d      	beq.n	8008540 <_vfiprintf_r+0x2c>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008608:	b01d      	add	sp, #116	; 0x74
 800860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860e:	46a8      	mov	r8, r5
 8008610:	e7a2      	b.n	8008558 <_vfiprintf_r+0x44>
 8008612:	4a44      	ldr	r2, [pc, #272]	; (8008724 <_vfiprintf_r+0x210>)
 8008614:	1a80      	subs	r0, r0, r2
 8008616:	fa0b f000 	lsl.w	r0, fp, r0
 800861a:	4318      	orrs	r0, r3
 800861c:	9004      	str	r0, [sp, #16]
 800861e:	4645      	mov	r5, r8
 8008620:	e7be      	b.n	80085a0 <_vfiprintf_r+0x8c>
 8008622:	9a03      	ldr	r2, [sp, #12]
 8008624:	1d11      	adds	r1, r2, #4
 8008626:	6812      	ldr	r2, [r2, #0]
 8008628:	9103      	str	r1, [sp, #12]
 800862a:	2a00      	cmp	r2, #0
 800862c:	db01      	blt.n	8008632 <_vfiprintf_r+0x11e>
 800862e:	9207      	str	r2, [sp, #28]
 8008630:	e004      	b.n	800863c <_vfiprintf_r+0x128>
 8008632:	4252      	negs	r2, r2
 8008634:	f043 0302 	orr.w	r3, r3, #2
 8008638:	9207      	str	r2, [sp, #28]
 800863a:	9304      	str	r3, [sp, #16]
 800863c:	f898 3000 	ldrb.w	r3, [r8]
 8008640:	2b2e      	cmp	r3, #46	; 0x2e
 8008642:	d10e      	bne.n	8008662 <_vfiprintf_r+0x14e>
 8008644:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008648:	2b2a      	cmp	r3, #42	; 0x2a
 800864a:	d138      	bne.n	80086be <_vfiprintf_r+0x1aa>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	1d1a      	adds	r2, r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	9203      	str	r2, [sp, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	bfb8      	it	lt
 8008658:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800865c:	f108 0802 	add.w	r8, r8, #2
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	4d33      	ldr	r5, [pc, #204]	; (8008730 <_vfiprintf_r+0x21c>)
 8008664:	f898 1000 	ldrb.w	r1, [r8]
 8008668:	2203      	movs	r2, #3
 800866a:	4628      	mov	r0, r5
 800866c:	f7f7 fde8 	bl	8000240 <memchr>
 8008670:	b140      	cbz	r0, 8008684 <_vfiprintf_r+0x170>
 8008672:	2340      	movs	r3, #64	; 0x40
 8008674:	1b40      	subs	r0, r0, r5
 8008676:	fa03 f000 	lsl.w	r0, r3, r0
 800867a:	9b04      	ldr	r3, [sp, #16]
 800867c:	4303      	orrs	r3, r0
 800867e:	f108 0801 	add.w	r8, r8, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	f898 1000 	ldrb.w	r1, [r8]
 8008688:	482a      	ldr	r0, [pc, #168]	; (8008734 <_vfiprintf_r+0x220>)
 800868a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800868e:	2206      	movs	r2, #6
 8008690:	f108 0701 	add.w	r7, r8, #1
 8008694:	f7f7 fdd4 	bl	8000240 <memchr>
 8008698:	2800      	cmp	r0, #0
 800869a:	d037      	beq.n	800870c <_vfiprintf_r+0x1f8>
 800869c:	4b26      	ldr	r3, [pc, #152]	; (8008738 <_vfiprintf_r+0x224>)
 800869e:	bb1b      	cbnz	r3, 80086e8 <_vfiprintf_r+0x1d4>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	3307      	adds	r3, #7
 80086a4:	f023 0307 	bic.w	r3, r3, #7
 80086a8:	3308      	adds	r3, #8
 80086aa:	9303      	str	r3, [sp, #12]
 80086ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ae:	444b      	add	r3, r9
 80086b0:	9309      	str	r3, [sp, #36]	; 0x24
 80086b2:	e750      	b.n	8008556 <_vfiprintf_r+0x42>
 80086b4:	fb05 3202 	mla	r2, r5, r2, r3
 80086b8:	2001      	movs	r0, #1
 80086ba:	4688      	mov	r8, r1
 80086bc:	e78a      	b.n	80085d4 <_vfiprintf_r+0xc0>
 80086be:	2300      	movs	r3, #0
 80086c0:	f108 0801 	add.w	r8, r8, #1
 80086c4:	9305      	str	r3, [sp, #20]
 80086c6:	4619      	mov	r1, r3
 80086c8:	250a      	movs	r5, #10
 80086ca:	4640      	mov	r0, r8
 80086cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086d0:	3a30      	subs	r2, #48	; 0x30
 80086d2:	2a09      	cmp	r2, #9
 80086d4:	d903      	bls.n	80086de <_vfiprintf_r+0x1ca>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0c3      	beq.n	8008662 <_vfiprintf_r+0x14e>
 80086da:	9105      	str	r1, [sp, #20]
 80086dc:	e7c1      	b.n	8008662 <_vfiprintf_r+0x14e>
 80086de:	fb05 2101 	mla	r1, r5, r1, r2
 80086e2:	2301      	movs	r3, #1
 80086e4:	4680      	mov	r8, r0
 80086e6:	e7f0      	b.n	80086ca <_vfiprintf_r+0x1b6>
 80086e8:	ab03      	add	r3, sp, #12
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4622      	mov	r2, r4
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <_vfiprintf_r+0x228>)
 80086f0:	a904      	add	r1, sp, #16
 80086f2:	4630      	mov	r0, r6
 80086f4:	f3af 8000 	nop.w
 80086f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80086fc:	4681      	mov	r9, r0
 80086fe:	d1d5      	bne.n	80086ac <_vfiprintf_r+0x198>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	065b      	lsls	r3, r3, #25
 8008704:	f53f af7e 	bmi.w	8008604 <_vfiprintf_r+0xf0>
 8008708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800870a:	e77d      	b.n	8008608 <_vfiprintf_r+0xf4>
 800870c:	ab03      	add	r3, sp, #12
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	4622      	mov	r2, r4
 8008712:	4b0a      	ldr	r3, [pc, #40]	; (800873c <_vfiprintf_r+0x228>)
 8008714:	a904      	add	r1, sp, #16
 8008716:	4630      	mov	r0, r6
 8008718:	f000 f888 	bl	800882c <_printf_i>
 800871c:	e7ec      	b.n	80086f8 <_vfiprintf_r+0x1e4>
 800871e:	bf00      	nop
 8008720:	08009a0c 	.word	0x08009a0c
 8008724:	08009a4c 	.word	0x08009a4c
 8008728:	08009a2c 	.word	0x08009a2c
 800872c:	080099ec 	.word	0x080099ec
 8008730:	08009a52 	.word	0x08009a52
 8008734:	08009a56 	.word	0x08009a56
 8008738:	00000000 	.word	0x00000000
 800873c:	080084ef 	.word	0x080084ef

08008740 <_printf_common>:
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	4691      	mov	r9, r2
 8008746:	461f      	mov	r7, r3
 8008748:	688a      	ldr	r2, [r1, #8]
 800874a:	690b      	ldr	r3, [r1, #16]
 800874c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008750:	4293      	cmp	r3, r2
 8008752:	bfb8      	it	lt
 8008754:	4613      	movlt	r3, r2
 8008756:	f8c9 3000 	str.w	r3, [r9]
 800875a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800875e:	4606      	mov	r6, r0
 8008760:	460c      	mov	r4, r1
 8008762:	b112      	cbz	r2, 800876a <_printf_common+0x2a>
 8008764:	3301      	adds	r3, #1
 8008766:	f8c9 3000 	str.w	r3, [r9]
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	0699      	lsls	r1, r3, #26
 800876e:	bf42      	ittt	mi
 8008770:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008774:	3302      	addmi	r3, #2
 8008776:	f8c9 3000 	strmi.w	r3, [r9]
 800877a:	6825      	ldr	r5, [r4, #0]
 800877c:	f015 0506 	ands.w	r5, r5, #6
 8008780:	d107      	bne.n	8008792 <_printf_common+0x52>
 8008782:	f104 0a19 	add.w	sl, r4, #25
 8008786:	68e3      	ldr	r3, [r4, #12]
 8008788:	f8d9 2000 	ldr.w	r2, [r9]
 800878c:	1a9b      	subs	r3, r3, r2
 800878e:	42ab      	cmp	r3, r5
 8008790:	dc28      	bgt.n	80087e4 <_printf_common+0xa4>
 8008792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008796:	6822      	ldr	r2, [r4, #0]
 8008798:	3300      	adds	r3, #0
 800879a:	bf18      	it	ne
 800879c:	2301      	movne	r3, #1
 800879e:	0692      	lsls	r2, r2, #26
 80087a0:	d42d      	bmi.n	80087fe <_printf_common+0xbe>
 80087a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087a6:	4639      	mov	r1, r7
 80087a8:	4630      	mov	r0, r6
 80087aa:	47c0      	blx	r8
 80087ac:	3001      	adds	r0, #1
 80087ae:	d020      	beq.n	80087f2 <_printf_common+0xb2>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	68e5      	ldr	r5, [r4, #12]
 80087b4:	f8d9 2000 	ldr.w	r2, [r9]
 80087b8:	f003 0306 	and.w	r3, r3, #6
 80087bc:	2b04      	cmp	r3, #4
 80087be:	bf08      	it	eq
 80087c0:	1aad      	subeq	r5, r5, r2
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	6922      	ldr	r2, [r4, #16]
 80087c6:	bf0c      	ite	eq
 80087c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087cc:	2500      	movne	r5, #0
 80087ce:	4293      	cmp	r3, r2
 80087d0:	bfc4      	itt	gt
 80087d2:	1a9b      	subgt	r3, r3, r2
 80087d4:	18ed      	addgt	r5, r5, r3
 80087d6:	f04f 0900 	mov.w	r9, #0
 80087da:	341a      	adds	r4, #26
 80087dc:	454d      	cmp	r5, r9
 80087de:	d11a      	bne.n	8008816 <_printf_common+0xd6>
 80087e0:	2000      	movs	r0, #0
 80087e2:	e008      	b.n	80087f6 <_printf_common+0xb6>
 80087e4:	2301      	movs	r3, #1
 80087e6:	4652      	mov	r2, sl
 80087e8:	4639      	mov	r1, r7
 80087ea:	4630      	mov	r0, r6
 80087ec:	47c0      	blx	r8
 80087ee:	3001      	adds	r0, #1
 80087f0:	d103      	bne.n	80087fa <_printf_common+0xba>
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fa:	3501      	adds	r5, #1
 80087fc:	e7c3      	b.n	8008786 <_printf_common+0x46>
 80087fe:	18e1      	adds	r1, r4, r3
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	2030      	movs	r0, #48	; 0x30
 8008804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008808:	4422      	add	r2, r4
 800880a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800880e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008812:	3302      	adds	r3, #2
 8008814:	e7c5      	b.n	80087a2 <_printf_common+0x62>
 8008816:	2301      	movs	r3, #1
 8008818:	4622      	mov	r2, r4
 800881a:	4639      	mov	r1, r7
 800881c:	4630      	mov	r0, r6
 800881e:	47c0      	blx	r8
 8008820:	3001      	adds	r0, #1
 8008822:	d0e6      	beq.n	80087f2 <_printf_common+0xb2>
 8008824:	f109 0901 	add.w	r9, r9, #1
 8008828:	e7d8      	b.n	80087dc <_printf_common+0x9c>
	...

0800882c <_printf_i>:
 800882c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008830:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008834:	460c      	mov	r4, r1
 8008836:	7e09      	ldrb	r1, [r1, #24]
 8008838:	b085      	sub	sp, #20
 800883a:	296e      	cmp	r1, #110	; 0x6e
 800883c:	4617      	mov	r7, r2
 800883e:	4606      	mov	r6, r0
 8008840:	4698      	mov	r8, r3
 8008842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008844:	f000 80b3 	beq.w	80089ae <_printf_i+0x182>
 8008848:	d822      	bhi.n	8008890 <_printf_i+0x64>
 800884a:	2963      	cmp	r1, #99	; 0x63
 800884c:	d036      	beq.n	80088bc <_printf_i+0x90>
 800884e:	d80a      	bhi.n	8008866 <_printf_i+0x3a>
 8008850:	2900      	cmp	r1, #0
 8008852:	f000 80b9 	beq.w	80089c8 <_printf_i+0x19c>
 8008856:	2958      	cmp	r1, #88	; 0x58
 8008858:	f000 8083 	beq.w	8008962 <_printf_i+0x136>
 800885c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008860:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008864:	e032      	b.n	80088cc <_printf_i+0xa0>
 8008866:	2964      	cmp	r1, #100	; 0x64
 8008868:	d001      	beq.n	800886e <_printf_i+0x42>
 800886a:	2969      	cmp	r1, #105	; 0x69
 800886c:	d1f6      	bne.n	800885c <_printf_i+0x30>
 800886e:	6820      	ldr	r0, [r4, #0]
 8008870:	6813      	ldr	r3, [r2, #0]
 8008872:	0605      	lsls	r5, r0, #24
 8008874:	f103 0104 	add.w	r1, r3, #4
 8008878:	d52a      	bpl.n	80088d0 <_printf_i+0xa4>
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	da03      	bge.n	800888a <_printf_i+0x5e>
 8008882:	222d      	movs	r2, #45	; 0x2d
 8008884:	425b      	negs	r3, r3
 8008886:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800888a:	486f      	ldr	r0, [pc, #444]	; (8008a48 <_printf_i+0x21c>)
 800888c:	220a      	movs	r2, #10
 800888e:	e039      	b.n	8008904 <_printf_i+0xd8>
 8008890:	2973      	cmp	r1, #115	; 0x73
 8008892:	f000 809d 	beq.w	80089d0 <_printf_i+0x1a4>
 8008896:	d808      	bhi.n	80088aa <_printf_i+0x7e>
 8008898:	296f      	cmp	r1, #111	; 0x6f
 800889a:	d020      	beq.n	80088de <_printf_i+0xb2>
 800889c:	2970      	cmp	r1, #112	; 0x70
 800889e:	d1dd      	bne.n	800885c <_printf_i+0x30>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	f043 0320 	orr.w	r3, r3, #32
 80088a6:	6023      	str	r3, [r4, #0]
 80088a8:	e003      	b.n	80088b2 <_printf_i+0x86>
 80088aa:	2975      	cmp	r1, #117	; 0x75
 80088ac:	d017      	beq.n	80088de <_printf_i+0xb2>
 80088ae:	2978      	cmp	r1, #120	; 0x78
 80088b0:	d1d4      	bne.n	800885c <_printf_i+0x30>
 80088b2:	2378      	movs	r3, #120	; 0x78
 80088b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088b8:	4864      	ldr	r0, [pc, #400]	; (8008a4c <_printf_i+0x220>)
 80088ba:	e055      	b.n	8008968 <_printf_i+0x13c>
 80088bc:	6813      	ldr	r3, [r2, #0]
 80088be:	1d19      	adds	r1, r3, #4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6011      	str	r1, [r2, #0]
 80088c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088cc:	2301      	movs	r3, #1
 80088ce:	e08c      	b.n	80089ea <_printf_i+0x1be>
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6011      	str	r1, [r2, #0]
 80088d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088d8:	bf18      	it	ne
 80088da:	b21b      	sxthne	r3, r3
 80088dc:	e7cf      	b.n	800887e <_printf_i+0x52>
 80088de:	6813      	ldr	r3, [r2, #0]
 80088e0:	6825      	ldr	r5, [r4, #0]
 80088e2:	1d18      	adds	r0, r3, #4
 80088e4:	6010      	str	r0, [r2, #0]
 80088e6:	0628      	lsls	r0, r5, #24
 80088e8:	d501      	bpl.n	80088ee <_printf_i+0xc2>
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	e002      	b.n	80088f4 <_printf_i+0xc8>
 80088ee:	0668      	lsls	r0, r5, #25
 80088f0:	d5fb      	bpl.n	80088ea <_printf_i+0xbe>
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	4854      	ldr	r0, [pc, #336]	; (8008a48 <_printf_i+0x21c>)
 80088f6:	296f      	cmp	r1, #111	; 0x6f
 80088f8:	bf14      	ite	ne
 80088fa:	220a      	movne	r2, #10
 80088fc:	2208      	moveq	r2, #8
 80088fe:	2100      	movs	r1, #0
 8008900:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008904:	6865      	ldr	r5, [r4, #4]
 8008906:	60a5      	str	r5, [r4, #8]
 8008908:	2d00      	cmp	r5, #0
 800890a:	f2c0 8095 	blt.w	8008a38 <_printf_i+0x20c>
 800890e:	6821      	ldr	r1, [r4, #0]
 8008910:	f021 0104 	bic.w	r1, r1, #4
 8008914:	6021      	str	r1, [r4, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d13d      	bne.n	8008996 <_printf_i+0x16a>
 800891a:	2d00      	cmp	r5, #0
 800891c:	f040 808e 	bne.w	8008a3c <_printf_i+0x210>
 8008920:	4665      	mov	r5, ip
 8008922:	2a08      	cmp	r2, #8
 8008924:	d10b      	bne.n	800893e <_printf_i+0x112>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	07db      	lsls	r3, r3, #31
 800892a:	d508      	bpl.n	800893e <_printf_i+0x112>
 800892c:	6923      	ldr	r3, [r4, #16]
 800892e:	6862      	ldr	r2, [r4, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	bfde      	ittt	le
 8008934:	2330      	movle	r3, #48	; 0x30
 8008936:	f805 3c01 	strble.w	r3, [r5, #-1]
 800893a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800893e:	ebac 0305 	sub.w	r3, ip, r5
 8008942:	6123      	str	r3, [r4, #16]
 8008944:	f8cd 8000 	str.w	r8, [sp]
 8008948:	463b      	mov	r3, r7
 800894a:	aa03      	add	r2, sp, #12
 800894c:	4621      	mov	r1, r4
 800894e:	4630      	mov	r0, r6
 8008950:	f7ff fef6 	bl	8008740 <_printf_common>
 8008954:	3001      	adds	r0, #1
 8008956:	d14d      	bne.n	80089f4 <_printf_i+0x1c8>
 8008958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800895c:	b005      	add	sp, #20
 800895e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008962:	4839      	ldr	r0, [pc, #228]	; (8008a48 <_printf_i+0x21c>)
 8008964:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008968:	6813      	ldr	r3, [r2, #0]
 800896a:	6821      	ldr	r1, [r4, #0]
 800896c:	1d1d      	adds	r5, r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6015      	str	r5, [r2, #0]
 8008972:	060a      	lsls	r2, r1, #24
 8008974:	d50b      	bpl.n	800898e <_printf_i+0x162>
 8008976:	07ca      	lsls	r2, r1, #31
 8008978:	bf44      	itt	mi
 800897a:	f041 0120 	orrmi.w	r1, r1, #32
 800897e:	6021      	strmi	r1, [r4, #0]
 8008980:	b91b      	cbnz	r3, 800898a <_printf_i+0x15e>
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	f022 0220 	bic.w	r2, r2, #32
 8008988:	6022      	str	r2, [r4, #0]
 800898a:	2210      	movs	r2, #16
 800898c:	e7b7      	b.n	80088fe <_printf_i+0xd2>
 800898e:	064d      	lsls	r5, r1, #25
 8008990:	bf48      	it	mi
 8008992:	b29b      	uxthmi	r3, r3
 8008994:	e7ef      	b.n	8008976 <_printf_i+0x14a>
 8008996:	4665      	mov	r5, ip
 8008998:	fbb3 f1f2 	udiv	r1, r3, r2
 800899c:	fb02 3311 	mls	r3, r2, r1, r3
 80089a0:	5cc3      	ldrb	r3, [r0, r3]
 80089a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80089a6:	460b      	mov	r3, r1
 80089a8:	2900      	cmp	r1, #0
 80089aa:	d1f5      	bne.n	8008998 <_printf_i+0x16c>
 80089ac:	e7b9      	b.n	8008922 <_printf_i+0xf6>
 80089ae:	6813      	ldr	r3, [r2, #0]
 80089b0:	6825      	ldr	r5, [r4, #0]
 80089b2:	6961      	ldr	r1, [r4, #20]
 80089b4:	1d18      	adds	r0, r3, #4
 80089b6:	6010      	str	r0, [r2, #0]
 80089b8:	0628      	lsls	r0, r5, #24
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	d501      	bpl.n	80089c2 <_printf_i+0x196>
 80089be:	6019      	str	r1, [r3, #0]
 80089c0:	e002      	b.n	80089c8 <_printf_i+0x19c>
 80089c2:	066a      	lsls	r2, r5, #25
 80089c4:	d5fb      	bpl.n	80089be <_printf_i+0x192>
 80089c6:	8019      	strh	r1, [r3, #0]
 80089c8:	2300      	movs	r3, #0
 80089ca:	6123      	str	r3, [r4, #16]
 80089cc:	4665      	mov	r5, ip
 80089ce:	e7b9      	b.n	8008944 <_printf_i+0x118>
 80089d0:	6813      	ldr	r3, [r2, #0]
 80089d2:	1d19      	adds	r1, r3, #4
 80089d4:	6011      	str	r1, [r2, #0]
 80089d6:	681d      	ldr	r5, [r3, #0]
 80089d8:	6862      	ldr	r2, [r4, #4]
 80089da:	2100      	movs	r1, #0
 80089dc:	4628      	mov	r0, r5
 80089de:	f7f7 fc2f 	bl	8000240 <memchr>
 80089e2:	b108      	cbz	r0, 80089e8 <_printf_i+0x1bc>
 80089e4:	1b40      	subs	r0, r0, r5
 80089e6:	6060      	str	r0, [r4, #4]
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	2300      	movs	r3, #0
 80089ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f2:	e7a7      	b.n	8008944 <_printf_i+0x118>
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	462a      	mov	r2, r5
 80089f8:	4639      	mov	r1, r7
 80089fa:	4630      	mov	r0, r6
 80089fc:	47c0      	blx	r8
 80089fe:	3001      	adds	r0, #1
 8008a00:	d0aa      	beq.n	8008958 <_printf_i+0x12c>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	079b      	lsls	r3, r3, #30
 8008a06:	d413      	bmi.n	8008a30 <_printf_i+0x204>
 8008a08:	68e0      	ldr	r0, [r4, #12]
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	4298      	cmp	r0, r3
 8008a0e:	bfb8      	it	lt
 8008a10:	4618      	movlt	r0, r3
 8008a12:	e7a3      	b.n	800895c <_printf_i+0x130>
 8008a14:	2301      	movs	r3, #1
 8008a16:	464a      	mov	r2, r9
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	47c0      	blx	r8
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d09a      	beq.n	8008958 <_printf_i+0x12c>
 8008a22:	3501      	adds	r5, #1
 8008a24:	68e3      	ldr	r3, [r4, #12]
 8008a26:	9a03      	ldr	r2, [sp, #12]
 8008a28:	1a9b      	subs	r3, r3, r2
 8008a2a:	42ab      	cmp	r3, r5
 8008a2c:	dcf2      	bgt.n	8008a14 <_printf_i+0x1e8>
 8008a2e:	e7eb      	b.n	8008a08 <_printf_i+0x1dc>
 8008a30:	2500      	movs	r5, #0
 8008a32:	f104 0919 	add.w	r9, r4, #25
 8008a36:	e7f5      	b.n	8008a24 <_printf_i+0x1f8>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1ac      	bne.n	8008996 <_printf_i+0x16a>
 8008a3c:	7803      	ldrb	r3, [r0, #0]
 8008a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a46:	e76c      	b.n	8008922 <_printf_i+0xf6>
 8008a48:	08009a5d 	.word	0x08009a5d
 8008a4c:	08009a6e 	.word	0x08009a6e

08008a50 <_putc_r>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	460d      	mov	r5, r1
 8008a54:	4614      	mov	r4, r2
 8008a56:	4606      	mov	r6, r0
 8008a58:	b118      	cbz	r0, 8008a62 <_putc_r+0x12>
 8008a5a:	6983      	ldr	r3, [r0, #24]
 8008a5c:	b90b      	cbnz	r3, 8008a62 <_putc_r+0x12>
 8008a5e:	f7ff fb91 	bl	8008184 <__sinit>
 8008a62:	4b13      	ldr	r3, [pc, #76]	; (8008ab0 <_putc_r+0x60>)
 8008a64:	429c      	cmp	r4, r3
 8008a66:	d112      	bne.n	8008a8e <_putc_r+0x3e>
 8008a68:	6874      	ldr	r4, [r6, #4]
 8008a6a:	68a3      	ldr	r3, [r4, #8]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	60a3      	str	r3, [r4, #8]
 8008a72:	da16      	bge.n	8008aa2 <_putc_r+0x52>
 8008a74:	69a2      	ldr	r2, [r4, #24]
 8008a76:	4293      	cmp	r3, r2
 8008a78:	db02      	blt.n	8008a80 <_putc_r+0x30>
 8008a7a:	b2eb      	uxtb	r3, r5
 8008a7c:	2b0a      	cmp	r3, #10
 8008a7e:	d110      	bne.n	8008aa2 <_putc_r+0x52>
 8008a80:	4622      	mov	r2, r4
 8008a82:	4629      	mov	r1, r5
 8008a84:	4630      	mov	r0, r6
 8008a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a8a:	f7ff b9cb 	b.w	8007e24 <__swbuf_r>
 8008a8e:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <_putc_r+0x64>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	d101      	bne.n	8008a98 <_putc_r+0x48>
 8008a94:	68b4      	ldr	r4, [r6, #8]
 8008a96:	e7e8      	b.n	8008a6a <_putc_r+0x1a>
 8008a98:	4b07      	ldr	r3, [pc, #28]	; (8008ab8 <_putc_r+0x68>)
 8008a9a:	429c      	cmp	r4, r3
 8008a9c:	bf08      	it	eq
 8008a9e:	68f4      	ldreq	r4, [r6, #12]
 8008aa0:	e7e3      	b.n	8008a6a <_putc_r+0x1a>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	6022      	str	r2, [r4, #0]
 8008aa8:	701d      	strb	r5, [r3, #0]
 8008aaa:	b2e8      	uxtb	r0, r5
 8008aac:	bd70      	pop	{r4, r5, r6, pc}
 8008aae:	bf00      	nop
 8008ab0:	08009a0c 	.word	0x08009a0c
 8008ab4:	08009a2c 	.word	0x08009a2c
 8008ab8:	080099ec 	.word	0x080099ec

08008abc <_sbrk_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4c06      	ldr	r4, [pc, #24]	; (8008ad8 <_sbrk_r+0x1c>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	f7fe f956 	bl	8006d78 <_sbrk>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_sbrk_r+0x1a>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_sbrk_r+0x1a>
 8008ad4:	602b      	str	r3, [r5, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	20000b4c 	.word	0x20000b4c

08008adc <__sread>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	460c      	mov	r4, r1
 8008ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae4:	f000 f896 	bl	8008c14 <_read_r>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	bfab      	itete	ge
 8008aec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aee:	89a3      	ldrhlt	r3, [r4, #12]
 8008af0:	181b      	addge	r3, r3, r0
 8008af2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008af6:	bfac      	ite	ge
 8008af8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008afa:	81a3      	strhlt	r3, [r4, #12]
 8008afc:	bd10      	pop	{r4, pc}

08008afe <__swrite>:
 8008afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b02:	461f      	mov	r7, r3
 8008b04:	898b      	ldrh	r3, [r1, #12]
 8008b06:	05db      	lsls	r3, r3, #23
 8008b08:	4605      	mov	r5, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	4616      	mov	r6, r2
 8008b0e:	d505      	bpl.n	8008b1c <__swrite+0x1e>
 8008b10:	2302      	movs	r3, #2
 8008b12:	2200      	movs	r2, #0
 8008b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b18:	f000 f868 	bl	8008bec <_lseek_r>
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	4632      	mov	r2, r6
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b32:	f000 b817 	b.w	8008b64 <_write_r>

08008b36 <__sseek>:
 8008b36:	b510      	push	{r4, lr}
 8008b38:	460c      	mov	r4, r1
 8008b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3e:	f000 f855 	bl	8008bec <_lseek_r>
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	bf15      	itete	ne
 8008b48:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b52:	81a3      	strheq	r3, [r4, #12]
 8008b54:	bf18      	it	ne
 8008b56:	81a3      	strhne	r3, [r4, #12]
 8008b58:	bd10      	pop	{r4, pc}

08008b5a <__sclose>:
 8008b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5e:	f000 b813 	b.w	8008b88 <_close_r>
	...

08008b64 <_write_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4c07      	ldr	r4, [pc, #28]	; (8008b84 <_write_r+0x20>)
 8008b68:	4605      	mov	r5, r0
 8008b6a:	4608      	mov	r0, r1
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	2200      	movs	r2, #0
 8008b70:	6022      	str	r2, [r4, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	f7fe f8af 	bl	8006cd6 <_write>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_write_r+0x1e>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_write_r+0x1e>
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	20000b4c 	.word	0x20000b4c

08008b88 <_close_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4c06      	ldr	r4, [pc, #24]	; (8008ba4 <_close_r+0x1c>)
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	4605      	mov	r5, r0
 8008b90:	4608      	mov	r0, r1
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	f7fe f8bb 	bl	8006d0e <_close>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_close_r+0x1a>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_close_r+0x1a>
 8008ba0:	602b      	str	r3, [r5, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20000b4c 	.word	0x20000b4c

08008ba8 <_fstat_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	4c07      	ldr	r4, [pc, #28]	; (8008bc8 <_fstat_r+0x20>)
 8008bac:	2300      	movs	r3, #0
 8008bae:	4605      	mov	r5, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	f7fe f8b6 	bl	8006d26 <_fstat>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	d102      	bne.n	8008bc4 <_fstat_r+0x1c>
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	b103      	cbz	r3, 8008bc4 <_fstat_r+0x1c>
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	bd38      	pop	{r3, r4, r5, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000b4c 	.word	0x20000b4c

08008bcc <_isatty_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4c06      	ldr	r4, [pc, #24]	; (8008be8 <_isatty_r+0x1c>)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	f7fe f8b5 	bl	8006d46 <_isatty>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_isatty_r+0x1a>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_isatty_r+0x1a>
 8008be4:	602b      	str	r3, [r5, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	20000b4c 	.word	0x20000b4c

08008bec <_lseek_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4c07      	ldr	r4, [pc, #28]	; (8008c0c <_lseek_r+0x20>)
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	4608      	mov	r0, r1
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	6022      	str	r2, [r4, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f7fe f8ae 	bl	8006d5c <_lseek>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_lseek_r+0x1e>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_lseek_r+0x1e>
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	20000b4c 	.word	0x20000b4c

08008c10 <__malloc_lock>:
 8008c10:	4770      	bx	lr

08008c12 <__malloc_unlock>:
 8008c12:	4770      	bx	lr

08008c14 <_read_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4c07      	ldr	r4, [pc, #28]	; (8008c34 <_read_r+0x20>)
 8008c18:	4605      	mov	r5, r0
 8008c1a:	4608      	mov	r0, r1
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	2200      	movs	r2, #0
 8008c20:	6022      	str	r2, [r4, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	f7fe f83a 	bl	8006c9c <_read>
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d102      	bne.n	8008c32 <_read_r+0x1e>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	b103      	cbz	r3, 8008c32 <_read_r+0x1e>
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	20000b4c 	.word	0x20000b4c

08008c38 <pow>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	ed2d 8b0a 	vpush	{d8-d12}
 8008c3e:	eeb0 9b40 	vmov.f64	d9, d0
 8008c42:	eeb0 8b41 	vmov.f64	d8, d1
 8008c46:	4c8c      	ldr	r4, [pc, #560]	; (8008e78 <pow+0x240>)
 8008c48:	b08a      	sub	sp, #40	; 0x28
 8008c4a:	f000 f925 	bl	8008e98 <__ieee754_pow>
 8008c4e:	f994 3000 	ldrsb.w	r3, [r4]
 8008c52:	eeb0 ab40 	vmov.f64	d10, d0
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	4626      	mov	r6, r4
 8008c5a:	d04b      	beq.n	8008cf4 <pow+0xbc>
 8008c5c:	eeb4 8b48 	vcmp.f64	d8, d8
 8008c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c64:	d646      	bvs.n	8008cf4 <pow+0xbc>
 8008c66:	eeb4 9b49 	vcmp.f64	d9, d9
 8008c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6e:	d719      	bvc.n	8008ca4 <pow+0x6c>
 8008c70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c78:	d13c      	bne.n	8008cf4 <pow+0xbc>
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	9200      	str	r2, [sp, #0]
 8008c7e:	497f      	ldr	r1, [pc, #508]	; (8008e7c <pow+0x244>)
 8008c80:	4a7f      	ldr	r2, [pc, #508]	; (8008e80 <pow+0x248>)
 8008c82:	9201      	str	r2, [sp, #4]
 8008c84:	2000      	movs	r0, #0
 8008c86:	2200      	movs	r2, #0
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	9208      	str	r2, [sp, #32]
 8008c8c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008c90:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008c94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c98:	d02a      	beq.n	8008cf0 <pow+0xb8>
 8008c9a:	4668      	mov	r0, sp
 8008c9c:	f000 fc96 	bl	80095cc <matherr>
 8008ca0:	bb00      	cbnz	r0, 8008ce4 <pow+0xac>
 8008ca2:	e04e      	b.n	8008d42 <pow+0x10a>
 8008ca4:	ed9f bb72 	vldr	d11, [pc, #456]	; 8008e70 <pow+0x238>
 8008ca8:	eeb4 9b4b 	vcmp.f64	d9, d11
 8008cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb0:	eeb0 cb4b 	vmov.f64	d12, d11
 8008cb4:	d14a      	bne.n	8008d4c <pow+0x114>
 8008cb6:	eeb4 8b4b 	vcmp.f64	d8, d11
 8008cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cbe:	d11f      	bne.n	8008d00 <pow+0xc8>
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	9200      	str	r2, [sp, #0]
 8008cc4:	4a6e      	ldr	r2, [pc, #440]	; (8008e80 <pow+0x248>)
 8008cc6:	9201      	str	r2, [sp, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	9208      	str	r2, [sp, #32]
 8008ccc:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008cd0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008cd4:	ed8d bb06 	vstr	d11, [sp, #24]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0de      	beq.n	8008c9a <pow+0x62>
 8008cdc:	4b67      	ldr	r3, [pc, #412]	; (8008e7c <pow+0x244>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ce4:	9b08      	ldr	r3, [sp, #32]
 8008ce6:	b11b      	cbz	r3, 8008cf0 <pow+0xb8>
 8008ce8:	f7fe ffa6 	bl	8007c38 <__errno>
 8008cec:	9b08      	ldr	r3, [sp, #32]
 8008cee:	6003      	str	r3, [r0, #0]
 8008cf0:	ed9d ab06 	vldr	d10, [sp, #24]
 8008cf4:	eeb0 0b4a 	vmov.f64	d0, d10
 8008cf8:	b00a      	add	sp, #40	; 0x28
 8008cfa:	ecbd 8b0a 	vpop	{d8-d12}
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	eeb0 0b48 	vmov.f64	d0, d8
 8008d04:	f000 fc5a 	bl	80095bc <finite>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d0f3      	beq.n	8008cf4 <pow+0xbc>
 8008d0c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8008d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d14:	d5ee      	bpl.n	8008cf4 <pow+0xbc>
 8008d16:	2301      	movs	r3, #1
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	4b59      	ldr	r3, [pc, #356]	; (8008e80 <pow+0x248>)
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9308      	str	r3, [sp, #32]
 8008d22:	f994 3000 	ldrsb.w	r3, [r4]
 8008d26:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008d2a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008d2e:	b913      	cbnz	r3, 8008d36 <pow+0xfe>
 8008d30:	ed8d bb06 	vstr	d11, [sp, #24]
 8008d34:	e7b1      	b.n	8008c9a <pow+0x62>
 8008d36:	4953      	ldr	r1, [pc, #332]	; (8008e84 <pow+0x24c>)
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d1ab      	bne.n	8008c9a <pow+0x62>
 8008d42:	f7fe ff79 	bl	8007c38 <__errno>
 8008d46:	2321      	movs	r3, #33	; 0x21
 8008d48:	6003      	str	r3, [r0, #0]
 8008d4a:	e7cb      	b.n	8008ce4 <pow+0xac>
 8008d4c:	f000 fc36 	bl	80095bc <finite>
 8008d50:	4605      	mov	r5, r0
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d164      	bne.n	8008e20 <pow+0x1e8>
 8008d56:	eeb0 0b49 	vmov.f64	d0, d9
 8008d5a:	f000 fc2f 	bl	80095bc <finite>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d05e      	beq.n	8008e20 <pow+0x1e8>
 8008d62:	eeb0 0b48 	vmov.f64	d0, d8
 8008d66:	f000 fc29 	bl	80095bc <finite>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d058      	beq.n	8008e20 <pow+0x1e8>
 8008d6e:	eeb4 ab4a 	vcmp.f64	d10, d10
 8008d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d76:	f994 3000 	ldrsb.w	r3, [r4]
 8008d7a:	4a41      	ldr	r2, [pc, #260]	; (8008e80 <pow+0x248>)
 8008d7c:	d70e      	bvc.n	8008d9c <pow+0x164>
 8008d7e:	2101      	movs	r1, #1
 8008d80:	e9cd 1200 	strd	r1, r2, [sp]
 8008d84:	9508      	str	r5, [sp, #32]
 8008d86:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008d8a:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0ce      	beq.n	8008d30 <pow+0xf8>
 8008d92:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8008d96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d9a:	e7d0      	b.n	8008d3e <pow+0x106>
 8008d9c:	2103      	movs	r1, #3
 8008d9e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008da2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008da6:	ee28 8b07 	vmul.f64	d8, d8, d7
 8008daa:	e9cd 1200 	strd	r1, r2, [sp]
 8008dae:	9508      	str	r5, [sp, #32]
 8008db0:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008db4:	b9fb      	cbnz	r3, 8008df6 <pow+0x1be>
 8008db6:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8008dba:	4b33      	ldr	r3, [pc, #204]	; (8008e88 <pow+0x250>)
 8008dbc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008dc8:	d54b      	bpl.n	8008e62 <pow+0x22a>
 8008dca:	eeb0 0b48 	vmov.f64	d0, d8
 8008dce:	f000 fc07 	bl	80095e0 <rint>
 8008dd2:	eeb4 0b48 	vcmp.f64	d0, d8
 8008dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dda:	d004      	beq.n	8008de6 <pow+0x1ae>
 8008ddc:	4b2b      	ldr	r3, [pc, #172]	; (8008e8c <pow+0x254>)
 8008dde:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008de2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008de6:	f996 3000 	ldrsb.w	r3, [r6]
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d139      	bne.n	8008e62 <pow+0x22a>
 8008dee:	f7fe ff23 	bl	8007c38 <__errno>
 8008df2:	2322      	movs	r3, #34	; 0x22
 8008df4:	e7a8      	b.n	8008d48 <pow+0x110>
 8008df6:	4b26      	ldr	r3, [pc, #152]	; (8008e90 <pow+0x258>)
 8008df8:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e06:	d5ee      	bpl.n	8008de6 <pow+0x1ae>
 8008e08:	eeb0 0b48 	vmov.f64	d0, d8
 8008e0c:	f000 fbe8 	bl	80095e0 <rint>
 8008e10:	eeb4 0b48 	vcmp.f64	d0, d8
 8008e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e18:	d0e5      	beq.n	8008de6 <pow+0x1ae>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <pow+0x24c>)
 8008e1e:	e7e0      	b.n	8008de2 <pow+0x1aa>
 8008e20:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8008e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e28:	f47f af64 	bne.w	8008cf4 <pow+0xbc>
 8008e2c:	eeb0 0b49 	vmov.f64	d0, d9
 8008e30:	f000 fbc4 	bl	80095bc <finite>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	f43f af5d 	beq.w	8008cf4 <pow+0xbc>
 8008e3a:	eeb0 0b48 	vmov.f64	d0, d8
 8008e3e:	f000 fbbd 	bl	80095bc <finite>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	f43f af56 	beq.w	8008cf4 <pow+0xbc>
 8008e48:	2304      	movs	r3, #4
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <pow+0x248>)
 8008e4e:	9301      	str	r3, [sp, #4]
 8008e50:	2300      	movs	r3, #0
 8008e52:	9308      	str	r3, [sp, #32]
 8008e54:	ed8d 9b02 	vstr	d9, [sp, #8]
 8008e58:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008e5c:	ed8d cb06 	vstr	d12, [sp, #24]
 8008e60:	e7c1      	b.n	8008de6 <pow+0x1ae>
 8008e62:	4668      	mov	r0, sp
 8008e64:	f000 fbb2 	bl	80095cc <matherr>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f47f af3b 	bne.w	8008ce4 <pow+0xac>
 8008e6e:	e7be      	b.n	8008dee <pow+0x1b6>
	...
 8008e78:	20000840 	.word	0x20000840
 8008e7c:	3ff00000 	.word	0x3ff00000
 8008e80:	08009a7f 	.word	0x08009a7f
 8008e84:	fff00000 	.word	0xfff00000
 8008e88:	47efffff 	.word	0x47efffff
 8008e8c:	c7efffff 	.word	0xc7efffff
 8008e90:	7ff00000 	.word	0x7ff00000
 8008e94:	00000000 	.word	0x00000000

08008e98 <__ieee754_pow>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	ec57 6b11 	vmov	r6, r7, d1
 8008ea0:	ed2d 8b02 	vpush	{d8}
 8008ea4:	eeb0 8b40 	vmov.f64	d8, d0
 8008ea8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008eac:	ea58 0306 	orrs.w	r3, r8, r6
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	46b9      	mov	r9, r7
 8008eb4:	ee11 2a10 	vmov	r2, s2
 8008eb8:	f000 8306 	beq.w	80094c8 <__ieee754_pow+0x630>
 8008ebc:	ee18 aa90 	vmov	sl, s17
 8008ec0:	4bb9      	ldr	r3, [pc, #740]	; (80091a8 <__ieee754_pow+0x310>)
 8008ec2:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8008ec6:	429c      	cmp	r4, r3
 8008ec8:	ee10 ba10 	vmov	fp, s0
 8008ecc:	dc0b      	bgt.n	8008ee6 <__ieee754_pow+0x4e>
 8008ece:	d105      	bne.n	8008edc <__ieee754_pow+0x44>
 8008ed0:	f1bb 0f00 	cmp.w	fp, #0
 8008ed4:	d107      	bne.n	8008ee6 <__ieee754_pow+0x4e>
 8008ed6:	45a0      	cmp	r8, r4
 8008ed8:	dc0d      	bgt.n	8008ef6 <__ieee754_pow+0x5e>
 8008eda:	e001      	b.n	8008ee0 <__ieee754_pow+0x48>
 8008edc:	4598      	cmp	r8, r3
 8008ede:	dc02      	bgt.n	8008ee6 <__ieee754_pow+0x4e>
 8008ee0:	4598      	cmp	r8, r3
 8008ee2:	d110      	bne.n	8008f06 <__ieee754_pow+0x6e>
 8008ee4:	b17a      	cbz	r2, 8008f06 <__ieee754_pow+0x6e>
 8008ee6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008eea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008eee:	ea54 030b 	orrs.w	r3, r4, fp
 8008ef2:	f000 82e9 	beq.w	80094c8 <__ieee754_pow+0x630>
 8008ef6:	48ad      	ldr	r0, [pc, #692]	; (80091ac <__ieee754_pow+0x314>)
 8008ef8:	b005      	add	sp, #20
 8008efa:	ecbd 8b02 	vpop	{d8}
 8008efe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f02:	f000 bb65 	b.w	80095d0 <nan>
 8008f06:	f1ba 0f00 	cmp.w	sl, #0
 8008f0a:	da4e      	bge.n	8008faa <__ieee754_pow+0x112>
 8008f0c:	4ba8      	ldr	r3, [pc, #672]	; (80091b0 <__ieee754_pow+0x318>)
 8008f0e:	4598      	cmp	r8, r3
 8008f10:	dc49      	bgt.n	8008fa6 <__ieee754_pow+0x10e>
 8008f12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008f16:	4598      	cmp	r8, r3
 8008f18:	dd47      	ble.n	8008faa <__ieee754_pow+0x112>
 8008f1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008f1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f22:	2b14      	cmp	r3, #20
 8008f24:	dd24      	ble.n	8008f70 <__ieee754_pow+0xd8>
 8008f26:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008f2a:	fa22 f503 	lsr.w	r5, r2, r3
 8008f2e:	fa05 f303 	lsl.w	r3, r5, r3
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d139      	bne.n	8008faa <__ieee754_pow+0x112>
 8008f36:	f005 0501 	and.w	r5, r5, #1
 8008f3a:	f1c5 0502 	rsb	r5, r5, #2
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	d15a      	bne.n	8008ff8 <__ieee754_pow+0x160>
 8008f42:	4b99      	ldr	r3, [pc, #612]	; (80091a8 <__ieee754_pow+0x310>)
 8008f44:	4598      	cmp	r8, r3
 8008f46:	d122      	bne.n	8008f8e <__ieee754_pow+0xf6>
 8008f48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008f4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008f50:	ea53 030b 	orrs.w	r3, r3, fp
 8008f54:	f000 82b8 	beq.w	80094c8 <__ieee754_pow+0x630>
 8008f58:	4b96      	ldr	r3, [pc, #600]	; (80091b4 <__ieee754_pow+0x31c>)
 8008f5a:	429c      	cmp	r4, r3
 8008f5c:	dd27      	ble.n	8008fae <__ieee754_pow+0x116>
 8008f5e:	f1b9 0f00 	cmp.w	r9, #0
 8008f62:	f280 82b4 	bge.w	80094ce <__ieee754_pow+0x636>
 8008f66:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8009178 <__ieee754_pow+0x2e0>
 8008f6a:	ed8d 7b00 	vstr	d7, [sp]
 8008f6e:	e026      	b.n	8008fbe <__ieee754_pow+0x126>
 8008f70:	2a00      	cmp	r2, #0
 8008f72:	d140      	bne.n	8008ff6 <__ieee754_pow+0x15e>
 8008f74:	f1c3 0314 	rsb	r3, r3, #20
 8008f78:	fa48 f503 	asr.w	r5, r8, r3
 8008f7c:	fa05 f303 	lsl.w	r3, r5, r3
 8008f80:	4543      	cmp	r3, r8
 8008f82:	f040 82aa 	bne.w	80094da <__ieee754_pow+0x642>
 8008f86:	f005 0501 	and.w	r5, r5, #1
 8008f8a:	f1c5 0502 	rsb	r5, r5, #2
 8008f8e:	4b8a      	ldr	r3, [pc, #552]	; (80091b8 <__ieee754_pow+0x320>)
 8008f90:	4598      	cmp	r8, r3
 8008f92:	d11b      	bne.n	8008fcc <__ieee754_pow+0x134>
 8008f94:	f1b9 0f00 	cmp.w	r9, #0
 8008f98:	f280 829c 	bge.w	80094d4 <__ieee754_pow+0x63c>
 8008f9c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008fa0:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8008fa4:	e7e1      	b.n	8008f6a <__ieee754_pow+0xd2>
 8008fa6:	2502      	movs	r5, #2
 8008fa8:	e7c9      	b.n	8008f3e <__ieee754_pow+0xa6>
 8008faa:	2500      	movs	r5, #0
 8008fac:	e7c7      	b.n	8008f3e <__ieee754_pow+0xa6>
 8008fae:	f1b9 0f00 	cmp.w	r9, #0
 8008fb2:	dad8      	bge.n	8008f66 <__ieee754_pow+0xce>
 8008fb4:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8008fb8:	4633      	mov	r3, r6
 8008fba:	e9cd 3400 	strd	r3, r4, [sp]
 8008fbe:	ed9d 0b00 	vldr	d0, [sp]
 8008fc2:	b005      	add	sp, #20
 8008fc4:	ecbd 8b02 	vpop	{d8}
 8008fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fcc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008fd0:	d102      	bne.n	8008fd8 <__ieee754_pow+0x140>
 8008fd2:	ee28 7b08 	vmul.f64	d7, d8, d8
 8008fd6:	e7c8      	b.n	8008f6a <__ieee754_pow+0xd2>
 8008fd8:	4b78      	ldr	r3, [pc, #480]	; (80091bc <__ieee754_pow+0x324>)
 8008fda:	4599      	cmp	r9, r3
 8008fdc:	d10c      	bne.n	8008ff8 <__ieee754_pow+0x160>
 8008fde:	f1ba 0f00 	cmp.w	sl, #0
 8008fe2:	db09      	blt.n	8008ff8 <__ieee754_pow+0x160>
 8008fe4:	eeb0 0b48 	vmov.f64	d0, d8
 8008fe8:	b005      	add	sp, #20
 8008fea:	ecbd 8b02 	vpop	{d8}
 8008fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff2:	f000 bad7 	b.w	80095a4 <__ieee754_sqrt>
 8008ff6:	2500      	movs	r5, #0
 8008ff8:	eeb0 0b48 	vmov.f64	d0, d8
 8008ffc:	f000 fad5 	bl	80095aa <fabs>
 8009000:	ed8d 0b00 	vstr	d0, [sp]
 8009004:	f1bb 0f00 	cmp.w	fp, #0
 8009008:	d128      	bne.n	800905c <__ieee754_pow+0x1c4>
 800900a:	b124      	cbz	r4, 8009016 <__ieee754_pow+0x17e>
 800900c:	4b6a      	ldr	r3, [pc, #424]	; (80091b8 <__ieee754_pow+0x320>)
 800900e:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8009012:	429a      	cmp	r2, r3
 8009014:	d122      	bne.n	800905c <__ieee754_pow+0x1c4>
 8009016:	f1b9 0f00 	cmp.w	r9, #0
 800901a:	da07      	bge.n	800902c <__ieee754_pow+0x194>
 800901c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009020:	ed9d 6b00 	vldr	d6, [sp]
 8009024:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8009028:	ed8d 7b00 	vstr	d7, [sp]
 800902c:	f1ba 0f00 	cmp.w	sl, #0
 8009030:	dac5      	bge.n	8008fbe <__ieee754_pow+0x126>
 8009032:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009036:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800903a:	ea54 0305 	orrs.w	r3, r4, r5
 800903e:	d106      	bne.n	800904e <__ieee754_pow+0x1b6>
 8009040:	ed9d 7b00 	vldr	d7, [sp]
 8009044:	ee37 7b47 	vsub.f64	d7, d7, d7
 8009048:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800904c:	e78d      	b.n	8008f6a <__ieee754_pow+0xd2>
 800904e:	2d01      	cmp	r5, #1
 8009050:	d1b5      	bne.n	8008fbe <__ieee754_pow+0x126>
 8009052:	ed9d 7b00 	vldr	d7, [sp]
 8009056:	eeb1 7b47 	vneg.f64	d7, d7
 800905a:	e786      	b.n	8008f6a <__ieee754_pow+0xd2>
 800905c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8009060:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009064:	ea55 030a 	orrs.w	r3, r5, sl
 8009068:	d104      	bne.n	8009074 <__ieee754_pow+0x1dc>
 800906a:	ee38 8b48 	vsub.f64	d8, d8, d8
 800906e:	ee88 7b08 	vdiv.f64	d7, d8, d8
 8009072:	e77a      	b.n	8008f6a <__ieee754_pow+0xd2>
 8009074:	4b52      	ldr	r3, [pc, #328]	; (80091c0 <__ieee754_pow+0x328>)
 8009076:	4598      	cmp	r8, r3
 8009078:	f340 80a8 	ble.w	80091cc <__ieee754_pow+0x334>
 800907c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009080:	4598      	cmp	r8, r3
 8009082:	dd0b      	ble.n	800909c <__ieee754_pow+0x204>
 8009084:	4b4b      	ldr	r3, [pc, #300]	; (80091b4 <__ieee754_pow+0x31c>)
 8009086:	429c      	cmp	r4, r3
 8009088:	dc0e      	bgt.n	80090a8 <__ieee754_pow+0x210>
 800908a:	f1b9 0f00 	cmp.w	r9, #0
 800908e:	f6bf af6a 	bge.w	8008f66 <__ieee754_pow+0xce>
 8009092:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8009180 <__ieee754_pow+0x2e8>
 8009096:	ee27 7b07 	vmul.f64	d7, d7, d7
 800909a:	e766      	b.n	8008f6a <__ieee754_pow+0xd2>
 800909c:	4b49      	ldr	r3, [pc, #292]	; (80091c4 <__ieee754_pow+0x32c>)
 800909e:	429c      	cmp	r4, r3
 80090a0:	ddf3      	ble.n	800908a <__ieee754_pow+0x1f2>
 80090a2:	4b45      	ldr	r3, [pc, #276]	; (80091b8 <__ieee754_pow+0x320>)
 80090a4:	429c      	cmp	r4, r3
 80090a6:	dd03      	ble.n	80090b0 <__ieee754_pow+0x218>
 80090a8:	f1b9 0f00 	cmp.w	r9, #0
 80090ac:	dcf1      	bgt.n	8009092 <__ieee754_pow+0x1fa>
 80090ae:	e75a      	b.n	8008f66 <__ieee754_pow+0xce>
 80090b0:	ed9d 7b00 	vldr	d7, [sp]
 80090b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80090b8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8009188 <__ieee754_pow+0x2f0>
 80090bc:	ee37 6b46 	vsub.f64	d6, d7, d6
 80090c0:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 80090c4:	eeb1 3b46 	vneg.f64	d3, d6
 80090c8:	eea3 5b07 	vfma.f64	d5, d3, d7
 80090cc:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80090d0:	eea5 7b46 	vfms.f64	d7, d5, d6
 80090d4:	ee26 5b06 	vmul.f64	d5, d6, d6
 80090d8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80090dc:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8009190 <__ieee754_pow+0x2f8>
 80090e0:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80090e4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8009198 <__ieee754_pow+0x300>
 80090e8:	eea6 7b05 	vfma.f64	d7, d6, d5
 80090ec:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80091a0 <__ieee754_pow+0x308>
 80090f0:	eeb0 4b47 	vmov.f64	d4, d7
 80090f4:	eea6 4b05 	vfma.f64	d4, d6, d5
 80090f8:	ec53 2b14 	vmov	r2, r3, d4
 80090fc:	2200      	movs	r2, #0
 80090fe:	ec43 2b14 	vmov	d4, r2, r3
 8009102:	eeb0 6b44 	vmov.f64	d6, d4
 8009106:	eea3 6b05 	vfma.f64	d6, d3, d5
 800910a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800910e:	3d01      	subs	r5, #1
 8009110:	ea55 030a 	orrs.w	r3, r5, sl
 8009114:	f04f 0200 	mov.w	r2, #0
 8009118:	463b      	mov	r3, r7
 800911a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800911e:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8009122:	ec47 6b15 	vmov	d5, r6, r7
 8009126:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800912a:	ec47 6b13 	vmov	d3, r6, r7
 800912e:	ec43 2b16 	vmov	d6, r2, r3
 8009132:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009136:	ee35 5b46 	vsub.f64	d5, d5, d6
 800913a:	4b23      	ldr	r3, [pc, #140]	; (80091c8 <__ieee754_pow+0x330>)
 800913c:	eea5 7b04 	vfma.f64	d7, d5, d4
 8009140:	ee24 6b06 	vmul.f64	d6, d4, d6
 8009144:	ee37 5b06 	vadd.f64	d5, d7, d6
 8009148:	ee15 1a90 	vmov	r1, s11
 800914c:	4299      	cmp	r1, r3
 800914e:	ee15 2a10 	vmov	r2, s10
 8009152:	f340 819b 	ble.w	800948c <__ieee754_pow+0x5f4>
 8009156:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800915a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800915e:	4313      	orrs	r3, r2
 8009160:	f000 810a 	beq.w	8009378 <__ieee754_pow+0x4e0>
 8009164:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8009180 <__ieee754_pow+0x2e8>
 8009168:	ee28 8b07 	vmul.f64	d8, d8, d7
 800916c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009170:	e6fb      	b.n	8008f6a <__ieee754_pow+0xd2>
 8009172:	bf00      	nop
 8009174:	f3af 8000 	nop.w
	...
 8009180:	8800759c 	.word	0x8800759c
 8009184:	7e37e43c 	.word	0x7e37e43c
 8009188:	55555555 	.word	0x55555555
 800918c:	3fd55555 	.word	0x3fd55555
 8009190:	652b82fe 	.word	0x652b82fe
 8009194:	3ff71547 	.word	0x3ff71547
 8009198:	f85ddf44 	.word	0xf85ddf44
 800919c:	3e54ae0b 	.word	0x3e54ae0b
 80091a0:	60000000 	.word	0x60000000
 80091a4:	3ff71547 	.word	0x3ff71547
 80091a8:	7ff00000 	.word	0x7ff00000
 80091ac:	08009a51 	.word	0x08009a51
 80091b0:	433fffff 	.word	0x433fffff
 80091b4:	3fefffff 	.word	0x3fefffff
 80091b8:	3ff00000 	.word	0x3ff00000
 80091bc:	3fe00000 	.word	0x3fe00000
 80091c0:	41e00000 	.word	0x41e00000
 80091c4:	3feffffe 	.word	0x3feffffe
 80091c8:	408fffff 	.word	0x408fffff
 80091cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80091d0:	f280 80ce 	bge.w	8009370 <__ieee754_pow+0x4d8>
 80091d4:	ed9d 6b00 	vldr	d6, [sp]
 80091d8:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 80094e0 <__ieee754_pow+0x648>
 80091dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80091e0:	ed8d 7b00 	vstr	d7, [sp]
 80091e4:	9c01      	ldr	r4, [sp, #4]
 80091e6:	f06f 0334 	mvn.w	r3, #52	; 0x34
 80091ea:	1521      	asrs	r1, r4, #20
 80091ec:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80091f0:	4419      	add	r1, r3
 80091f2:	4be3      	ldr	r3, [pc, #908]	; (8009580 <__ieee754_pow+0x6e8>)
 80091f4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80091f8:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 80091fc:	429c      	cmp	r4, r3
 80091fe:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 8009202:	dd06      	ble.n	8009212 <__ieee754_pow+0x37a>
 8009204:	4bdf      	ldr	r3, [pc, #892]	; (8009584 <__ieee754_pow+0x6ec>)
 8009206:	429c      	cmp	r4, r3
 8009208:	f340 80b4 	ble.w	8009374 <__ieee754_pow+0x4dc>
 800920c:	3101      	adds	r1, #1
 800920e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009212:	2400      	movs	r4, #0
 8009214:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009218:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800921c:	4603      	mov	r3, r0
 800921e:	ec43 2b17 	vmov	d7, r2, r3
 8009222:	4bd9      	ldr	r3, [pc, #868]	; (8009588 <__ieee754_pow+0x6f0>)
 8009224:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8009228:	4463      	add	r3, ip
 800922a:	ed93 5b00 	vldr	d5, [r3]
 800922e:	1040      	asrs	r0, r0, #1
 8009230:	ee37 2b45 	vsub.f64	d2, d7, d5
 8009234:	ee35 6b07 	vadd.f64	d6, d5, d7
 8009238:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800923c:	ee22 6b01 	vmul.f64	d6, d2, d1
 8009240:	ed8d 6b00 	vstr	d6, [sp]
 8009244:	e9dd 8900 	ldrd	r8, r9, [sp]
 8009248:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800924c:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8009250:	f04f 0800 	mov.w	r8, #0
 8009254:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8009258:	2200      	movs	r2, #0
 800925a:	ec49 8b14 	vmov	d4, r8, r9
 800925e:	ec43 2b16 	vmov	d6, r2, r3
 8009262:	eeb1 3b44 	vneg.f64	d3, d4
 8009266:	eea3 2b06 	vfma.f64	d2, d3, d6
 800926a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800926e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009272:	eea3 2b07 	vfma.f64	d2, d3, d7
 8009276:	ed9d 7b00 	vldr	d7, [sp]
 800927a:	ee22 2b01 	vmul.f64	d2, d2, d1
 800927e:	ee27 5b07 	vmul.f64	d5, d7, d7
 8009282:	ee37 6b04 	vadd.f64	d6, d7, d4
 8009286:	ed9f 1b98 	vldr	d1, [pc, #608]	; 80094e8 <__ieee754_pow+0x650>
 800928a:	ee25 0b05 	vmul.f64	d0, d5, d5
 800928e:	ee26 6b02 	vmul.f64	d6, d6, d2
 8009292:	ed9f 7b97 	vldr	d7, [pc, #604]	; 80094f0 <__ieee754_pow+0x658>
 8009296:	eea5 7b01 	vfma.f64	d7, d5, d1
 800929a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 80094f8 <__ieee754_pow+0x660>
 800929e:	eea7 1b05 	vfma.f64	d1, d7, d5
 80092a2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8009500 <__ieee754_pow+0x668>
 80092a6:	eea1 7b05 	vfma.f64	d7, d1, d5
 80092aa:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8009508 <__ieee754_pow+0x670>
 80092ae:	eea7 1b05 	vfma.f64	d1, d7, d5
 80092b2:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8009510 <__ieee754_pow+0x678>
 80092b6:	eea1 7b05 	vfma.f64	d7, d1, d5
 80092ba:	eea0 6b07 	vfma.f64	d6, d0, d7
 80092be:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 80092c2:	eeb0 5b47 	vmov.f64	d5, d7
 80092c6:	eea4 5b04 	vfma.f64	d5, d4, d4
 80092ca:	ee35 5b06 	vadd.f64	d5, d5, d6
 80092ce:	ed8d 5b02 	vstr	d5, [sp, #8]
 80092d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80092d6:	ed9d 5b02 	vldr	d5, [sp, #8]
 80092da:	ee35 7b47 	vsub.f64	d7, d5, d7
 80092de:	eea3 7b04 	vfma.f64	d7, d3, d4
 80092e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80092e6:	ed9d 6b00 	vldr	d6, [sp]
 80092ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092ee:	eea2 7b05 	vfma.f64	d7, d2, d5
 80092f2:	eeb0 6b47 	vmov.f64	d6, d7
 80092f6:	eea4 6b05 	vfma.f64	d6, d4, d5
 80092fa:	ed8d 6b00 	vstr	d6, [sp]
 80092fe:	f8cd 8000 	str.w	r8, [sp]
 8009302:	ed9d 2b00 	vldr	d2, [sp]
 8009306:	eeb0 6b42 	vmov.f64	d6, d2
 800930a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800930e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009312:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8009518 <__ieee754_pow+0x680>
 8009316:	4b9d      	ldr	r3, [pc, #628]	; (800958c <__ieee754_pow+0x6f4>)
 8009318:	ee27 7b06 	vmul.f64	d7, d7, d6
 800931c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8009520 <__ieee754_pow+0x688>
 8009320:	4463      	add	r3, ip
 8009322:	eea2 7b06 	vfma.f64	d7, d2, d6
 8009326:	ed93 6b00 	vldr	d6, [r3]
 800932a:	4b99      	ldr	r3, [pc, #612]	; (8009590 <__ieee754_pow+0x6f8>)
 800932c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8009330:	449c      	add	ip, r3
 8009332:	ed9c 1b00 	vldr	d1, [ip]
 8009336:	eeb0 4b46 	vmov.f64	d4, d6
 800933a:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8009528 <__ieee754_pow+0x690>
 800933e:	ee07 1a90 	vmov	s15, r1
 8009342:	eea2 4b03 	vfma.f64	d4, d2, d3
 8009346:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800934a:	ee34 4b01 	vadd.f64	d4, d4, d1
 800934e:	ee34 5b07 	vadd.f64	d5, d4, d7
 8009352:	ed8d 5b00 	vstr	d5, [sp]
 8009356:	f8cd 8000 	str.w	r8, [sp]
 800935a:	ed9d 4b00 	vldr	d4, [sp]
 800935e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8009362:	ee37 7b41 	vsub.f64	d7, d7, d1
 8009366:	eea2 7b43 	vfms.f64	d7, d2, d3
 800936a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800936e:	e6ce      	b.n	800910e <__ieee754_pow+0x276>
 8009370:	2300      	movs	r3, #0
 8009372:	e73a      	b.n	80091ea <__ieee754_pow+0x352>
 8009374:	2401      	movs	r4, #1
 8009376:	e74d      	b.n	8009214 <__ieee754_pow+0x37c>
 8009378:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8009530 <__ieee754_pow+0x698>
 800937c:	ee35 5b46 	vsub.f64	d5, d5, d6
 8009380:	ee37 4b04 	vadd.f64	d4, d7, d4
 8009384:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8009388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800938c:	f73f aeea 	bgt.w	8009164 <__ieee754_pow+0x2cc>
 8009390:	4a80      	ldr	r2, [pc, #512]	; (8009594 <__ieee754_pow+0x6fc>)
 8009392:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009396:	4293      	cmp	r3, r2
 8009398:	f340 808e 	ble.w	80094b8 <__ieee754_pow+0x620>
 800939c:	151b      	asrs	r3, r3, #20
 800939e:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 80093a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093a6:	4103      	asrs	r3, r0
 80093a8:	440b      	add	r3, r1
 80093aa:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80093ae:	487a      	ldr	r0, [pc, #488]	; (8009598 <__ieee754_pow+0x700>)
 80093b0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80093b4:	4110      	asrs	r0, r2
 80093b6:	ea23 0500 	bic.w	r5, r3, r0
 80093ba:	f3c3 0013 	ubfx	r0, r3, #0, #20
 80093be:	2400      	movs	r4, #0
 80093c0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80093c4:	f1c2 0214 	rsb	r2, r2, #20
 80093c8:	ec45 4b15 	vmov	d5, r4, r5
 80093cc:	4110      	asrs	r0, r2
 80093ce:	2900      	cmp	r1, #0
 80093d0:	bfb8      	it	lt
 80093d2:	4240      	neglt	r0, r0
 80093d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80093d8:	ee36 5b07 	vadd.f64	d5, d6, d7
 80093dc:	ec53 2b15 	vmov	r2, r3, d5
 80093e0:	2200      	movs	r2, #0
 80093e2:	ec43 2b15 	vmov	d5, r2, r3
 80093e6:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8009538 <__ieee754_pow+0x6a0>
 80093ea:	ee35 6b46 	vsub.f64	d6, d5, d6
 80093ee:	ee37 6b46 	vsub.f64	d6, d7, d6
 80093f2:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8009540 <__ieee754_pow+0x6a8>
 80093f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80093fa:	eea6 7b04 	vfma.f64	d7, d6, d4
 80093fe:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8009548 <__ieee754_pow+0x6b0>
 8009402:	eeb0 4b47 	vmov.f64	d4, d7
 8009406:	eea5 4b06 	vfma.f64	d4, d5, d6
 800940a:	eeb0 3b44 	vmov.f64	d3, d4
 800940e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8009412:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8009550 <__ieee754_pow+0x6b8>
 8009416:	ee37 7b43 	vsub.f64	d7, d7, d3
 800941a:	ee24 6b04 	vmul.f64	d6, d4, d4
 800941e:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8009558 <__ieee754_pow+0x6c0>
 8009422:	eea4 7b07 	vfma.f64	d7, d4, d7
 8009426:	eea6 3b05 	vfma.f64	d3, d6, d5
 800942a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8009560 <__ieee754_pow+0x6c8>
 800942e:	eea3 5b06 	vfma.f64	d5, d3, d6
 8009432:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8009568 <__ieee754_pow+0x6d0>
 8009436:	eea5 3b06 	vfma.f64	d3, d5, d6
 800943a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8009570 <__ieee754_pow+0x6d8>
 800943e:	eea3 5b06 	vfma.f64	d5, d3, d6
 8009442:	eeb0 3b44 	vmov.f64	d3, d4
 8009446:	eea5 3b46 	vfms.f64	d3, d5, d6
 800944a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800944e:	eeb0 6b43 	vmov.f64	d6, d3
 8009452:	ee24 3b03 	vmul.f64	d3, d4, d3
 8009456:	ee36 5b45 	vsub.f64	d5, d6, d5
 800945a:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800945e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009462:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009466:	ee37 7b44 	vsub.f64	d7, d7, d4
 800946a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800946e:	ed8d 7b00 	vstr	d7, [sp]
 8009472:	9901      	ldr	r1, [sp, #4]
 8009474:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 8009478:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800947c:	da1e      	bge.n	80094bc <__ieee754_pow+0x624>
 800947e:	eeb0 0b47 	vmov.f64	d0, d7
 8009482:	f000 f939 	bl	80096f8 <scalbn>
 8009486:	ee20 7b08 	vmul.f64	d7, d0, d8
 800948a:	e56e      	b.n	8008f6a <__ieee754_pow+0xd2>
 800948c:	4b43      	ldr	r3, [pc, #268]	; (800959c <__ieee754_pow+0x704>)
 800948e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 8009492:	4298      	cmp	r0, r3
 8009494:	f77f af7c 	ble.w	8009390 <__ieee754_pow+0x4f8>
 8009498:	4b41      	ldr	r3, [pc, #260]	; (80095a0 <__ieee754_pow+0x708>)
 800949a:	440b      	add	r3, r1
 800949c:	4313      	orrs	r3, r2
 800949e:	d002      	beq.n	80094a6 <__ieee754_pow+0x60e>
 80094a0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8009578 <__ieee754_pow+0x6e0>
 80094a4:	e660      	b.n	8009168 <__ieee754_pow+0x2d0>
 80094a6:	ee35 5b46 	vsub.f64	d5, d5, d6
 80094aa:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80094ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b2:	f6ff af6d 	blt.w	8009390 <__ieee754_pow+0x4f8>
 80094b6:	e7f3      	b.n	80094a0 <__ieee754_pow+0x608>
 80094b8:	2000      	movs	r0, #0
 80094ba:	e78d      	b.n	80093d8 <__ieee754_pow+0x540>
 80094bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094c0:	460b      	mov	r3, r1
 80094c2:	ec43 2b10 	vmov	d0, r2, r3
 80094c6:	e7de      	b.n	8009486 <__ieee754_pow+0x5ee>
 80094c8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80094cc:	e54d      	b.n	8008f6a <__ieee754_pow+0xd2>
 80094ce:	e9cd 6700 	strd	r6, r7, [sp]
 80094d2:	e574      	b.n	8008fbe <__ieee754_pow+0x126>
 80094d4:	ed8d 8b00 	vstr	d8, [sp]
 80094d8:	e571      	b.n	8008fbe <__ieee754_pow+0x126>
 80094da:	4615      	mov	r5, r2
 80094dc:	e557      	b.n	8008f8e <__ieee754_pow+0xf6>
 80094de:	bf00      	nop
 80094e0:	00000000 	.word	0x00000000
 80094e4:	43400000 	.word	0x43400000
 80094e8:	4a454eef 	.word	0x4a454eef
 80094ec:	3fca7e28 	.word	0x3fca7e28
 80094f0:	93c9db65 	.word	0x93c9db65
 80094f4:	3fcd864a 	.word	0x3fcd864a
 80094f8:	a91d4101 	.word	0xa91d4101
 80094fc:	3fd17460 	.word	0x3fd17460
 8009500:	518f264d 	.word	0x518f264d
 8009504:	3fd55555 	.word	0x3fd55555
 8009508:	db6fabff 	.word	0xdb6fabff
 800950c:	3fdb6db6 	.word	0x3fdb6db6
 8009510:	33333303 	.word	0x33333303
 8009514:	3fe33333 	.word	0x3fe33333
 8009518:	dc3a03fd 	.word	0xdc3a03fd
 800951c:	3feec709 	.word	0x3feec709
 8009520:	145b01f5 	.word	0x145b01f5
 8009524:	be3e2fe0 	.word	0xbe3e2fe0
 8009528:	e0000000 	.word	0xe0000000
 800952c:	3feec709 	.word	0x3feec709
 8009530:	652b82fe 	.word	0x652b82fe
 8009534:	3c971547 	.word	0x3c971547
 8009538:	fefa39ef 	.word	0xfefa39ef
 800953c:	3fe62e42 	.word	0x3fe62e42
 8009540:	0ca86c39 	.word	0x0ca86c39
 8009544:	be205c61 	.word	0xbe205c61
 8009548:	00000000 	.word	0x00000000
 800954c:	3fe62e43 	.word	0x3fe62e43
 8009550:	72bea4d0 	.word	0x72bea4d0
 8009554:	3e663769 	.word	0x3e663769
 8009558:	c5d26bf1 	.word	0xc5d26bf1
 800955c:	bebbbd41 	.word	0xbebbbd41
 8009560:	af25de2c 	.word	0xaf25de2c
 8009564:	3f11566a 	.word	0x3f11566a
 8009568:	16bebd93 	.word	0x16bebd93
 800956c:	bf66c16c 	.word	0xbf66c16c
 8009570:	5555553e 	.word	0x5555553e
 8009574:	3fc55555 	.word	0x3fc55555
 8009578:	c2f8f359 	.word	0xc2f8f359
 800957c:	01a56e1f 	.word	0x01a56e1f
 8009580:	0003988e 	.word	0x0003988e
 8009584:	000bb679 	.word	0x000bb679
 8009588:	08009a88 	.word	0x08009a88
 800958c:	08009aa8 	.word	0x08009aa8
 8009590:	08009a98 	.word	0x08009a98
 8009594:	3fe00000 	.word	0x3fe00000
 8009598:	000fffff 	.word	0x000fffff
 800959c:	4090cbff 	.word	0x4090cbff
 80095a0:	3f6f3400 	.word	0x3f6f3400

080095a4 <__ieee754_sqrt>:
 80095a4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80095a8:	4770      	bx	lr

080095aa <fabs>:
 80095aa:	ec51 0b10 	vmov	r0, r1, d0
 80095ae:	ee10 2a10 	vmov	r2, s0
 80095b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095b6:	ec43 2b10 	vmov	d0, r2, r3
 80095ba:	4770      	bx	lr

080095bc <finite>:
 80095bc:	ee10 3a90 	vmov	r3, s1
 80095c0:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80095c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80095c8:	0fc0      	lsrs	r0, r0, #31
 80095ca:	4770      	bx	lr

080095cc <matherr>:
 80095cc:	2000      	movs	r0, #0
 80095ce:	4770      	bx	lr

080095d0 <nan>:
 80095d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80095d8 <nan+0x8>
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	00000000 	.word	0x00000000
 80095dc:	7ff80000 	.word	0x7ff80000

080095e0 <rint>:
 80095e0:	b530      	push	{r4, r5, lr}
 80095e2:	b085      	sub	sp, #20
 80095e4:	ed8d 0b00 	vstr	d0, [sp]
 80095e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ec:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80095f0:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 80095f4:	2813      	cmp	r0, #19
 80095f6:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 80095fa:	dc5a      	bgt.n	80096b2 <rint+0xd2>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	da2f      	bge.n	8009660 <rint+0x80>
 8009600:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009604:	4311      	orrs	r1, r2
 8009606:	d027      	beq.n	8009658 <rint+0x78>
 8009608:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800960c:	4315      	orrs	r5, r2
 800960e:	426a      	negs	r2, r5
 8009610:	432a      	orrs	r2, r5
 8009612:	0b12      	lsrs	r2, r2, #12
 8009614:	0c5b      	lsrs	r3, r3, #17
 8009616:	045b      	lsls	r3, r3, #17
 8009618:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800961c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009620:	ea42 0103 	orr.w	r1, r2, r3
 8009624:	4b31      	ldr	r3, [pc, #196]	; (80096ec <rint+0x10c>)
 8009626:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800962a:	ed93 6b00 	vldr	d6, [r3]
 800962e:	ec41 0b17 	vmov	d7, r0, r1
 8009632:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009636:	ed8d 7b02 	vstr	d7, [sp, #8]
 800963a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800963e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009642:	ed8d 7b00 	vstr	d7, [sp]
 8009646:	9b01      	ldr	r3, [sp, #4]
 8009648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800964c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009650:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8009654:	e9cd 0100 	strd	r0, r1, [sp]
 8009658:	ed9d 0b00 	vldr	d0, [sp]
 800965c:	b005      	add	sp, #20
 800965e:	bd30      	pop	{r4, r5, pc}
 8009660:	4923      	ldr	r1, [pc, #140]	; (80096f0 <rint+0x110>)
 8009662:	4101      	asrs	r1, r0
 8009664:	ea03 0501 	and.w	r5, r3, r1
 8009668:	4315      	orrs	r5, r2
 800966a:	d0f5      	beq.n	8009658 <rint+0x78>
 800966c:	0849      	lsrs	r1, r1, #1
 800966e:	ea03 0501 	and.w	r5, r3, r1
 8009672:	432a      	orrs	r2, r5
 8009674:	d00b      	beq.n	800968e <rint+0xae>
 8009676:	ea23 0101 	bic.w	r1, r3, r1
 800967a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800967e:	2813      	cmp	r0, #19
 8009680:	fa43 f300 	asr.w	r3, r3, r0
 8009684:	bf0c      	ite	eq
 8009686:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800968a:	2200      	movne	r2, #0
 800968c:	430b      	orrs	r3, r1
 800968e:	4619      	mov	r1, r3
 8009690:	4b16      	ldr	r3, [pc, #88]	; (80096ec <rint+0x10c>)
 8009692:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009696:	ed94 6b00 	vldr	d6, [r4]
 800969a:	4610      	mov	r0, r2
 800969c:	ec41 0b17 	vmov	d7, r0, r1
 80096a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80096a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80096b0:	e008      	b.n	80096c4 <rint+0xe4>
 80096b2:	2833      	cmp	r0, #51	; 0x33
 80096b4:	dd09      	ble.n	80096ca <rint+0xea>
 80096b6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80096ba:	d1cd      	bne.n	8009658 <rint+0x78>
 80096bc:	ed9d 7b00 	vldr	d7, [sp]
 80096c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80096c4:	ed8d 7b00 	vstr	d7, [sp]
 80096c8:	e7c6      	b.n	8009658 <rint+0x78>
 80096ca:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 80096ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80096d2:	40c1      	lsrs	r1, r0
 80096d4:	420a      	tst	r2, r1
 80096d6:	d0bf      	beq.n	8009658 <rint+0x78>
 80096d8:	0849      	lsrs	r1, r1, #1
 80096da:	420a      	tst	r2, r1
 80096dc:	bf1f      	itttt	ne
 80096de:	ea22 0101 	bicne.w	r1, r2, r1
 80096e2:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 80096e6:	4102      	asrne	r2, r0
 80096e8:	430a      	orrne	r2, r1
 80096ea:	e7d0      	b.n	800968e <rint+0xae>
 80096ec:	08009ab8 	.word	0x08009ab8
 80096f0:	000fffff 	.word	0x000fffff
 80096f4:	00000000 	.word	0x00000000

080096f8 <scalbn>:
 80096f8:	b500      	push	{lr}
 80096fa:	ed2d 8b02 	vpush	{d8}
 80096fe:	b083      	sub	sp, #12
 8009700:	ed8d 0b00 	vstr	d0, [sp]
 8009704:	9b01      	ldr	r3, [sp, #4]
 8009706:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800970a:	b9a2      	cbnz	r2, 8009736 <scalbn+0x3e>
 800970c:	9a00      	ldr	r2, [sp, #0]
 800970e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009712:	4313      	orrs	r3, r2
 8009714:	d03a      	beq.n	800978c <scalbn+0x94>
 8009716:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80097d0 <scalbn+0xd8>
 800971a:	4b35      	ldr	r3, [pc, #212]	; (80097f0 <scalbn+0xf8>)
 800971c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009720:	4298      	cmp	r0, r3
 8009722:	ed8d 7b00 	vstr	d7, [sp]
 8009726:	da11      	bge.n	800974c <scalbn+0x54>
 8009728:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80097d8 <scalbn+0xe0>
 800972c:	ed9d 6b00 	vldr	d6, [sp]
 8009730:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009734:	e007      	b.n	8009746 <scalbn+0x4e>
 8009736:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800973a:	428a      	cmp	r2, r1
 800973c:	d10a      	bne.n	8009754 <scalbn+0x5c>
 800973e:	ed9d 7b00 	vldr	d7, [sp]
 8009742:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009746:	ed8d 7b00 	vstr	d7, [sp]
 800974a:	e01f      	b.n	800978c <scalbn+0x94>
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009752:	3a36      	subs	r2, #54	; 0x36
 8009754:	4402      	add	r2, r0
 8009756:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800975a:	428a      	cmp	r2, r1
 800975c:	dd0a      	ble.n	8009774 <scalbn+0x7c>
 800975e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 80097e0 <scalbn+0xe8>
 8009762:	eeb0 0b48 	vmov.f64	d0, d8
 8009766:	ed9d 1b00 	vldr	d1, [sp]
 800976a:	f000 f843 	bl	80097f4 <copysign>
 800976e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8009772:	e7e8      	b.n	8009746 <scalbn+0x4e>
 8009774:	2a00      	cmp	r2, #0
 8009776:	dd10      	ble.n	800979a <scalbn+0xa2>
 8009778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800977c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009780:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009784:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009788:	e9cd 0100 	strd	r0, r1, [sp]
 800978c:	ed9d 0b00 	vldr	d0, [sp]
 8009790:	b003      	add	sp, #12
 8009792:	ecbd 8b02 	vpop	{d8}
 8009796:	f85d fb04 	ldr.w	pc, [sp], #4
 800979a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800979e:	da06      	bge.n	80097ae <scalbn+0xb6>
 80097a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80097a4:	4298      	cmp	r0, r3
 80097a6:	dcda      	bgt.n	800975e <scalbn+0x66>
 80097a8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 80097d8 <scalbn+0xe0>
 80097ac:	e7d9      	b.n	8009762 <scalbn+0x6a>
 80097ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097b6:	3236      	adds	r2, #54	; 0x36
 80097b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097bc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80097c0:	ec41 0b17 	vmov	d7, r0, r1
 80097c4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80097e8 <scalbn+0xf0>
 80097c8:	e7b2      	b.n	8009730 <scalbn+0x38>
 80097ca:	bf00      	nop
 80097cc:	f3af 8000 	nop.w
 80097d0:	00000000 	.word	0x00000000
 80097d4:	43500000 	.word	0x43500000
 80097d8:	c2f8f359 	.word	0xc2f8f359
 80097dc:	01a56e1f 	.word	0x01a56e1f
 80097e0:	8800759c 	.word	0x8800759c
 80097e4:	7e37e43c 	.word	0x7e37e43c
 80097e8:	00000000 	.word	0x00000000
 80097ec:	3c900000 	.word	0x3c900000
 80097f0:	ffff3cb0 	.word	0xffff3cb0

080097f4 <copysign>:
 80097f4:	ec51 0b10 	vmov	r0, r1, d0
 80097f8:	ee11 0a90 	vmov	r0, s3
 80097fc:	ee10 2a10 	vmov	r2, s0
 8009800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009804:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009808:	ea41 0300 	orr.w	r3, r1, r0
 800980c:	ec43 2b10 	vmov	d0, r2, r3
 8009810:	4770      	bx	lr
	...

08009814 <_init>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	bf00      	nop
 8009818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981a:	bc08      	pop	{r3}
 800981c:	469e      	mov	lr, r3
 800981e:	4770      	bx	lr

08009820 <_fini>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr
